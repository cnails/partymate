import { Telegraf, Markup } from 'telegraf';
import { prisma } from '../../services/prisma.js';
import { yesNoEmoji } from '../utils/format.js';

export const registerProfileCommand = (bot: Telegraf) => {
  bot.command('profile', async (ctx) => {
    if (!ctx.from) return;
    const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
    if (!me) {
      await ctx.reply('–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏. –ù–∞–∂–º–∏—Ç–µ /start.');
      return;
    }

    if (me.role === 'PERFORMER') {
      const p = me.performerProfile;
      if (!p) {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: /start');
        return;
      }
      if (p.status === 'MODERATION') {
        await ctx.reply('–ê–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      }
      const openCount = await prisma.request.count({
        where: { performerId: me.id, status: { in: ['NEW', 'NEGOTIATION', 'ACCEPTED', 'PAID'] } as any },
      });
      const doneCount = await prisma.request.count({
        where: { performerId: me.id, status: { in: ['DONE', 'COMPLETED'] } as any },
      });
      const planActive = p.planUntil && new Date(p.planUntil).getTime() > Date.now();
      const hasStandard = planActive && (p.plan === 'STANDARD' || p.plan === 'PRO');
      const hasPro = planActive && p.plan === 'PRO';
      await ctx.reply(
        [
          'üë©‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—ã',
          `–°—Ç–∞—Ç—É—Å: ${p.status}`,
          `–ê–Ω–∫–µ—Ç–∞ —Å–∫—Ä—ã—Ç–∞: ${p.hidden ? '–¥–∞' : '–Ω–µ—Ç'}`,
          `–£—Å–ª—É–≥–∏: ${p.games.join(', ')}`,
          `–¶–µ–Ω–∞: ${p.pricePerHour}‚ÇΩ/—á`,
          p.about ? `–û —Å–µ–±–µ: ${p.about}` : undefined,
          `–§–æ—Ç–æ: ${yesNoEmoji(!!p.photoUrl)}${p.photoUrl && !hasStandard ? ' (–Ω–µ –≤–∏–¥–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º)' : ''}`,
          `–ì–æ–ª–æ—Å: ${yesNoEmoji(!!p.voiceSampleUrl)}${p.voiceSampleUrl && !hasPro ? ' (–Ω–µ —Å–ª—ã—à–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º)' : ''}`,
          `–†–µ–π—Ç–∏–Ω–≥: ${p.rating?.toFixed(1) ?? '‚Äî'}`,
          `–ó–∞—è–≤–æ–∫: –æ—Ç–∫—Ä—ã—Ç—ã—Ö ${openCount} ¬∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${doneCount}`,
        ].filter(Boolean).join('\n'),
        Markup.inlineKeyboard([
          [Markup.button.callback('–û—Ç–∑—ã–≤—ã', `view_reviews:${me.id}`)],
          [Markup.button.callback('–ú–æ–∏ –∑–∞—è–≤–∫–∏', `req_list:p:open:0`)],
          [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', 'go_listing')],
          [Markup.button.callback(p.hidden ? '–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É' : '–°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É', 'toggle_listing_visibility')],
        ]),
      );
    } else {
      // CLIENT
      const last = await prisma.request.findMany({
        where: { clientId: me.id },
        orderBy: { createdAt: 'desc' },
        take: 3,
        include: { performer: true },
      });
      const prefs: any = me.searchPrefs ?? {};
      const prefsLine =
        prefs.games?.length ? `–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${prefs.games.join(', ')}` : undefined;
      await ctx.reply(
        [
          'üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞',
          prefsLine,
          last.length ? '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:' : '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.',
          ...last.map((r) => `‚Ä¢ #${r.id} ¬∑ ${r.game} ¬∑ ${r.durationMin} –º–∏–Ω ¬∑ —Å—Ç–∞—Ç—É—Å: ${r.status}`),
        ].filter(Boolean).join('\n'),
        Markup.inlineKeyboard([
          [Markup.button.callback('–ú–æ–∏ –∑–∞—è–≤–∫–∏', `req_list:c:open:0`)],
        ]),
      );
    }
  });

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–∑ /profile
  bot.action('go_listing', async (ctx) => {
    await ctx.answerCbQuery();
    // @ts-ignore
    await ctx.scene.enter('performerListingWizard');
  });

  bot.action('toggle_listing_visibility', async (ctx) => {
    await ctx.answerCbQuery();
    if (!ctx.from) return;
    const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
    if (!me?.performerProfile) return;
    const hidden = !me.performerProfile.hidden;
    await prisma.performerProfile.update({ where: { id: me.performerProfile.id }, data: { hidden } });
    await ctx.reply(hidden ? '–ê–Ω–∫–µ—Ç–∞ —Å–∫—Ä—ã—Ç–∞' : '–ê–Ω–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞');
  });
};
