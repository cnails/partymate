import { Telegraf, Markup } from 'telegraf';
import { prisma } from '../../services/prisma.js';
import { config } from '../../config.js';

const planTitle = (p: 'BASIC'|'STANDARD'|'PRO') => ({ BASIC: 'BASIC', STANDARD: 'STANDARD', PRO: 'PRO' }[p]);

function kbMain() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üöÄ –ö—É–ø–∏—Ç—å –±—É—Å—Ç 7 –¥–Ω–µ–π', 'bill_buy:boost:7')],
    [Markup.button.callback('‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ STANDARD 30 –¥–Ω–µ–π', 'bill_buy:plan:STANDARD:30')],
    [Markup.button.callback('üèÜ –ü–æ–¥–ø–∏—Å–∫–∞ PRO 30 –¥–Ω–µ–π', 'bill_buy:plan:PRO:30')],
    [Markup.button.callback('üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'bill_orders')],
  ]);
}

export const registerBillingCommand = (bot: Telegraf) => {
  bot.command('billing', async (ctx) => {
    if (!ctx.from) return;
    const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
    if (!me || me.role !== 'PERFORMER' || !me.performerProfile) {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü.');
      return;
    }
    const p = me.performerProfile;
    await ctx.reply(
      [
        'üí≥ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã',
        `–¢–∞—Ä–∏—Ñ: ${planTitle(p.plan as any)}${p.planUntil ? ` (–¥–æ ${new Date(p.planUntil).toISOString().slice(0,10)})` : ''}`,
        p.isBoosted && p.boostUntil ? `–ë—É—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${new Date(p.boostUntil).toISOString().slice(0,10)}` : '–ë—É—Å—Ç: –Ω–µ—Ç',
        '',
        `–¶–µ–Ω—ã: –±—É—Å—Ç 7–¥ ‚Äî ${config.billing.BOOST_7D_RUB}‚ÇΩ; STANDARD 30–¥ ‚Äî ${config.billing.PLAN_STD_30D_RUB}‚ÇΩ; PRO 30–¥ ‚Äî ${config.billing.PLAN_PRO_30D_RUB}‚ÇΩ.`,
      ].join('\n'),
      kbMain(),
    );
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return next();

    if (data === 'bill_orders') {
      if (!ctx.from) return;
      const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
      if (!me?.performerProfile) return;
      const orders = await prisma.billingOrder.findMany({
        where: { performerId: me.performerProfile.id },
        orderBy: { createdAt: 'desc' },
        take: 10,
      });
      if (!orders.length) {
        await ctx.answerCbQuery?.();
        await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.', kbMain());
        return;
      }
      await ctx.answerCbQuery?.();
      for (const o of orders) {
        await ctx.reply(
          [
            `#${o.id} ¬∑ ${o.type} ¬∑ ${o.status}`,
            o.plan ? `–ü–ª–∞–Ω: ${o.plan} (${o.days} –¥–Ω)` : `–ë—É—Å—Ç: ${o.days} –¥–Ω`,
            `–°—É–º–º–∞: ${o.amountRub}‚ÇΩ`,
            o.activatedUntil ? `–ê–∫—Ç–∏–≤–µ–Ω –¥–æ ${new Date(o.activatedUntil).toISOString().slice(0,10)}` : undefined,
          ].filter(Boolean).join('\n'),
          Markup.inlineKeyboard([
            [Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', `bill_upload:${o.id}`)],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', `bill_cancel:${o.id}`)],
          ]),
        );
      }
      return;
    }

    if (data.startsWith('bill_buy:boost:')) {
      const days = Number(data.split(':')[2] || '7');
      if (!ctx.from) return;
      const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
      if (!me?.performerProfile) return;
      const amount = config.billing.BOOST_7D_RUB;
      const order = await prisma.billingOrder.create({
        data: { performerId: me.performerProfile.id, type: 'BOOST', days, amountRub: amount, proofUrls: [] },
      });
      await ctx.answerCbQuery?.();
      await ctx.reply(
        [
          `–ó–∞–∫–∞–∑ #${order.id}: –ë–£–°–¢ –Ω–∞ ${days} –¥–Ω–µ–π ‚Äî ${amount}‚ÇΩ.`,
          `–û–ø–ª–∞—Ç–∞: ${config.billing.INSTRUCTIONS}`,
          '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç).',
        ].join('\n'),
        Markup.inlineKeyboard([[Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', `bill_upload:${order.id}`)]]),
      );
      return;
    }

    if (data.startsWith('bill_buy:plan:')) {
      const [, , plan, daysStr] = data.split(':');
      const days = Number(daysStr || '30');
      const amount = plan === 'PRO' ? config.billing.PLAN_PRO_30D_RUB : config.billing.PLAN_STD_30D_RUB;
      if (!ctx.from) return;
      const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
      if (!me?.performerProfile) return;
      const order = await prisma.billingOrder.create({
        data: { performerId: me.performerProfile.id, type: 'PLAN', plan: plan as any, days, amountRub: amount, proofUrls: [] },
      });
      await ctx.answerCbQuery?.();
      await ctx.reply(
        [
          `–ó–∞–∫–∞–∑ #${order.id}: –¢–∞—Ä–∏—Ñ ${plan} –Ω–∞ ${days} –¥–Ω–µ–π ‚Äî ${amount}‚ÇΩ.`,
          `–û–ø–ª–∞—Ç–∞: ${config.billing.INSTRUCTIONS}`,
          '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç).',
        ].join('\n'),
        Markup.inlineKeyboard([[Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', `bill_upload:${order.id}`)]]),
      );
      return;
    }

    if (data.startsWith('bill_upload:')) {
      const id = Number(data.split(':')[1]);
      (ctx.session as any).awaitingBillingProofFor = id;
      await ctx.answerCbQuery?.();
      await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
      return;
    }

    if (data.startsWith('bill_cancel:')) {
      const id = Number(data.split(':')[1]);
      await prisma.billingOrder.update({ where: { id }, data: { status: 'CANCELED' } });
      await ctx.answerCbQuery?.('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω');
      await ctx.editMessageText('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.');
      return;
    }

    return next();
  });

  // –ü—Ä–∏—ë–º –ø—Ä—É—Ñ–æ–≤ (—Ñ–æ—Ç–æ/–¥–æ–∫)
  bot.on(['photo', 'document'], async (ctx, next) => {
    const awaiting = (ctx.session as any).awaitingBillingProofFor as number | undefined;
    if (!awaiting) return next();

    const fileIds: string[] = [];
    if ('photo' in ctx.message! && (ctx.message as any).photo?.length) {
      fileIds.push((ctx.message as any).photo[(ctx.message as any).photo.length - 1].file_id);
    }
    if ('document' in ctx.message! && (ctx.message as any).document) {
      fileIds.push((ctx.message as any).document.file_id);
    }
    await prisma.billingOrder.update({ where: { id: awaiting }, data: { proofUrls: { push: fileIds } } });
    (ctx.session as any).awaitingBillingProofFor = undefined;
    await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º.');
  });
};
