import { Telegraf, Markup } from 'telegraf';
import { prisma } from '../../services/prisma.js';
import { logger } from '../../logger.js';

function mainKb() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', 'pi_set')],
    [Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å', 'pi_clear')],
    [Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å', 'pi_close')],
  ]);
}

export const registerPayinfoCommand = (bot: Telegraf) => {
  bot.command('payinfo', async (ctx) => {
    if (!ctx.from) return;
    logger.info(
      { botId: ctx.botInfo?.id, userId: ctx.from.id, command: 'payinfo' },
      'command received',
    );
    const me = await prisma.user.findUnique({
      where: { tgId: String(ctx.from.id) },
      include: { performerProfile: true },
    });
    if (!me || me.role !== 'PERFORMER' || !me.performerProfile) {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞–º.');
      return;
    }
    const txt = me.performerProfile.defaultPayInstructions
      ? `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n${me.performerProfile.defaultPayInstructions}`
      : 'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∑–∞–¥–∞–Ω—ã.\n–ù–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å.';
    await ctx.reply(txt, mainKb());
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return next();
    if (!ctx.from) return next();

    if (data === 'pi_close') {
      await ctx.answerCbQuery?.();
      try { await ctx.editMessageReplyMarkup(undefined); } catch {}
      return;
    }

    const me = await prisma.user.findUnique({
      where: { tgId: String(ctx.from.id) },
      include: { performerProfile: true },
    });
    if (!me?.performerProfile) return next();

    if (data === 'pi_set') {
      (ctx.session as any).awaitingDefaultPayInfo = me.performerProfile.id;
      await ctx.answerCbQuery?.();
      await ctx.reply(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (—Ç–µ–∫—Å—Ç). –ü—Ä–∏–º–µ—Ä:\n' +
          '–ë–∞–Ω–∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ, 5536 **** **** 1234; –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ò–≤–∞–Ω –ò.; –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –∑–∞—è–≤–∫–∞ #{ID}',
      );
      return;
    }

    if (data === 'pi_clear') {
      await prisma.performerProfile.update({
        where: { id: me.performerProfile.id },
        data: { defaultPayInstructions: null },
      });
      await ctx.answerCbQuery?.('–û—á–∏—â–µ–Ω–æ');
      await ctx.reply('–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª–µ–Ω—ã.', mainKb());
      return;
    }

    return next();
  });

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  bot.on('text', async (ctx, next) => {
    const perfId = (ctx.session as any).awaitingDefaultPayInfo as number | undefined;
    if (!perfId) return next();
    const text = (ctx.message as any).text?.trim();
    if (!text) {
      await ctx.reply('–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ /cancel.');
      return;
    }
    await prisma.performerProfile.update({
      where: { id: perfId },
      data: { defaultPayInstructions: text },
    });
    (ctx.session as any).awaitingDefaultPayInfo = undefined;
    await ctx.reply('–ì–æ—Ç–æ–≤–æ! –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–æ–∫.');
  });
};
