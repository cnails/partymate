import { Telegraf, Markup } from 'telegraf';
import { prisma } from '../../services/prisma.js';
import { runProfileAutoChecks } from '../autoChecks.js';

const MAX_PHOTOS = 8;
const MAX_IMAGE_MB = 4;
const MAX_VOICE_MB = 2;
const MAX_VOICE_SEC = 30;

function kb() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', 'gal_add_photo')],
    [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ', 'gal_del_last')],
    [Markup.button.callback('üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ', 'gal_clear')],
    [Markup.button.callback('üé§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –ø—Ä–æ–±—É', 'gal_add_voice')],
    [Markup.button.callback('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ', 'gal_show')],
  ]);
}

export const registerGalleryCommand = (bot: Telegraf) => {
  bot.command('gallery', async (ctx) => {
    if (!ctx.from) return;
    const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
    if (!me || me.role !== 'PERFORMER' || !me.performerProfile) {
      await ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞–º –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.');
      return;
    }
    const p = me.performerProfile;
    await ctx.reply(
      [
        'üì∑ –ì–∞–ª–µ—Ä–µ—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞—è –ø—Ä–æ–±–∞',
        `–§–æ—Ç–æ: ${(p.photos?.length || 0)}/${MAX_PHOTOS}`,
        p.voiceSampleUrl ? 'üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø—Ä–æ–±–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' : 'üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø—Ä–æ–±–∞: –Ω–µ—Ç',
        '',
        '–î–æ–±–∞–≤—å—Ç–µ –¥–æ 8 —Ñ–æ—Ç–æ (–¥–æ 4 –ú–ë –∫–∞–∂–¥–æ–µ). –ì–æ–ª–æ—Å–æ–≤—É—é –ø—Ä–æ–±—É ‚Äî –¥–æ 30 —Å–µ–∫—É–Ω–¥ –∏ 2 –ú–ë.',
      ].join('\n'),
      kb(),
    );
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return next();
    if (!ctx.from) return next();

    const me = await prisma.user.findUnique({ where: { tgId: String(ctx.from.id) }, include: { performerProfile: true } });
    if (!me?.performerProfile) return next();
    const p = me.performerProfile;

    if (data === 'gal_show') {
      await ctx.answerCbQuery?.();
      await ctx.reply(
        [`–§–æ—Ç–æ: ${(p.photos?.length || 0)}/${MAX_PHOTOS}`, p.voiceSampleUrl ? 'üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø—Ä–æ–±–∞: –µ—Å—Ç—å' : 'üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø—Ä–æ–±–∞: –Ω–µ—Ç'].join('\n'),
        kb(),
      );
      return;
    }

    if (data === 'gal_add_photo') {
      (ctx.session as any).awaitingPhotoFor = p.id;
      await ctx.answerCbQuery?.();
      await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
      return;
    }

    if (data === 'gal_del_last') {
      await ctx.answerCbQuery?.();
      const arr = [...(p.photos || [])];
      if (!arr.length) { await ctx.reply('–í –≥–∞–ª–µ—Ä–µ–µ –Ω–µ—Ç —Ñ–æ—Ç–æ.'); return; }
      arr.pop();
      await prisma.performerProfile.update({ where: { id: p.id }, data: { photos: arr } });
      await ctx.reply(`–£–¥–∞–ª–∏–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ. –§–æ—Ç–æ: ${arr.length}/${MAX_PHOTOS}`);
      await runProfileAutoChecks(p.id);
      return;
    }

    if (data === 'gal_clear') {
      await ctx.answerCbQuery?.();
      await prisma.performerProfile.update({ where: { id: p.id }, data: { photos: [] } });
      await ctx.reply('–ì–∞–ª–µ—Ä–µ—è –æ—á–∏—â–µ–Ω–∞.');
      await runProfileAutoChecks(p.id);
      return;
    }

    if (data === 'gal_add_voice') {
      (ctx.session as any).awaitingVoiceFor = p.id;
      await ctx.answerCbQuery?.();
      await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ (voice) –∏–ª–∏ –∞—É–¥–∏–æ –¥–æ 30 —Å–µ–∫ –∏ –¥–æ 2 –ú–ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
      return;
    }

    return next();
  });

  // –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ
  bot.on(['photo', 'document'], async (ctx, next) => {
    const waiting = (ctx.session as any).awaitingPhotoFor as number | undefined;
    if (!waiting) return next();
    const perf = await prisma.performerProfile.findUnique({ where: { id: waiting } });
    if (!perf) return next();

    let fileId: string | undefined;
    if ('photo' in ctx.message! && (ctx.message as any).photo?.length) {
      const ph = (ctx.message as any).photo[(ctx.message as any).photo.length - 1];
      fileId = ph.file_id;
    } else if ('document' in ctx.message! && (ctx.message as any).document) {
      const doc = (ctx.message as any).document;
      const name = String(doc.file_name || '').toLowerCase();
      if (name.endsWith('.jpg') || name.endsWith('.jpeg') || name.endsWith('.png') || name.endsWith('.webp')) {
        fileId = doc.file_id;
      } else {
        await ctx.reply('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (jpg/png/webp). –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
        (ctx.session as any).awaitingPhotoFor = undefined;
        return;
      }
    }

    if (!fileId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      (ctx.session as any).awaitingPhotoFor = undefined;
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (best-effort)
    try {
      const f = await ctx.telegram.getFile(fileId);
      const size = (f as any).file_size as number | undefined;
      if (size && size > MAX_IMAGE_MB * 1024 * 1024) {
        await ctx.reply(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> ${MAX_IMAGE_MB} –ú–ë).`);
        (ctx.session as any).awaitingPhotoFor = undefined;
        return;
      }
    } catch {}

    const arr = [...(perf.photos || [])];
    if (arr.length >= MAX_PHOTOS) {
      await ctx.reply(`–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${MAX_PHOTOS}. –£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–µ–µ.`);
      (ctx.session as any).awaitingPhotoFor = undefined;
      return;
    }
    arr.push(`tg:${fileId}`);
    await prisma.performerProfile.update({ where: { id: waiting }, data: { photos: arr } });
    await ctx.reply(`–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –§–æ—Ç–æ: ${arr.length}/${MAX_PHOTOS}`);
    (ctx.session as any).awaitingPhotoFor = undefined;
    await runProfileAutoChecks(waiting);
  });

  // –ü—Ä–∏—ë–º –≥–æ–ª–æ—Å–∞
  bot.on(['voice', 'audio'], async (ctx, next) => {
    const waiting = (ctx.session as any).awaitingVoiceFor as number | undefined;
    if (!waiting) return next();
    const perf = await prisma.performerProfile.findUnique({ where: { id: waiting } });
    if (!perf) return next();

    let fileId: string | undefined;
    let duration = 0;
    if ('voice' in ctx.message!) {
      const v = (ctx.message as any).voice;
      fileId = v.file_id;
      duration = Number(v.duration || 0);
    } else if ('audio' in ctx.message!) {
      const a = (ctx.message as any).audio;
      fileId = a.file_id;
      duration = Number(a.duration || 0);
    }

    if (!fileId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      (ctx.session as any).awaitingVoiceFor = undefined;
      return;
    }

    if (duration > MAX_VOICE_SEC) {
      await ctx.reply(`–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –ú–∞–∫—Å–∏–º—É–º ${MAX_VOICE_SEC} —Å–µ–∫—É–Ω–¥.`);
      (ctx.session as any).awaitingVoiceFor = undefined;
      return;
    }

    try {
      const f = await ctx.telegram.getFile(fileId);
      const size = (f as any).file_size as number | undefined;
      if (size && size > MAX_VOICE_MB * 1024 * 1024) {
        await ctx.reply(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> ${MAX_VOICE_MB} –ú–ë).`);
        (ctx.session as any).awaitingVoiceFor = undefined;
        return;
      }
    } catch {}

    await prisma.performerProfile.update({ where: { id: waiting }, data: { voiceSampleUrl: `tg:${fileId}` } });
    await ctx.reply('–ì–æ–ª–æ—Å–æ–≤–∞—è –ø—Ä–æ–±–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
    (ctx.session as any).awaitingVoiceFor = undefined;
    await runProfileAutoChecks(waiting);
  });
};
