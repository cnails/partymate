import { Telegraf, Markup } from 'telegraf';
import { prisma } from '../services/prisma.js';

// === Proxy chat (relay) state in-memory (MVP) ===
const rooms = new Map<
  number,
  { clientTgId: string; performerTgId: string; joined: Set<string>; active: boolean }
>();

const getRoom = (reqId: number) => rooms.get(reqId);

const ensureRoom = (reqId: number, clientTgId: string, performerTgId: string) => {
  let r = rooms.get(reqId);
  if (!r) {
    r = { clientTgId, performerTgId, joined: new Set(), active: true };
    rooms.set(reqId, r);
  } else {
    r.clientTgId = clientTgId;
    r.performerTgId = performerTgId;
    r.active = true;
  }
  return r;
};

export const registerRequestFlows = (bot: Telegraf) => {
  bot.on('callback_query', async (ctx, next) => {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return next();

    if (data.startsWith('req_accept:')) {
      const id = Number(data.split(':')[1]);
      const req = await prisma.request.update({
        where: { id },
        data: { status: 'ACCEPTED' },
        include: {
          client: true,
          performer: { include: { performerProfile: true } },
          paymentMeta: true,
        },
      });
      await ctx.editMessageText(`‚úÖ –ó–∞—è–≤–∫–∞ #${id} –ø—Ä–∏–Ω—è—Ç–∞.`);
    
      // –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É –ø—Ä–æ–∫—Å–∏-—á–∞—Ç–∞ (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)
      ensureRoom(id, String(req.client.tgId), String(req.performer.tgId));
    
      // –ï—Å–ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—ã –µ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏–º –∫–ª–∏–µ–Ω—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
      const defaultPay = req.performer.performerProfile?.defaultPayInstructions?.trim();
      if (defaultPay) {
        if (!req.paymentMeta) {
          await prisma.paymentMeta.create({ data: { requestId: req.id, proofUrls: [], instructions: defaultPay } });
        } else if (!req.paymentMeta.instructions) {
          await prisma.paymentMeta.update({ where: { requestId: req.id }, data: { instructions: defaultPay } });
        }
    
        await ctx.telegram.sendMessage(
          Number(req.client.tgId),
          [
            `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${req.id} –ø—Ä–∏–Ω—è—Ç–∞.`,
            '',
            `üí¨ [–ß–∞—Ç –∑–∞—è–≤–∫–∏ #${req.id}] –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–∫—Å–∏-—á–∞—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞.`,
            `üí≥ [–û–ø–ª–∞—Ç–∞ –∑–∞—è–≤–∫–∏ #${req.id}] –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n${defaultPay}`,
          ].join('\n'),
          Markup.inlineKeyboard([
            [Markup.button.callback('üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞', `join_room:${req.id}`)],
            [Markup.button.callback('‚úÖ –û–ø–ª–∞—Ç–∏–ª', `client_mark_paid:${req.id}`)],
          ]),
        );
    
        // –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–µ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ /payinfo
        await ctx.reply(
          `üí¨ [–ß–∞—Ç –∑–∞—è–≤–∫–∏ #${id}] –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å: /payinfo`,
          Markup.inlineKeyboard([[Markup.button.callback('üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞', `join_room:${id}`)]]),
        );
    
        // –ù–µ –∂–¥—ë–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        (ctx.session as any).awaitingPayInfoFor = undefined;
      } else {
        // –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–µ—Ç ‚Äî —Å—Ç–∞—Ä—ã–π —Ñ–ª–æ—É: –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        await ctx.telegram.sendMessage(
          Number(req.client.tgId),
          [
            `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${req.id} –ø—Ä–∏–Ω—è—Ç–∞.`,
            '',
            `üí¨ [–ß–∞—Ç –∑–∞—è–≤–∫–∏ #${req.id}] –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–∫—Å–∏-—á–∞—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞.`,
            `üí≥ [–û–ø–ª–∞—Ç–∞ –∑–∞—è–≤–∫–∏ #${req.id}] –†–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.`,
          ].join('\n'),
          Markup.inlineKeyboard([
            [Markup.button.callback('üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞', `join_room:${req.id}`)],
            [Markup.button.callback('‚úÖ –û–ø–ª–∞—Ç–∏–ª', `client_mark_paid:${req.id}`)],
          ]),
        );
    
        await ctx.reply(
          `üí¨ [–ß–∞—Ç –∑–∞—è–≤–∫–∏ #${id}] –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n(–°–æ–≤–µ—Ç: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ /payinfo, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)`,
          Markup.inlineKeyboard([[Markup.button.callback('üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞', `join_room:${id}`)]]),
        );
        (ctx.session as any).awaitingPayInfoFor = id;
      }
    
      return;
    }
    

    if (data.startsWith('req_reject:')) {
      const id = Number(data.split(':')[1]);
      const req = await prisma.request.update({ where: { id }, data: { status: 'REJECTED' }, include: { client: true } });
      await ctx.editMessageText(`‚ùé –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
      await ctx.telegram.sendMessage(Number(req.client.tgId), `–ó–∞—è–≤–∫–∞ #${id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.`);
      rooms.delete(id);
      return;
    }

    if (data.startsWith('join_room:')) {
      const reqId = Number(data.split(':')[1]);
      const req = await prisma.request.findUnique({ where: { id: reqId }, include: { client: true, performer: true } });
      if (!req) {
        await ctx.answerCbQuery?.('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      const r = ensureRoom(reqId, String(req.client.tgId), String(req.performer.tgId));
      if (!r.active) {
        await ctx.answerCbQuery?.('–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç');
        return;
      }
      const me = String(ctx.from!.id);
      if (me !== r.clientTgId && me !== r.performerTgId) {
        await ctx.answerCbQuery?.('–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏');
        return;
      }
      r.joined.add(me);
      (ctx.session as any).proxyRoomFor = reqId;
      await ctx.answerCbQuery?.('–ß–∞—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω');
      await ctx.editMessageReplyMarkup({ inline_keyboard: [[
        { text: 'üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data: `leave_room:${reqId}` },
      ], [
        { text: '‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data: `report_req:${reqId}` },
      ]] });
      await ctx.reply(`üí¨ [–ß–∞—Ç –∑–∞—è–≤–∫–∏ #${reqId}] –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.`);

      const bothIn = r.joined.has(r.clientTgId) && r.joined.has(r.performerTgId);
      if (bothIn) {
        await ctx.telegram.sendMessage(Number(r.clientTgId), '–û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ —á–∞—Ç–µ. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.');
        await ctx.telegram.sendMessage(Number(r.performerTgId), '–û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ —á–∞—Ç–µ. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.');
      }
      return;
    }

    if (data.startsWith('leave_room:')) {
      const reqId = Number(data.split(':')[1]);
      const r = getRoom(reqId);
      if (r) {
        r.joined.delete(String(ctx.from!.id));
      }
      (ctx.session as any).proxyRoomFor = undefined;
      await ctx.answerCbQuery?.('–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞');
      await ctx.editMessageReplyMarkup(undefined);
      return;
    }

    if (data.startsWith('show_payment:')) {
      const id = Number(data.split(':')[1]);
      const meta = await prisma.paymentMeta.findUnique({ where: { requestId: id } });
      const body = meta?.instructions
        ? `üí≥ [–û–ø–ª–∞—Ç–∞ –∑–∞—è–≤–∫–∏ #${id}]\n${meta.instructions}`
        : `üí≥ [–û–ø–ª–∞—Ç–∞ –∑–∞—è–≤–∫–∏ #${id}]\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –µ—â—ë –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–µ–π.`;
      await ctx.reply(body);
      return;
    }

    if (data.startsWith('client_mark_paid:')) {
      const id = Number(data.split(':')[1]);
      await prisma.paymentMeta.update({ where: { requestId: id }, data: { clientMarkPaid: true } });
      await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
      (ctx.session as any).awaitingProofFor = id;
      return;
    }

    if (data.startsWith('perf_got_money:')) {
      const id = Number(data.split(':')[1]);
      const req = await prisma.request.update({ where: { id }, data: { status: 'COMPLETED' }, include: { client: true } });
      await prisma.paymentMeta.update({ where: { requestId: id }, data: { performerReceived: true } });
      await ctx.editMessageText(`‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ó–∞—è–≤–∫–∞ #${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
      await ctx.telegram.sendMessage(Number(req.client.tgId), '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ. –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!');
      const r = getRoom(id);
      if (r) {
        r.active = false;
        rooms.delete(id);
        await ctx.telegram.sendMessage(Number(r.clientTgId), '–ß–∞—Ç –∑–∞—è–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç.');
        await ctx.telegram.sendMessage(Number(r.performerTgId), '–ß–∞—Ç –∑–∞—è–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç.');
      }
      return;
    }

    return next();
  });

  bot.on('text', async (ctx, next) => {
    const awaiting = (ctx.session as any).awaitingPayInfoFor as number | undefined;
    if (!awaiting) return next();
    const req = await prisma.request.findUnique({ where: { id: awaiting }, include: { client: true } });
    if (!req) return next();
    await prisma.paymentMeta.update({ where: { requestId: awaiting }, data: { instructions: ctx.message!.text } });
    await ctx.telegram.sendMessage(Number(req.client.tgId), `üí≥ [–û–ø–ª–∞—Ç–∞ –∑–∞—è–≤–∫–∏ #${awaiting}]\n${ctx.message!.text}`);
    await ctx.reply('–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É.');
    (ctx.session as any).awaitingPayInfoFor = undefined;
  });

  bot.on(['photo', 'document'], async (ctx, next) => {
    const awaiting = (ctx.session as any).awaitingProofFor as number | undefined;
    if (!awaiting) return next();
    const fileIds: string[] = [];
    if ('photo' in ctx.message! && (ctx.message as any).photo?.length) {
      fileIds.push((ctx.message as any).photo[(ctx.message as any).photo.length - 1].file_id);
    }
    if ('document' in ctx.message! && (ctx.message as any).document) {
      fileIds.push((ctx.message as any).document.file_id);
    }
    await prisma.paymentMeta.update({
      where: { requestId: awaiting },
      data: { proofUrls: { push: fileIds } },
    });
    const req = await prisma.request.findUnique({ where: { id: awaiting }, include: { performer: true } });
    if (req) {
      await ctx.telegram.sendMessage(
        Number(req.performer.tgId),
        `–ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ #${awaiting}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ.`,
        Markup.inlineKeyboard([[Markup.button.callback('–ü–æ–ª—É—á–µ–Ω–æ', `perf_got_money:${awaiting}`)]]),
      );
    }
    await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—ã.');
    (ctx.session as any).awaitingProofFor = undefined;
  });

  const relayableUpdates = ['text', 'photo', 'voice', 'audio', 'video', 'document', 'sticker'];
  bot.on(relayableUpdates as any, async (ctx, next) => {
    if ((ctx.session as any).awaitingPayInfoFor || (ctx.session as any).awaitingProofFor) return next();

    const roomId = (ctx.session as any).proxyRoomFor as number | undefined;
    if (!roomId) return next();
    const r = getRoom(roomId);
    if (!r || !r.active) return next();

    const me = String(ctx.from!.id);
    if (!r.joined.has(me)) return next();

    const peer = me === r.clientTgId ? r.performerTgId : r.clientTgId;

    try {
      // @ts-expect-error telegraf types
      await ctx.telegram.copyMessage(Number(peer), ctx.chat!.id, (ctx.message as any).message_id);
    } catch {}
  });
};
