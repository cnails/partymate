import { Scenes, Markup, Composer } from 'telegraf';
import { prisma } from '../../services/prisma.js';
import { gamesList } from '../keyboards.js';
import { runProfileAutoChecks } from '../autoChecks.js';
import { yesNoEmoji } from '../utils/format.js';
import { config } from '../../config.js';
import { logger } from '../../logger.js';

interface PerfWizardState extends Scenes.WizardSessionData {
  games: string[];
  price?: number;
  about?: string;
  stage?: 'select_games';
  photoUrl?: string;
  voiceSampleUrl?: string;
  payInstructions?: string;
  editReturn?: boolean;
}

const MAX_IMAGE_MB = 4;
const MAX_VOICE_MB = 2;
const MAX_VOICE_SEC = 30;

const gamesKeyboard = (selected: string[]) => {
  const rows = gamesList.map((g) => {
    const marked = selected.includes(g) ? '‚úÖ ' + g : '‚óªÔ∏è ' + g;
    return [Markup.button.callback(marked, `po_game:${g}`)];
    
  });
  rows.push([Markup.button.callback('–ì–æ—Ç–æ–≤–æ', 'po_done')]);
  rows.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'wiz_cancel')]);
  return Markup.inlineKeyboard(rows);
};

const showSummary = async (ctx: Scenes.WizardContext) => {
  const st = ctx.wizard.state as PerfWizardState;
  await ctx.reply(
    [
      '–ü—Ä–æ–≤–µ—Ä–∏–º –∞–Ω–∫–µ—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:',
      `–£—Å–ª—É–≥–∏: ${st.games?.join(', ') || '‚Äî'}`,
      `–¶–µ–Ω–∞: ${st.price ? `${st.price}‚ÇΩ/—á–∞—Å` : '‚Äî'}`,
      `–û —Å–µ–±–µ: ${st.about ?? '‚Äî'}`,
      `–§–æ—Ç–æ: ${yesNoEmoji(!!st.photoUrl)}${st.photoUrl ? ' (–Ω–µ –≤–∏–¥–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ STANDARD)' : ''}`,
      `–ì–æ–ª–æ—Å: ${yesNoEmoji(!!st.voiceSampleUrl)}${st.voiceSampleUrl ? ' (–Ω–µ —Å–ª—ã—à–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ PRO)' : ''}`,
      `–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${st.payInstructions ?? '‚Äî'}`,
      '',
      '–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?',
    ].join('\n'),
    Markup.inlineKeyboard([
      [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'po_submit')],
      [Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'po_edit')],
    ]),
  );
};

export const performerOnboarding = new Scenes.WizardScene<Scenes.WizardContext & { session: any }>(
  'performerOnboarding',
  async (ctx) => {
    logger.info(
      { botId: ctx.botInfo?.id, userId: ctx.from?.id, scene: 'performerOnboarding' },
      'scene entered',
    );
    await ctx.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º —É–∂–µ –µ—Å—Ç—å 18. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–î–∞¬ª, –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º ‚ú®');
    return ctx.wizard.next();
  },
  async (ctx) => {
    const st = ctx.wizard.state as PerfWizardState;
    if (st.stage !== 'select_games') {
      const text = ctx.message && 'text' in ctx.message ? ctx.message.text.trim().toLowerCase() : '';
      if (text !== '–¥–∞') {
        await ctx.reply('–î–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–º. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ :)');
        return;
      }
      st.games = st.games || [];
      st.stage = 'select_games';
      await ctx.reply('–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É - –ø–æ—Å–ª–µ –µ—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±—É—Å—Ç –∞–Ω–∫–µ—Ç—ã –Ω–∞ 3 –¥–Ω—è üöÄ\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∞–Ω–∫–µ—Ç–µ, –∫—Ä–æ–º–µ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (/search)\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏: –∏–≥—Ä—ã –∏–ª–∏ –æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) üëá', gamesKeyboard(st.games));
      return;
    }

    const data = (ctx.update as any)?.callback_query?.data as string | undefined;
    if (!data) return;
    if (data === 'po_done') {
      await ctx.answerCbQuery?.('–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ‚úÖ');
      st.stage = undefined;
      if (st.editReturn) {
        st.editReturn = false;
        await showSummary(ctx);
        ctx.wizard.selectStep(7);
      } else {
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ ‚ÇΩ –∑–∞ —á–∞—Å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 400');
        return ctx.wizard.next();
      }
      return;
    }
    if (data.startsWith('po_game:')) {
      const g = data.split(':')[1];
      st.games = st.games || [];
      if (st.games.includes(g)) st.games = st.games.filter((x) => x !== g);
      else st.games.push(g);
      await ctx.answerCbQuery?.(st.games.includes(g) ? `–í—ã–±—Ä–∞–Ω–æ: ${g}` : `–°–Ω—è—Ç–æ: ${g}`);
      await ctx.editMessageReplyMarkup(gamesKeyboard(st.games).reply_markup);
      return;
    }
  },
  async (ctx) => {
    const st = ctx.wizard.state as PerfWizardState;
    const price = Number(
      ctx.message && 'text' in ctx.message ? (ctx.message.text || '').replace(/[^0-9]/g, '') : '0',
    );
    if (!price || price <= 0) {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500');
      return;
    }
    st.price = price;
    if (st.editReturn) {
      st.editReturn = false;
      await showSummary(ctx);
      ctx.wizard.selectStep(7);
    } else {
      await ctx.reply('–ü–∞—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –≤–∞—Å: —Å—Ç–∏–ª—å, –æ–ø—ã—Ç, —Ñ–æ—Ä–º–∞—Ç —Å–µ—Å—Å–∏–π.');
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    const st = ctx.wizard.state as PerfWizardState;
    const about = ctx.message && 'text' in ctx.message ? ctx.message.text : undefined;
    st.about = about;
    if (st.editReturn) {
      st.editReturn = false;
      await showSummary(ctx);
      ctx.wizard.selectStep(7);
    } else {
      await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã. –û–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å—Å—è üåü\n–í–∞–∂–Ω–æ: –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã–º, –±–µ–∑ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π ‚Äî –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é');
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    const st = ctx.wizard.state as PerfWizardState;
    let fileId: string | undefined;
    if ('photo' in ctx.message! && (ctx.message as any).photo?.length) {
      const ph = (ctx.message as any).photo[(ctx.message as any).photo.length - 1];
      fileId = ph.file_id;
    } else if ('document' in ctx.message! && (ctx.message as any).document) {
      const doc = (ctx.message as any).document;
      const name = String(doc.file_name || '').toLowerCase();
      if (name.endsWith('.jpg') || name.endsWith('.jpeg') || name.endsWith('.png') || name.endsWith('.webp')) {
        fileId = doc.file_id;
      } else {
        await ctx.reply('–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª jpg/png/webp.');
        return;
      }
    }

    if (!fileId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      return;
    }

    try {
      const f = await ctx.telegram.getFile(fileId);
      const size = (f as any).file_size as number | undefined;
      if (size && size > MAX_IMAGE_MB * 1024 * 1024) {
        await ctx.reply(`–†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${MAX_IMAGE_MB} –ú–ë. –°–æ–∂–º–∏—Ç–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ`);
        return;
      }
    } catch {}

    st.photoUrl = `tg:${fileId}`;
    await ctx.reply('–°—É–ø–µ—Ä, —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    if (st.editReturn) {
      st.editReturn = false;
      await showSummary(ctx);
      ctx.wizard.selectStep(7);
    } else {
      await ctx.reply('–ó–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –¥–æ 30 —Å–µ–∫ - –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, –ª–∏–±–æ –æ —Ç–æ–º –≤–æ —á—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, –∏–ª–∏ –±—ã—Ç—å –º–æ–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–º–µ—Å—Ç–µ —Ñ–∏–ª—å–º/–∞–Ω–∏–º–µ?');
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    const st = ctx.wizard.state as PerfWizardState;
    if (!ctx.from) return;
    let fileId: string | undefined;
    let duration = 0;
    if ('voice' in ctx.message!) {
      const v = (ctx.message as any).voice;
      fileId = v.file_id;
      duration = Number(v.duration || 0);
    } else if ('audio' in ctx.message!) {
      const a = (ctx.message as any).audio;
      fileId = a.file_id;
      duration = Number(a.duration || 0);
    }

    if (!fileId) {
      await ctx.reply('–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∞—É–¥–∏–æ. –û—Ç–ø—Ä–∞–≤–∏—Ç–µ –µ—â–µ —Ä–∞–∑?');
      return;
    }

    if (duration > MAX_VOICE_SEC) {
      await ctx.reply(`–ß—É—Ç—å –∫–æ—Ä–æ—á–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚Äî –Ω–µ –±–æ–ª–µ–µ ${MAX_VOICE_SEC} —Å–µ–∫`);
      return;
    }

    try {
      const f = await ctx.telegram.getFile(fileId);
      const size = (f as any).file_size as number | undefined;
      if (size && size > MAX_VOICE_MB * 1024 * 1024) {
        await ctx.reply(`–ê—É–¥–∏–æ –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ ${MAX_VOICE_MB} –ú–ë. –°–æ–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ`);
        return;
      }
    } catch {}

    st.voiceSampleUrl = `tg:${fileId}`;

    await ctx.reply('–ì–æ—Ç–æ–≤–æ, –≥–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ ‚úîÔ∏è');
    if (st.editReturn) {
      st.editReturn = false;
      await showSummary(ctx);
      ctx.wizard.selectStep(7);
    } else {
      await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –±–∞–Ω–∫/—Å–µ—Ä–≤–∏—Å/–Ω–∏–∫ - —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    const st = ctx.wizard.state as PerfWizardState;
    if (!ctx.from) return;
    const text = ctx.message && 'text' in ctx.message ? ctx.message.text.trim() : '';
    if (!text) {
      await ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∏–Ω–∞—á–µ –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
      return;
    }
    st.payInstructions = text;
    await showSummary(ctx);
    return ctx.wizard.next();
  },
  new Composer<Scenes.WizardContext>()
    .action('po_submit', async (ctx) => {
      await ctx.answerCbQuery();
      const st = ctx.wizard.state as PerfWizardState;
      if (!ctx.from) return;
      const { games, price, about, photoUrl, voiceSampleUrl, payInstructions } = st;

      const user = await prisma.user.upsert({
        where: { tgId: String(ctx.from.id) },
        update: { role: 'PERFORMER', ageConfirmed: true, username: ctx.from.username ?? undefined },
        create: { tgId: String(ctx.from.id), role: 'PERFORMER', ageConfirmed: true, username: ctx.from.username ?? undefined },
      });

      const perf = await prisma.performerProfile.upsert({
        where: { userId: user.id },
        update: {
          games: games ?? [],
          pricePerHour: price!,
          about,
          photoUrl: photoUrl ?? '',
          voiceSampleUrl: voiceSampleUrl ?? '',
          defaultPayInstructions: payInstructions ?? '',
          status: 'MODERATION',
        },
        create: {
          userId: user.id,
          games: games ?? [],
          pricePerHour: price!,
          about,
          photoUrl: photoUrl ?? '',
          voiceSampleUrl: voiceSampleUrl ?? '',
          defaultPayInstructions: payInstructions ?? '',
          status: 'MODERATION',
        },
      });

      await runProfileAutoChecks(perf.id);

      for (const admin of config.adminIds) {
        try {
          await ctx.telegram.sendMessage(
            Number(admin),
            `#${perf.id} ¬∑ ${ctx.from.username ? '@' + ctx.from.username : user.id}`,
            Markup.inlineKeyboard([[Markup.button.callback('–û—Ç–∫—Ä—ã—Ç—å', `adm_prof_open:${perf.id}`)]]),
          );
        } catch {}
      }

      await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚Äî —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏–º üôå');
      return ctx.scene.leave();
    })
    .action('po_edit', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.reply(
        '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
        Markup.inlineKeyboard([
          [Markup.button.callback('–£—Å–ª—É–≥–∏/–∏–≥—Ä—ã', 'po_edit_games')],
          [Markup.button.callback('–¶–µ–Ω–∞', 'po_edit_price')],
          [Markup.button.callback('–û —Å–µ–±–µ', 'po_edit_about')],
          [Markup.button.callback('–§–æ—Ç–æ', 'po_edit_photo')],
          [Markup.button.callback('–ì–æ–ª–æ—Å', 'po_edit_voice')],
          [Markup.button.callback('–†–µ–∫–≤–∏–∑–∏—Ç—ã', 'po_edit_pay')],
        ]),
      );
    })
    .action('po_edit_games', async (ctx) => {
      const st = ctx.wizard.state as PerfWizardState;
      await ctx.answerCbQuery();
      st.stage = 'select_games';
      st.editReturn = true;
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏: –∏–≥—Ä—ã –∏–ª–∏ –æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) üëá', gamesKeyboard(st.games || []));
      ctx.wizard.selectStep(1);
    })
    .action('po_edit_price', async (ctx) => {
      await ctx.answerCbQuery();
      (ctx.wizard.state as PerfWizardState).editReturn = true;
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ ‚ÇΩ –∑–∞ —á–∞—Å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 400');
      ctx.wizard.selectStep(2);
    })
    .action('po_edit_about', async (ctx) => {
      await ctx.answerCbQuery();
      (ctx.wizard.state as PerfWizardState).editReturn = true;
      await ctx.reply('–ö–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).');
      ctx.wizard.selectStep(3);
    })
    .action('po_edit_photo', async (ctx) => {
      await ctx.answerCbQuery();
      if (!ctx.from) return;
      const u = await prisma.user.findUnique({
        where: { tgId: String(ctx.from.id) },
        include: { performerProfile: true },
      });
      const p = u?.performerProfile;
      const planActive =
        p && p.planUntil && new Date(p.planUntil).getTime() > Date.now();
      if (!planActive || (p?.plan !== 'STANDARD' && p?.plan !== 'PRO')) {
        await ctx.reply(
          '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ STANDARD –∏–ª–∏ PRO. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /billing.',
        );
        return;
      }
      (ctx.wizard.state as PerfWizardState).editReturn = true;
      await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.');
      ctx.wizard.selectStep(4);
    })
    .action('po_edit_voice', async (ctx) => {
      await ctx.answerCbQuery();
      if (!ctx.from) return;
      const u = await prisma.user.findUnique({
        where: { tgId: String(ctx.from.id) },
        include: { performerProfile: true },
      });
      const p = u?.performerProfile;
      const planActive =
        p && p.planUntil && new Date(p.planUntil).getTime() > Date.now();
      if (!planActive || p?.plan !== 'PRO') {
        await ctx.reply(
          '–î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –ø—Ä–æ–±—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ PRO. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /billing.',
        );
        return;
      }
      (ctx.wizard.state as PerfWizardState).editReturn = true;
      await ctx.reply('–ó–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –¥–æ 30 —Å–µ–∫ - –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, –ª–∏–±–æ –æ —Ç–æ–º –≤–æ —á—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, –∏–ª–∏ –±—ã—Ç—å –º–æ–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–º–µ—Å—Ç–µ —Ñ–∏–ª—å–º/–∞–Ω–∏–º–µ?');
      ctx.wizard.selectStep(5);
    })
    .action('po_edit_pay', async (ctx) => {
      await ctx.answerCbQuery();
      (ctx.wizard.state as PerfWizardState).editReturn = true;
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.');
      ctx.wizard.selectStep(6);
    }),
);
