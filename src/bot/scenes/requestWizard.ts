import { Scenes, Markup } from 'telegraf';
import { prisma } from '../../services/prisma.js';

interface ReqState extends Scenes.WizardSessionData {
  performerUserId?: number;
  durationMin?: number;
  preferredAt?: Date | null;
  game?: string;
}

function z(n: number) { return String(n).padStart(2, '0'); }
function todayAt(h: number, m: number) {
  const d = new Date();
  d.setHours(h, m, 0, 0);
  return d;
}
function tomorrowAt(h: number, m: number) {
  const d = new Date();
  d.setDate(d.getDate() + 1);
  d.setHours(h, m, 0, 0);
  return d;
}
function plusHoursRounded(h: number) {
  const d = new Date(Date.now() + h * 3600 * 1000);
  // –æ–∫—Ä—É–≥–ª–∏–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 15 –º–∏–Ω—É—Ç –≤–≤–µ—Ä—Ö
  const mm = d.getMinutes();
  const add = (15 - (mm % 15)) % 15;
  d.setMinutes(mm + add, 0, 0);
  return d;
}
function parseNaturalDate(input: string): Date | null {
  const t = input.trim().toLowerCase();

  // skip
  if (t === 'skip' || t === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') return null;

  // —Å–µ–≥–æ–¥–Ω—è HH:MM
  let m = t.match(/^—Å–µ–≥–æ–¥–Ω—è\s+(\d{1,2}):(\d{2})$/i);
  if (m) return todayAt(Number(m[1]), Number(m[2]));

  // –∑–∞–≤—Ç—Ä–∞ HH:MM
  m = t.match(/^–∑–∞–≤—Ç—Ä–∞\s+(\d{1,2}):(\d{2})$/i);
  if (m) return tomorrowAt(Number(m[1]), Number(m[2]));

  // DD.MM HH:MM   –∏–ª–∏   DD.MM.YYYY HH:MM
  m = t.match(/^(\d{1,2})\.(\d{1,2})(?:\.(\d{4}))?\s+(\d{1,2}):(\d{2})$/);
  if (m) {
    const day = Number(m[1]), mon = Number(m[2]) - 1, year = m[3] ? Number(m[3]) : new Date().getFullYear();
    const d = new Date(year, mon, day, Number(m[4]), Number(m[5]), 0, 0);
    return isNaN(d.getTime()) ? null : d;
  }

  // YYYY-MM-DD HH:MM
  m = t.match(/^(\d{4})-(\d{2})-(\d{2})\s+(\d{2}):(\d{2})$/);
  if (m) {
    const d = new Date(Number(m[1]), Number(m[2]) - 1, Number(m[3]), Number(m[4]), Number(m[5]), 0, 0);
    return isNaN(d.getTime()) ? null : d;
  }

  // HH:MM (—Å–µ–≥–æ–¥–Ω—è; –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –∑–∞–≤—Ç—Ä–∞)
  m = t.match(/^(\d{1,2}):(\d{2})$/);
  if (m) {
    const d = todayAt(Number(m[1]), Number(m[2]));
    if (d.getTime() < Date.now()) return tomorrowAt(Number(m[1]), Number(m[2]));
    return d;
  }

  // Fallback ‚Äî Date.parse –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è
  const d = new Date(t);
  return isNaN(d.getTime()) ? null : d;
}

function dateKb() {
  const d1 = plusHoursRounded(2);
  const t1 = `–°–µ–≥–æ–¥–Ω—è +2—á (${z(d1.getHours())}:${z(d1.getMinutes())})`;
  return Markup.inlineKeyboard([
    [Markup.button.callback(t1, `req_time:plus2`)],
    [Markup.button.callback('–°–µ–≥–æ–¥–Ω—è 20:00', 'req_time:today:20:00')],
    [Markup.button.callback('–°–µ–≥–æ–¥–Ω—è 21:00', 'req_time:today:21:00')],
    [Markup.button.callback('–ó–∞–≤—Ç—Ä–∞ 20:00', 'req_time:tomorrow:20:00')],
    [Markup.button.callback('üìù –£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'req_time:manual')],
    [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'req_time:skip')],
    [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'wiz_cancel')],
  ]);
}

export const requestWizard = new Scenes.WizardScene<Scenes.WizardContext & { session: any }>(
  'requestWizard',
  async (ctx) => {
    const init = ctx.scene.state as { performerUserId?: number };
    (ctx.wizard.state as ReqState).performerUserId = init.performerUserId;

    const perf = await prisma.user.findUnique({ where: { id: init.performerUserId }, include: { performerProfile: true } });
    const games = perf?.performerProfile?.games || [];
    const rows = games.map((g) => [Markup.button.callback(g, `req_choose_game:${g}`)]);
    rows.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'wiz_cancel')]);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∑–∞—è–≤–∫–∏:', Markup.inlineKeyboard(rows));
    return ctx.wizard.next();
  },
  async (ctx) => {
    const data = (ctx.update as any)?.callback_query?.data as string | undefined;
    if (!data || !data.startsWith('req_choose_game:')) return;
    (ctx.wizard.state as ReqState).game = data.split(':')[1];
    await ctx.editMessageText(`–ò–≥—Ä–∞: ${(ctx.wizard.state as ReqState).game}`);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard([
      [Markup.button.callback('60 –º–∏–Ω', 'req_dur:60')],
      [Markup.button.callback('90 –º–∏–Ω', 'req_dur:90')],
      [Markup.button.callback('120 –º–∏–Ω', 'req_dur:120')],
      [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'wiz_cancel')],
    ]));
    return ctx.wizard.next();
  },
  async (ctx) => {
    // —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const data = (ctx.update as any)?.callback_query?.data as string | undefined;
    if (!data || !data.startsWith('req_dur:')) return;
    (ctx.wizard.state as ReqState).durationMin = Number(data.split(':')[1]);
    await ctx.editMessageText(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${(ctx.wizard.state as ReqState).durationMin} –º–∏–Ω`);
    await ctx.reply(
      '–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Å–µ–≥–æ–¥–Ω—è 20:00¬ª, ¬´12.09 18:00¬ª, ¬´20:30¬ª):',
      dateKb(),
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    // —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –∫–æ–ª–±–µ–∫–∏, –∏ —Ç–µ–∫—Å—Ç
    let picked: Date | null | undefined;

    const data = (ctx.update as any)?.callback_query?.data as string | undefined;
    if (data && data.startsWith('req_time:')) {
      const parts = data.split(':');
      if (parts[1] === 'plus2') picked = plusHoursRounded(2);
      else if (parts[1] === 'today') {
        const [h, m] = (parts[2] || '20:00').split('-')[0].split('.');
        // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π fallback:
        const hhmm = parts.slice(2).join(':') || '20:00';
        const [hh, mm] = hhmm.split(':').map(Number);
        picked = todayAt(hh || 20, mm || 0);
      } else if (parts[1] === 'tomorrow') {
        const hhmm = parts.slice(2).join(':') || '20:00';
        const [hh, mm] = hhmm.split(':').map(Number);
        picked = tomorrowAt(hh || 20, mm || 0);
      } else if (parts[1] === 'manual') {
        await ctx.answerCbQuery?.();
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç–µ–∫—Å—Ç–æ–º: ¬´—Å–µ–≥–æ–¥–Ω—è 20:00¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ 19:30¬ª, ¬´12.09 18:00¬ª, ¬´20:30¬ª –∏–ª–∏ ¬´skip¬ª.');
        return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ, –∂–¥—ë–º —Ç–µ–∫—Å—Ç
      } else if (parts[1] === 'skip') {
        picked = null;
      }
    } else if (ctx.message && 'text' in ctx.message) {
      picked = parseNaturalDate(ctx.message.text);
      if (picked === null) {
        // skip
      } else if (!picked) {
        await ctx.reply('–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: ¬´—Å–µ–≥–æ–¥–Ω—è 20:00¬ª, ¬´12.09 18:00¬ª, ¬´20:30¬ª, –ª–∏–±–æ ¬´skip¬ª.');
        return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —à–∞–≥–µ
      }
    } else {
      return; // –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
    }

    (ctx.wizard.state as ReqState).preferredAt = picked ?? null;

    if (!ctx.from) return;
    const { performerUserId, durationMin, game } = (ctx.wizard.state as ReqState);

    const client = await prisma.user.upsert({
      where: { tgId: String(ctx.from.id) },
      update: { role: 'CLIENT', username: ctx.from.username ?? undefined },
      create: { tgId: String(ctx.from.id), role: 'CLIENT', username: ctx.from.username ?? undefined },
    });

    const req = await prisma.request.create({
      data: {
        clientId: client.id,
        performerId: performerUserId!,
        game: game || 'Unknown',
        durationMin: durationMin || 60,
        preferredAt: picked ?? undefined,
      },
    });

    await prisma.paymentMeta.create({ data: { requestId: req.id, proofUrls: [] } });

    await ctx.reply(`–ó–∞—è–≤–∫–∞ #${req.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—ã.`);

    const perf = await prisma.user.findUnique({ where: { id: performerUserId! } });
    if (perf) {
      const when = picked ? `–í—Ä–µ–º—è: ${picked.getFullYear()}-${z(picked.getMonth()+1)}-${z(picked.getDate())} ${z(picked.getHours())}:${z(picked.getMinutes())}` : undefined;
      await (ctx.telegram as any).sendMessage(
        Number(perf.tgId),
        [
          `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${req.id}`,
          `–ò–≥—Ä–∞: ${game}`,
          `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationMin} –º–∏–Ω`,
          when,
        ].filter(Boolean).join('\n'),
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `req_accept:${req.id}`)],
          [Markup.button.callback('‚ùé –û—Ç–∫–∞–∑–∞—Ç—å', `req_reject:${req.id}`)],
        ]),
      );
    }

    return ctx.scene.leave();
  },
);
