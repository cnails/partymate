
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model PerformerProfile
 * 
 */
export type PerformerProfile = $Result.DefaultSelection<Prisma.$PerformerProfilePayload>
/**
 * Model KycCheck
 * 
 */
export type KycCheck = $Result.DefaultSelection<Prisma.$KycCheckPayload>
/**
 * Model Request
 * 
 */
export type Request = $Result.DefaultSelection<Prisma.$RequestPayload>
/**
 * Model PaymentMeta
 * 
 */
export type PaymentMeta = $Result.DefaultSelection<Prisma.$PaymentMetaPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model BillingOrder
 * 
 */
export type BillingOrder = $Result.DefaultSelection<Prisma.$BillingOrderPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  CLIENT: 'CLIENT',
  PERFORMER: 'PERFORMER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ListingStatus: {
  DRAFT: 'DRAFT',
  MODERATION: 'MODERATION',
  ACTIVE: 'ACTIVE',
  BANNED: 'BANNED'
};

export type ListingStatus = (typeof ListingStatus)[keyof typeof ListingStatus]


export const Plan: {
  BASIC: 'BASIC',
  STANDARD: 'STANDARD',
  PRO: 'PRO'
};

export type Plan = (typeof Plan)[keyof typeof Plan]


export const RequestStatus: {
  NEW: 'NEW',
  NEGOTIATION: 'NEGOTIATION',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]


export const PaymentMethod: {
  P2P: 'P2P'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const BillingType: {
  PLAN: 'PLAN',
  BOOST: 'BOOST'
};

export type BillingType = (typeof BillingType)[keyof typeof BillingType]


export const BillingStatus: {
  PENDING: 'PENDING',
  ACTIVATED: 'ACTIVATED',
  REJECTED: 'REJECTED',
  CANCELED: 'CANCELED'
};

export type BillingStatus = (typeof BillingStatus)[keyof typeof BillingStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ListingStatus = $Enums.ListingStatus

export const ListingStatus: typeof $Enums.ListingStatus

export type Plan = $Enums.Plan

export const Plan: typeof $Enums.Plan

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type BillingType = $Enums.BillingType

export const BillingType: typeof $Enums.BillingType

export type BillingStatus = $Enums.BillingStatus

export const BillingStatus: typeof $Enums.BillingStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.performerProfile`: Exposes CRUD operations for the **PerformerProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformerProfiles
    * const performerProfiles = await prisma.performerProfile.findMany()
    * ```
    */
  get performerProfile(): Prisma.PerformerProfileDelegate<ExtArgs>;

  /**
   * `prisma.kycCheck`: Exposes CRUD operations for the **KycCheck** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KycChecks
    * const kycChecks = await prisma.kycCheck.findMany()
    * ```
    */
  get kycCheck(): Prisma.KycCheckDelegate<ExtArgs>;

  /**
   * `prisma.request`: Exposes CRUD operations for the **Request** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Requests
    * const requests = await prisma.request.findMany()
    * ```
    */
  get request(): Prisma.RequestDelegate<ExtArgs>;

  /**
   * `prisma.paymentMeta`: Exposes CRUD operations for the **PaymentMeta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentMetas
    * const paymentMetas = await prisma.paymentMeta.findMany()
    * ```
    */
  get paymentMeta(): Prisma.PaymentMetaDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.billingOrder`: Exposes CRUD operations for the **BillingOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillingOrders
    * const billingOrders = await prisma.billingOrder.findMany()
    * ```
    */
  get billingOrder(): Prisma.BillingOrderDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    PerformerProfile: 'PerformerProfile',
    KycCheck: 'KycCheck',
    Request: 'Request',
    PaymentMeta: 'PaymentMeta',
    Review: 'Review',
    Report: 'Report',
    BillingOrder: 'BillingOrder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "performerProfile" | "kycCheck" | "request" | "paymentMeta" | "review" | "report" | "billingOrder"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      PerformerProfile: {
        payload: Prisma.$PerformerProfilePayload<ExtArgs>
        fields: Prisma.PerformerProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformerProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformerProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>
          }
          findFirst: {
            args: Prisma.PerformerProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformerProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>
          }
          findMany: {
            args: Prisma.PerformerProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>[]
          }
          create: {
            args: Prisma.PerformerProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>
          }
          createMany: {
            args: Prisma.PerformerProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformerProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>[]
          }
          delete: {
            args: Prisma.PerformerProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>
          }
          update: {
            args: Prisma.PerformerProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>
          }
          deleteMany: {
            args: Prisma.PerformerProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformerProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PerformerProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerProfilePayload>
          }
          aggregate: {
            args: Prisma.PerformerProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformerProfile>
          }
          groupBy: {
            args: Prisma.PerformerProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformerProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformerProfileCountArgs<ExtArgs>
            result: $Utils.Optional<PerformerProfileCountAggregateOutputType> | number
          }
        }
      }
      KycCheck: {
        payload: Prisma.$KycCheckPayload<ExtArgs>
        fields: Prisma.KycCheckFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KycCheckFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KycCheckFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>
          }
          findFirst: {
            args: Prisma.KycCheckFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KycCheckFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>
          }
          findMany: {
            args: Prisma.KycCheckFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>[]
          }
          create: {
            args: Prisma.KycCheckCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>
          }
          createMany: {
            args: Prisma.KycCheckCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KycCheckCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>[]
          }
          delete: {
            args: Prisma.KycCheckDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>
          }
          update: {
            args: Prisma.KycCheckUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>
          }
          deleteMany: {
            args: Prisma.KycCheckDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KycCheckUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KycCheckUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KycCheckPayload>
          }
          aggregate: {
            args: Prisma.KycCheckAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKycCheck>
          }
          groupBy: {
            args: Prisma.KycCheckGroupByArgs<ExtArgs>
            result: $Utils.Optional<KycCheckGroupByOutputType>[]
          }
          count: {
            args: Prisma.KycCheckCountArgs<ExtArgs>
            result: $Utils.Optional<KycCheckCountAggregateOutputType> | number
          }
        }
      }
      Request: {
        payload: Prisma.$RequestPayload<ExtArgs>
        fields: Prisma.RequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          findFirst: {
            args: Prisma.RequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          findMany: {
            args: Prisma.RequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>[]
          }
          create: {
            args: Prisma.RequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          createMany: {
            args: Prisma.RequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>[]
          }
          delete: {
            args: Prisma.RequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          update: {
            args: Prisma.RequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          deleteMany: {
            args: Prisma.RequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          aggregate: {
            args: Prisma.RequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequest>
          }
          groupBy: {
            args: Prisma.RequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestCountArgs<ExtArgs>
            result: $Utils.Optional<RequestCountAggregateOutputType> | number
          }
        }
      }
      PaymentMeta: {
        payload: Prisma.$PaymentMetaPayload<ExtArgs>
        fields: Prisma.PaymentMetaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentMetaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentMetaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>
          }
          findFirst: {
            args: Prisma.PaymentMetaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentMetaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>
          }
          findMany: {
            args: Prisma.PaymentMetaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>[]
          }
          create: {
            args: Prisma.PaymentMetaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>
          }
          createMany: {
            args: Prisma.PaymentMetaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentMetaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>[]
          }
          delete: {
            args: Prisma.PaymentMetaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>
          }
          update: {
            args: Prisma.PaymentMetaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>
          }
          deleteMany: {
            args: Prisma.PaymentMetaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentMetaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentMetaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMetaPayload>
          }
          aggregate: {
            args: Prisma.PaymentMetaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentMeta>
          }
          groupBy: {
            args: Prisma.PaymentMetaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentMetaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentMetaCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentMetaCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      BillingOrder: {
        payload: Prisma.$BillingOrderPayload<ExtArgs>
        fields: Prisma.BillingOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>
          }
          findFirst: {
            args: Prisma.BillingOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>
          }
          findMany: {
            args: Prisma.BillingOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>[]
          }
          create: {
            args: Prisma.BillingOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>
          }
          createMany: {
            args: Prisma.BillingOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>[]
          }
          delete: {
            args: Prisma.BillingOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>
          }
          update: {
            args: Prisma.BillingOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>
          }
          deleteMany: {
            args: Prisma.BillingOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillingOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingOrderPayload>
          }
          aggregate: {
            args: Prisma.BillingOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillingOrder>
          }
          groupBy: {
            args: Prisma.BillingOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingOrderCountArgs<ExtArgs>
            result: $Utils.Optional<BillingOrderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    clientRequests: number
    performerRequests: number
    reviewsAuthored: number
    reviewsReceived: number
    reportsAuthored: number
    reportsReceived: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientRequests?: boolean | UserCountOutputTypeCountClientRequestsArgs
    performerRequests?: boolean | UserCountOutputTypeCountPerformerRequestsArgs
    reviewsAuthored?: boolean | UserCountOutputTypeCountReviewsAuthoredArgs
    reviewsReceived?: boolean | UserCountOutputTypeCountReviewsReceivedArgs
    reportsAuthored?: boolean | UserCountOutputTypeCountReportsAuthoredArgs
    reportsReceived?: boolean | UserCountOutputTypeCountReportsReceivedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClientRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPerformerRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsAuthoredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsAuthoredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type PerformerProfileCountOutputType
   */

  export type PerformerProfileCountOutputType = {
    kycChecks: number
    BillingOrder: number
  }

  export type PerformerProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kycChecks?: boolean | PerformerProfileCountOutputTypeCountKycChecksArgs
    BillingOrder?: boolean | PerformerProfileCountOutputTypeCountBillingOrderArgs
  }

  // Custom InputTypes
  /**
   * PerformerProfileCountOutputType without action
   */
  export type PerformerProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfileCountOutputType
     */
    select?: PerformerProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PerformerProfileCountOutputType without action
   */
  export type PerformerProfileCountOutputTypeCountKycChecksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KycCheckWhereInput
  }

  /**
   * PerformerProfileCountOutputType without action
   */
  export type PerformerProfileCountOutputTypeCountBillingOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingOrderWhereInput
  }


  /**
   * Count Type RequestCountOutputType
   */

  export type RequestCountOutputType = {
    reviews: number
  }

  export type RequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | RequestCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * RequestCountOutputType without action
   */
  export type RequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestCountOutputType
     */
    select?: RequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RequestCountOutputType without action
   */
  export type RequestCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    tgId: string | null
    username: string | null
    role: $Enums.Role | null
    ageConfirmed: boolean | null
    lastSeenAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    tgId: string | null
    username: string | null
    role: $Enums.Role | null
    ageConfirmed: boolean | null
    lastSeenAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    tgId: number
    username: number
    role: number
    ageConfirmed: number
    searchPrefs: number
    lastSeenAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    tgId?: true
    username?: true
    role?: true
    ageConfirmed?: true
    lastSeenAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    tgId?: true
    username?: true
    role?: true
    ageConfirmed?: true
    lastSeenAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    tgId?: true
    username?: true
    role?: true
    ageConfirmed?: true
    searchPrefs?: true
    lastSeenAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    tgId: string
    username: string | null
    role: $Enums.Role
    ageConfirmed: boolean
    searchPrefs: JsonValue | null
    lastSeenAt: Date
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tgId?: boolean
    username?: boolean
    role?: boolean
    ageConfirmed?: boolean
    searchPrefs?: boolean
    lastSeenAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    performerProfile?: boolean | User$performerProfileArgs<ExtArgs>
    clientRequests?: boolean | User$clientRequestsArgs<ExtArgs>
    performerRequests?: boolean | User$performerRequestsArgs<ExtArgs>
    reviewsAuthored?: boolean | User$reviewsAuthoredArgs<ExtArgs>
    reviewsReceived?: boolean | User$reviewsReceivedArgs<ExtArgs>
    reportsAuthored?: boolean | User$reportsAuthoredArgs<ExtArgs>
    reportsReceived?: boolean | User$reportsReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tgId?: boolean
    username?: boolean
    role?: boolean
    ageConfirmed?: boolean
    searchPrefs?: boolean
    lastSeenAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    tgId?: boolean
    username?: boolean
    role?: boolean
    ageConfirmed?: boolean
    searchPrefs?: boolean
    lastSeenAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performerProfile?: boolean | User$performerProfileArgs<ExtArgs>
    clientRequests?: boolean | User$clientRequestsArgs<ExtArgs>
    performerRequests?: boolean | User$performerRequestsArgs<ExtArgs>
    reviewsAuthored?: boolean | User$reviewsAuthoredArgs<ExtArgs>
    reviewsReceived?: boolean | User$reviewsReceivedArgs<ExtArgs>
    reportsAuthored?: boolean | User$reportsAuthoredArgs<ExtArgs>
    reportsReceived?: boolean | User$reportsReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      performerProfile: Prisma.$PerformerProfilePayload<ExtArgs> | null
      clientRequests: Prisma.$RequestPayload<ExtArgs>[]
      performerRequests: Prisma.$RequestPayload<ExtArgs>[]
      reviewsAuthored: Prisma.$ReviewPayload<ExtArgs>[]
      reviewsReceived: Prisma.$ReviewPayload<ExtArgs>[]
      reportsAuthored: Prisma.$ReportPayload<ExtArgs>[]
      reportsReceived: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tgId: string
      username: string | null
      role: $Enums.Role
      ageConfirmed: boolean
      searchPrefs: Prisma.JsonValue | null
      lastSeenAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performerProfile<T extends User$performerProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$performerProfileArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    clientRequests<T extends User$clientRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$clientRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany"> | Null>
    performerRequests<T extends User$performerRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$performerRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany"> | Null>
    reviewsAuthored<T extends User$reviewsAuthoredArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsAuthoredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    reviewsReceived<T extends User$reviewsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    reportsAuthored<T extends User$reportsAuthoredArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsAuthoredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    reportsReceived<T extends User$reportsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly tgId: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly ageConfirmed: FieldRef<"User", 'Boolean'>
    readonly searchPrefs: FieldRef<"User", 'Json'>
    readonly lastSeenAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.performerProfile
   */
  export type User$performerProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    where?: PerformerProfileWhereInput
  }

  /**
   * User.clientRequests
   */
  export type User$clientRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    cursor?: RequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * User.performerRequests
   */
  export type User$performerRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    cursor?: RequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * User.reviewsAuthored
   */
  export type User$reviewsAuthoredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.reviewsReceived
   */
  export type User$reviewsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.reportsAuthored
   */
  export type User$reportsAuthoredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.reportsReceived
   */
  export type User$reportsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model PerformerProfile
   */

  export type AggregatePerformerProfile = {
    _count: PerformerProfileCountAggregateOutputType | null
    _avg: PerformerProfileAvgAggregateOutputType | null
    _sum: PerformerProfileSumAggregateOutputType | null
    _min: PerformerProfileMinAggregateOutputType | null
    _max: PerformerProfileMaxAggregateOutputType | null
  }

  export type PerformerProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    pricePerHour: number | null
    rating: number | null
  }

  export type PerformerProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
    pricePerHour: number | null
    rating: number | null
  }

  export type PerformerProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    pricePerHour: number | null
    about: string | null
    voiceSampleUrl: string | null
    status: $Enums.ListingStatus | null
    rating: number | null
    isBoosted: boolean | null
    boostUntil: Date | null
    plan: $Enums.Plan | null
    planUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PerformerProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    pricePerHour: number | null
    about: string | null
    voiceSampleUrl: string | null
    status: $Enums.ListingStatus | null
    rating: number | null
    isBoosted: boolean | null
    boostUntil: Date | null
    plan: $Enums.Plan | null
    planUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PerformerProfileCountAggregateOutputType = {
    id: number
    userId: number
    games: number
    ranks: number
    pricePerHour: number
    about: number
    voiceSampleUrl: number
    photos: number
    availability: number
    status: number
    rating: number
    isBoosted: number
    boostUntil: number
    plan: number
    planUntil: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PerformerProfileAvgAggregateInputType = {
    id?: true
    userId?: true
    pricePerHour?: true
    rating?: true
  }

  export type PerformerProfileSumAggregateInputType = {
    id?: true
    userId?: true
    pricePerHour?: true
    rating?: true
  }

  export type PerformerProfileMinAggregateInputType = {
    id?: true
    userId?: true
    pricePerHour?: true
    about?: true
    voiceSampleUrl?: true
    status?: true
    rating?: true
    isBoosted?: true
    boostUntil?: true
    plan?: true
    planUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PerformerProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    pricePerHour?: true
    about?: true
    voiceSampleUrl?: true
    status?: true
    rating?: true
    isBoosted?: true
    boostUntil?: true
    plan?: true
    planUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PerformerProfileCountAggregateInputType = {
    id?: true
    userId?: true
    games?: true
    ranks?: true
    pricePerHour?: true
    about?: true
    voiceSampleUrl?: true
    photos?: true
    availability?: true
    status?: true
    rating?: true
    isBoosted?: true
    boostUntil?: true
    plan?: true
    planUntil?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PerformerProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformerProfile to aggregate.
     */
    where?: PerformerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerProfiles to fetch.
     */
    orderBy?: PerformerProfileOrderByWithRelationInput | PerformerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformerProfiles
    **/
    _count?: true | PerformerProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerformerProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerformerProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformerProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformerProfileMaxAggregateInputType
  }

  export type GetPerformerProfileAggregateType<T extends PerformerProfileAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformerProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformerProfile[P]>
      : GetScalarType<T[P], AggregatePerformerProfile[P]>
  }




  export type PerformerProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformerProfileWhereInput
    orderBy?: PerformerProfileOrderByWithAggregationInput | PerformerProfileOrderByWithAggregationInput[]
    by: PerformerProfileScalarFieldEnum[] | PerformerProfileScalarFieldEnum
    having?: PerformerProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformerProfileCountAggregateInputType | true
    _avg?: PerformerProfileAvgAggregateInputType
    _sum?: PerformerProfileSumAggregateInputType
    _min?: PerformerProfileMinAggregateInputType
    _max?: PerformerProfileMaxAggregateInputType
  }

  export type PerformerProfileGroupByOutputType = {
    id: number
    userId: number
    games: string[]
    ranks: JsonValue | null
    pricePerHour: number
    about: string | null
    voiceSampleUrl: string | null
    photos: string[]
    availability: JsonValue | null
    status: $Enums.ListingStatus
    rating: number
    isBoosted: boolean
    boostUntil: Date | null
    plan: $Enums.Plan
    planUntil: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PerformerProfileCountAggregateOutputType | null
    _avg: PerformerProfileAvgAggregateOutputType | null
    _sum: PerformerProfileSumAggregateOutputType | null
    _min: PerformerProfileMinAggregateOutputType | null
    _max: PerformerProfileMaxAggregateOutputType | null
  }

  type GetPerformerProfileGroupByPayload<T extends PerformerProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformerProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformerProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformerProfileGroupByOutputType[P]>
            : GetScalarType<T[P], PerformerProfileGroupByOutputType[P]>
        }
      >
    >


  export type PerformerProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    games?: boolean
    ranks?: boolean
    pricePerHour?: boolean
    about?: boolean
    voiceSampleUrl?: boolean
    photos?: boolean
    availability?: boolean
    status?: boolean
    rating?: boolean
    isBoosted?: boolean
    boostUntil?: boolean
    plan?: boolean
    planUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    kycChecks?: boolean | PerformerProfile$kycChecksArgs<ExtArgs>
    BillingOrder?: boolean | PerformerProfile$BillingOrderArgs<ExtArgs>
    _count?: boolean | PerformerProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performerProfile"]>

  export type PerformerProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    games?: boolean
    ranks?: boolean
    pricePerHour?: boolean
    about?: boolean
    voiceSampleUrl?: boolean
    photos?: boolean
    availability?: boolean
    status?: boolean
    rating?: boolean
    isBoosted?: boolean
    boostUntil?: boolean
    plan?: boolean
    planUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performerProfile"]>

  export type PerformerProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    games?: boolean
    ranks?: boolean
    pricePerHour?: boolean
    about?: boolean
    voiceSampleUrl?: boolean
    photos?: boolean
    availability?: boolean
    status?: boolean
    rating?: boolean
    isBoosted?: boolean
    boostUntil?: boolean
    plan?: boolean
    planUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PerformerProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    kycChecks?: boolean | PerformerProfile$kycChecksArgs<ExtArgs>
    BillingOrder?: boolean | PerformerProfile$BillingOrderArgs<ExtArgs>
    _count?: boolean | PerformerProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PerformerProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PerformerProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformerProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      kycChecks: Prisma.$KycCheckPayload<ExtArgs>[]
      BillingOrder: Prisma.$BillingOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      games: string[]
      ranks: Prisma.JsonValue | null
      pricePerHour: number
      about: string | null
      voiceSampleUrl: string | null
      photos: string[]
      availability: Prisma.JsonValue | null
      status: $Enums.ListingStatus
      rating: number
      isBoosted: boolean
      boostUntil: Date | null
      plan: $Enums.Plan
      planUntil: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["performerProfile"]>
    composites: {}
  }

  type PerformerProfileGetPayload<S extends boolean | null | undefined | PerformerProfileDefaultArgs> = $Result.GetResult<Prisma.$PerformerProfilePayload, S>

  type PerformerProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PerformerProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PerformerProfileCountAggregateInputType | true
    }

  export interface PerformerProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformerProfile'], meta: { name: 'PerformerProfile' } }
    /**
     * Find zero or one PerformerProfile that matches the filter.
     * @param {PerformerProfileFindUniqueArgs} args - Arguments to find a PerformerProfile
     * @example
     * // Get one PerformerProfile
     * const performerProfile = await prisma.performerProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformerProfileFindUniqueArgs>(args: SelectSubset<T, PerformerProfileFindUniqueArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PerformerProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PerformerProfileFindUniqueOrThrowArgs} args - Arguments to find a PerformerProfile
     * @example
     * // Get one PerformerProfile
     * const performerProfile = await prisma.performerProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformerProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformerProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PerformerProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerProfileFindFirstArgs} args - Arguments to find a PerformerProfile
     * @example
     * // Get one PerformerProfile
     * const performerProfile = await prisma.performerProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformerProfileFindFirstArgs>(args?: SelectSubset<T, PerformerProfileFindFirstArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PerformerProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerProfileFindFirstOrThrowArgs} args - Arguments to find a PerformerProfile
     * @example
     * // Get one PerformerProfile
     * const performerProfile = await prisma.performerProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformerProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformerProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PerformerProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformerProfiles
     * const performerProfiles = await prisma.performerProfile.findMany()
     * 
     * // Get first 10 PerformerProfiles
     * const performerProfiles = await prisma.performerProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performerProfileWithIdOnly = await prisma.performerProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformerProfileFindManyArgs>(args?: SelectSubset<T, PerformerProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PerformerProfile.
     * @param {PerformerProfileCreateArgs} args - Arguments to create a PerformerProfile.
     * @example
     * // Create one PerformerProfile
     * const PerformerProfile = await prisma.performerProfile.create({
     *   data: {
     *     // ... data to create a PerformerProfile
     *   }
     * })
     * 
     */
    create<T extends PerformerProfileCreateArgs>(args: SelectSubset<T, PerformerProfileCreateArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PerformerProfiles.
     * @param {PerformerProfileCreateManyArgs} args - Arguments to create many PerformerProfiles.
     * @example
     * // Create many PerformerProfiles
     * const performerProfile = await prisma.performerProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformerProfileCreateManyArgs>(args?: SelectSubset<T, PerformerProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformerProfiles and returns the data saved in the database.
     * @param {PerformerProfileCreateManyAndReturnArgs} args - Arguments to create many PerformerProfiles.
     * @example
     * // Create many PerformerProfiles
     * const performerProfile = await prisma.performerProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformerProfiles and only return the `id`
     * const performerProfileWithIdOnly = await prisma.performerProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformerProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformerProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PerformerProfile.
     * @param {PerformerProfileDeleteArgs} args - Arguments to delete one PerformerProfile.
     * @example
     * // Delete one PerformerProfile
     * const PerformerProfile = await prisma.performerProfile.delete({
     *   where: {
     *     // ... filter to delete one PerformerProfile
     *   }
     * })
     * 
     */
    delete<T extends PerformerProfileDeleteArgs>(args: SelectSubset<T, PerformerProfileDeleteArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PerformerProfile.
     * @param {PerformerProfileUpdateArgs} args - Arguments to update one PerformerProfile.
     * @example
     * // Update one PerformerProfile
     * const performerProfile = await prisma.performerProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformerProfileUpdateArgs>(args: SelectSubset<T, PerformerProfileUpdateArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PerformerProfiles.
     * @param {PerformerProfileDeleteManyArgs} args - Arguments to filter PerformerProfiles to delete.
     * @example
     * // Delete a few PerformerProfiles
     * const { count } = await prisma.performerProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformerProfileDeleteManyArgs>(args?: SelectSubset<T, PerformerProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformerProfiles
     * const performerProfile = await prisma.performerProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformerProfileUpdateManyArgs>(args: SelectSubset<T, PerformerProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PerformerProfile.
     * @param {PerformerProfileUpsertArgs} args - Arguments to update or create a PerformerProfile.
     * @example
     * // Update or create a PerformerProfile
     * const performerProfile = await prisma.performerProfile.upsert({
     *   create: {
     *     // ... data to create a PerformerProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformerProfile we want to update
     *   }
     * })
     */
    upsert<T extends PerformerProfileUpsertArgs>(args: SelectSubset<T, PerformerProfileUpsertArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PerformerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerProfileCountArgs} args - Arguments to filter PerformerProfiles to count.
     * @example
     * // Count the number of PerformerProfiles
     * const count = await prisma.performerProfile.count({
     *   where: {
     *     // ... the filter for the PerformerProfiles we want to count
     *   }
     * })
    **/
    count<T extends PerformerProfileCountArgs>(
      args?: Subset<T, PerformerProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformerProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformerProfileAggregateArgs>(args: Subset<T, PerformerProfileAggregateArgs>): Prisma.PrismaPromise<GetPerformerProfileAggregateType<T>>

    /**
     * Group by PerformerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformerProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformerProfileGroupByArgs['orderBy'] }
        : { orderBy?: PerformerProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformerProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformerProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformerProfile model
   */
  readonly fields: PerformerProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformerProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformerProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    kycChecks<T extends PerformerProfile$kycChecksArgs<ExtArgs> = {}>(args?: Subset<T, PerformerProfile$kycChecksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "findMany"> | Null>
    BillingOrder<T extends PerformerProfile$BillingOrderArgs<ExtArgs> = {}>(args?: Subset<T, PerformerProfile$BillingOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformerProfile model
   */ 
  interface PerformerProfileFieldRefs {
    readonly id: FieldRef<"PerformerProfile", 'Int'>
    readonly userId: FieldRef<"PerformerProfile", 'Int'>
    readonly games: FieldRef<"PerformerProfile", 'String[]'>
    readonly ranks: FieldRef<"PerformerProfile", 'Json'>
    readonly pricePerHour: FieldRef<"PerformerProfile", 'Int'>
    readonly about: FieldRef<"PerformerProfile", 'String'>
    readonly voiceSampleUrl: FieldRef<"PerformerProfile", 'String'>
    readonly photos: FieldRef<"PerformerProfile", 'String[]'>
    readonly availability: FieldRef<"PerformerProfile", 'Json'>
    readonly status: FieldRef<"PerformerProfile", 'ListingStatus'>
    readonly rating: FieldRef<"PerformerProfile", 'Float'>
    readonly isBoosted: FieldRef<"PerformerProfile", 'Boolean'>
    readonly boostUntil: FieldRef<"PerformerProfile", 'DateTime'>
    readonly plan: FieldRef<"PerformerProfile", 'Plan'>
    readonly planUntil: FieldRef<"PerformerProfile", 'DateTime'>
    readonly createdAt: FieldRef<"PerformerProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"PerformerProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PerformerProfile findUnique
   */
  export type PerformerProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PerformerProfile to fetch.
     */
    where: PerformerProfileWhereUniqueInput
  }

  /**
   * PerformerProfile findUniqueOrThrow
   */
  export type PerformerProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PerformerProfile to fetch.
     */
    where: PerformerProfileWhereUniqueInput
  }

  /**
   * PerformerProfile findFirst
   */
  export type PerformerProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PerformerProfile to fetch.
     */
    where?: PerformerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerProfiles to fetch.
     */
    orderBy?: PerformerProfileOrderByWithRelationInput | PerformerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformerProfiles.
     */
    cursor?: PerformerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformerProfiles.
     */
    distinct?: PerformerProfileScalarFieldEnum | PerformerProfileScalarFieldEnum[]
  }

  /**
   * PerformerProfile findFirstOrThrow
   */
  export type PerformerProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PerformerProfile to fetch.
     */
    where?: PerformerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerProfiles to fetch.
     */
    orderBy?: PerformerProfileOrderByWithRelationInput | PerformerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformerProfiles.
     */
    cursor?: PerformerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformerProfiles.
     */
    distinct?: PerformerProfileScalarFieldEnum | PerformerProfileScalarFieldEnum[]
  }

  /**
   * PerformerProfile findMany
   */
  export type PerformerProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PerformerProfiles to fetch.
     */
    where?: PerformerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerProfiles to fetch.
     */
    orderBy?: PerformerProfileOrderByWithRelationInput | PerformerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformerProfiles.
     */
    cursor?: PerformerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerProfiles.
     */
    skip?: number
    distinct?: PerformerProfileScalarFieldEnum | PerformerProfileScalarFieldEnum[]
  }

  /**
   * PerformerProfile create
   */
  export type PerformerProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformerProfile.
     */
    data: XOR<PerformerProfileCreateInput, PerformerProfileUncheckedCreateInput>
  }

  /**
   * PerformerProfile createMany
   */
  export type PerformerProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformerProfiles.
     */
    data: PerformerProfileCreateManyInput | PerformerProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformerProfile createManyAndReturn
   */
  export type PerformerProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PerformerProfiles.
     */
    data: PerformerProfileCreateManyInput | PerformerProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformerProfile update
   */
  export type PerformerProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformerProfile.
     */
    data: XOR<PerformerProfileUpdateInput, PerformerProfileUncheckedUpdateInput>
    /**
     * Choose, which PerformerProfile to update.
     */
    where: PerformerProfileWhereUniqueInput
  }

  /**
   * PerformerProfile updateMany
   */
  export type PerformerProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformerProfiles.
     */
    data: XOR<PerformerProfileUpdateManyMutationInput, PerformerProfileUncheckedUpdateManyInput>
    /**
     * Filter which PerformerProfiles to update
     */
    where?: PerformerProfileWhereInput
  }

  /**
   * PerformerProfile upsert
   */
  export type PerformerProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformerProfile to update in case it exists.
     */
    where: PerformerProfileWhereUniqueInput
    /**
     * In case the PerformerProfile found by the `where` argument doesn't exist, create a new PerformerProfile with this data.
     */
    create: XOR<PerformerProfileCreateInput, PerformerProfileUncheckedCreateInput>
    /**
     * In case the PerformerProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformerProfileUpdateInput, PerformerProfileUncheckedUpdateInput>
  }

  /**
   * PerformerProfile delete
   */
  export type PerformerProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
    /**
     * Filter which PerformerProfile to delete.
     */
    where: PerformerProfileWhereUniqueInput
  }

  /**
   * PerformerProfile deleteMany
   */
  export type PerformerProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformerProfiles to delete
     */
    where?: PerformerProfileWhereInput
  }

  /**
   * PerformerProfile.kycChecks
   */
  export type PerformerProfile$kycChecksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    where?: KycCheckWhereInput
    orderBy?: KycCheckOrderByWithRelationInput | KycCheckOrderByWithRelationInput[]
    cursor?: KycCheckWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KycCheckScalarFieldEnum | KycCheckScalarFieldEnum[]
  }

  /**
   * PerformerProfile.BillingOrder
   */
  export type PerformerProfile$BillingOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    where?: BillingOrderWhereInput
    orderBy?: BillingOrderOrderByWithRelationInput | BillingOrderOrderByWithRelationInput[]
    cursor?: BillingOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingOrderScalarFieldEnum | BillingOrderScalarFieldEnum[]
  }

  /**
   * PerformerProfile without action
   */
  export type PerformerProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerProfile
     */
    select?: PerformerProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerProfileInclude<ExtArgs> | null
  }


  /**
   * Model KycCheck
   */

  export type AggregateKycCheck = {
    _count: KycCheckCountAggregateOutputType | null
    _avg: KycCheckAvgAggregateOutputType | null
    _sum: KycCheckSumAggregateOutputType | null
    _min: KycCheckMinAggregateOutputType | null
    _max: KycCheckMaxAggregateOutputType | null
  }

  export type KycCheckAvgAggregateOutputType = {
    id: number | null
    performerId: number | null
  }

  export type KycCheckSumAggregateOutputType = {
    id: number | null
    performerId: number | null
  }

  export type KycCheckMinAggregateOutputType = {
    id: number | null
    performerId: number | null
    docType: string | null
    selfieUrl: string | null
    status: string | null
    reason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KycCheckMaxAggregateOutputType = {
    id: number | null
    performerId: number | null
    docType: string | null
    selfieUrl: string | null
    status: string | null
    reason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KycCheckCountAggregateOutputType = {
    id: number
    performerId: number
    docType: number
    docImages: number
    selfieUrl: number
    status: number
    reason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KycCheckAvgAggregateInputType = {
    id?: true
    performerId?: true
  }

  export type KycCheckSumAggregateInputType = {
    id?: true
    performerId?: true
  }

  export type KycCheckMinAggregateInputType = {
    id?: true
    performerId?: true
    docType?: true
    selfieUrl?: true
    status?: true
    reason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KycCheckMaxAggregateInputType = {
    id?: true
    performerId?: true
    docType?: true
    selfieUrl?: true
    status?: true
    reason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KycCheckCountAggregateInputType = {
    id?: true
    performerId?: true
    docType?: true
    docImages?: true
    selfieUrl?: true
    status?: true
    reason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KycCheckAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KycCheck to aggregate.
     */
    where?: KycCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KycChecks to fetch.
     */
    orderBy?: KycCheckOrderByWithRelationInput | KycCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KycCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KycChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KycChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KycChecks
    **/
    _count?: true | KycCheckCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KycCheckAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KycCheckSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KycCheckMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KycCheckMaxAggregateInputType
  }

  export type GetKycCheckAggregateType<T extends KycCheckAggregateArgs> = {
        [P in keyof T & keyof AggregateKycCheck]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKycCheck[P]>
      : GetScalarType<T[P], AggregateKycCheck[P]>
  }




  export type KycCheckGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KycCheckWhereInput
    orderBy?: KycCheckOrderByWithAggregationInput | KycCheckOrderByWithAggregationInput[]
    by: KycCheckScalarFieldEnum[] | KycCheckScalarFieldEnum
    having?: KycCheckScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KycCheckCountAggregateInputType | true
    _avg?: KycCheckAvgAggregateInputType
    _sum?: KycCheckSumAggregateInputType
    _min?: KycCheckMinAggregateInputType
    _max?: KycCheckMaxAggregateInputType
  }

  export type KycCheckGroupByOutputType = {
    id: number
    performerId: number
    docType: string
    docImages: string[]
    selfieUrl: string | null
    status: string
    reason: string | null
    createdAt: Date
    updatedAt: Date
    _count: KycCheckCountAggregateOutputType | null
    _avg: KycCheckAvgAggregateOutputType | null
    _sum: KycCheckSumAggregateOutputType | null
    _min: KycCheckMinAggregateOutputType | null
    _max: KycCheckMaxAggregateOutputType | null
  }

  type GetKycCheckGroupByPayload<T extends KycCheckGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KycCheckGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KycCheckGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KycCheckGroupByOutputType[P]>
            : GetScalarType<T[P], KycCheckGroupByOutputType[P]>
        }
      >
    >


  export type KycCheckSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performerId?: boolean
    docType?: boolean
    docImages?: boolean
    selfieUrl?: boolean
    status?: boolean
    reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kycCheck"]>

  export type KycCheckSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performerId?: boolean
    docType?: boolean
    docImages?: boolean
    selfieUrl?: boolean
    status?: boolean
    reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kycCheck"]>

  export type KycCheckSelectScalar = {
    id?: boolean
    performerId?: boolean
    docType?: boolean
    docImages?: boolean
    selfieUrl?: boolean
    status?: boolean
    reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KycCheckInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }
  export type KycCheckIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }

  export type $KycCheckPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KycCheck"
    objects: {
      performer: Prisma.$PerformerProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      performerId: number
      docType: string
      docImages: string[]
      selfieUrl: string | null
      status: string
      reason: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kycCheck"]>
    composites: {}
  }

  type KycCheckGetPayload<S extends boolean | null | undefined | KycCheckDefaultArgs> = $Result.GetResult<Prisma.$KycCheckPayload, S>

  type KycCheckCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KycCheckFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KycCheckCountAggregateInputType | true
    }

  export interface KycCheckDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KycCheck'], meta: { name: 'KycCheck' } }
    /**
     * Find zero or one KycCheck that matches the filter.
     * @param {KycCheckFindUniqueArgs} args - Arguments to find a KycCheck
     * @example
     * // Get one KycCheck
     * const kycCheck = await prisma.kycCheck.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KycCheckFindUniqueArgs>(args: SelectSubset<T, KycCheckFindUniqueArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KycCheck that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KycCheckFindUniqueOrThrowArgs} args - Arguments to find a KycCheck
     * @example
     * // Get one KycCheck
     * const kycCheck = await prisma.kycCheck.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KycCheckFindUniqueOrThrowArgs>(args: SelectSubset<T, KycCheckFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KycCheck that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycCheckFindFirstArgs} args - Arguments to find a KycCheck
     * @example
     * // Get one KycCheck
     * const kycCheck = await prisma.kycCheck.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KycCheckFindFirstArgs>(args?: SelectSubset<T, KycCheckFindFirstArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KycCheck that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycCheckFindFirstOrThrowArgs} args - Arguments to find a KycCheck
     * @example
     * // Get one KycCheck
     * const kycCheck = await prisma.kycCheck.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KycCheckFindFirstOrThrowArgs>(args?: SelectSubset<T, KycCheckFindFirstOrThrowArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KycChecks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycCheckFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KycChecks
     * const kycChecks = await prisma.kycCheck.findMany()
     * 
     * // Get first 10 KycChecks
     * const kycChecks = await prisma.kycCheck.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kycCheckWithIdOnly = await prisma.kycCheck.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KycCheckFindManyArgs>(args?: SelectSubset<T, KycCheckFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KycCheck.
     * @param {KycCheckCreateArgs} args - Arguments to create a KycCheck.
     * @example
     * // Create one KycCheck
     * const KycCheck = await prisma.kycCheck.create({
     *   data: {
     *     // ... data to create a KycCheck
     *   }
     * })
     * 
     */
    create<T extends KycCheckCreateArgs>(args: SelectSubset<T, KycCheckCreateArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KycChecks.
     * @param {KycCheckCreateManyArgs} args - Arguments to create many KycChecks.
     * @example
     * // Create many KycChecks
     * const kycCheck = await prisma.kycCheck.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KycCheckCreateManyArgs>(args?: SelectSubset<T, KycCheckCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KycChecks and returns the data saved in the database.
     * @param {KycCheckCreateManyAndReturnArgs} args - Arguments to create many KycChecks.
     * @example
     * // Create many KycChecks
     * const kycCheck = await prisma.kycCheck.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KycChecks and only return the `id`
     * const kycCheckWithIdOnly = await prisma.kycCheck.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KycCheckCreateManyAndReturnArgs>(args?: SelectSubset<T, KycCheckCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a KycCheck.
     * @param {KycCheckDeleteArgs} args - Arguments to delete one KycCheck.
     * @example
     * // Delete one KycCheck
     * const KycCheck = await prisma.kycCheck.delete({
     *   where: {
     *     // ... filter to delete one KycCheck
     *   }
     * })
     * 
     */
    delete<T extends KycCheckDeleteArgs>(args: SelectSubset<T, KycCheckDeleteArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KycCheck.
     * @param {KycCheckUpdateArgs} args - Arguments to update one KycCheck.
     * @example
     * // Update one KycCheck
     * const kycCheck = await prisma.kycCheck.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KycCheckUpdateArgs>(args: SelectSubset<T, KycCheckUpdateArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KycChecks.
     * @param {KycCheckDeleteManyArgs} args - Arguments to filter KycChecks to delete.
     * @example
     * // Delete a few KycChecks
     * const { count } = await prisma.kycCheck.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KycCheckDeleteManyArgs>(args?: SelectSubset<T, KycCheckDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KycChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycCheckUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KycChecks
     * const kycCheck = await prisma.kycCheck.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KycCheckUpdateManyArgs>(args: SelectSubset<T, KycCheckUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KycCheck.
     * @param {KycCheckUpsertArgs} args - Arguments to update or create a KycCheck.
     * @example
     * // Update or create a KycCheck
     * const kycCheck = await prisma.kycCheck.upsert({
     *   create: {
     *     // ... data to create a KycCheck
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KycCheck we want to update
     *   }
     * })
     */
    upsert<T extends KycCheckUpsertArgs>(args: SelectSubset<T, KycCheckUpsertArgs<ExtArgs>>): Prisma__KycCheckClient<$Result.GetResult<Prisma.$KycCheckPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KycChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycCheckCountArgs} args - Arguments to filter KycChecks to count.
     * @example
     * // Count the number of KycChecks
     * const count = await prisma.kycCheck.count({
     *   where: {
     *     // ... the filter for the KycChecks we want to count
     *   }
     * })
    **/
    count<T extends KycCheckCountArgs>(
      args?: Subset<T, KycCheckCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KycCheckCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KycCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycCheckAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KycCheckAggregateArgs>(args: Subset<T, KycCheckAggregateArgs>): Prisma.PrismaPromise<GetKycCheckAggregateType<T>>

    /**
     * Group by KycCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycCheckGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KycCheckGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KycCheckGroupByArgs['orderBy'] }
        : { orderBy?: KycCheckGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KycCheckGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKycCheckGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KycCheck model
   */
  readonly fields: KycCheckFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KycCheck.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KycCheckClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performer<T extends PerformerProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PerformerProfileDefaultArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KycCheck model
   */ 
  interface KycCheckFieldRefs {
    readonly id: FieldRef<"KycCheck", 'Int'>
    readonly performerId: FieldRef<"KycCheck", 'Int'>
    readonly docType: FieldRef<"KycCheck", 'String'>
    readonly docImages: FieldRef<"KycCheck", 'String[]'>
    readonly selfieUrl: FieldRef<"KycCheck", 'String'>
    readonly status: FieldRef<"KycCheck", 'String'>
    readonly reason: FieldRef<"KycCheck", 'String'>
    readonly createdAt: FieldRef<"KycCheck", 'DateTime'>
    readonly updatedAt: FieldRef<"KycCheck", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KycCheck findUnique
   */
  export type KycCheckFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * Filter, which KycCheck to fetch.
     */
    where: KycCheckWhereUniqueInput
  }

  /**
   * KycCheck findUniqueOrThrow
   */
  export type KycCheckFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * Filter, which KycCheck to fetch.
     */
    where: KycCheckWhereUniqueInput
  }

  /**
   * KycCheck findFirst
   */
  export type KycCheckFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * Filter, which KycCheck to fetch.
     */
    where?: KycCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KycChecks to fetch.
     */
    orderBy?: KycCheckOrderByWithRelationInput | KycCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KycChecks.
     */
    cursor?: KycCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KycChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KycChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KycChecks.
     */
    distinct?: KycCheckScalarFieldEnum | KycCheckScalarFieldEnum[]
  }

  /**
   * KycCheck findFirstOrThrow
   */
  export type KycCheckFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * Filter, which KycCheck to fetch.
     */
    where?: KycCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KycChecks to fetch.
     */
    orderBy?: KycCheckOrderByWithRelationInput | KycCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KycChecks.
     */
    cursor?: KycCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KycChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KycChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KycChecks.
     */
    distinct?: KycCheckScalarFieldEnum | KycCheckScalarFieldEnum[]
  }

  /**
   * KycCheck findMany
   */
  export type KycCheckFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * Filter, which KycChecks to fetch.
     */
    where?: KycCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KycChecks to fetch.
     */
    orderBy?: KycCheckOrderByWithRelationInput | KycCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KycChecks.
     */
    cursor?: KycCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KycChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KycChecks.
     */
    skip?: number
    distinct?: KycCheckScalarFieldEnum | KycCheckScalarFieldEnum[]
  }

  /**
   * KycCheck create
   */
  export type KycCheckCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * The data needed to create a KycCheck.
     */
    data: XOR<KycCheckCreateInput, KycCheckUncheckedCreateInput>
  }

  /**
   * KycCheck createMany
   */
  export type KycCheckCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KycChecks.
     */
    data: KycCheckCreateManyInput | KycCheckCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KycCheck createManyAndReturn
   */
  export type KycCheckCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KycChecks.
     */
    data: KycCheckCreateManyInput | KycCheckCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KycCheck update
   */
  export type KycCheckUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * The data needed to update a KycCheck.
     */
    data: XOR<KycCheckUpdateInput, KycCheckUncheckedUpdateInput>
    /**
     * Choose, which KycCheck to update.
     */
    where: KycCheckWhereUniqueInput
  }

  /**
   * KycCheck updateMany
   */
  export type KycCheckUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KycChecks.
     */
    data: XOR<KycCheckUpdateManyMutationInput, KycCheckUncheckedUpdateManyInput>
    /**
     * Filter which KycChecks to update
     */
    where?: KycCheckWhereInput
  }

  /**
   * KycCheck upsert
   */
  export type KycCheckUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * The filter to search for the KycCheck to update in case it exists.
     */
    where: KycCheckWhereUniqueInput
    /**
     * In case the KycCheck found by the `where` argument doesn't exist, create a new KycCheck with this data.
     */
    create: XOR<KycCheckCreateInput, KycCheckUncheckedCreateInput>
    /**
     * In case the KycCheck was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KycCheckUpdateInput, KycCheckUncheckedUpdateInput>
  }

  /**
   * KycCheck delete
   */
  export type KycCheckDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
    /**
     * Filter which KycCheck to delete.
     */
    where: KycCheckWhereUniqueInput
  }

  /**
   * KycCheck deleteMany
   */
  export type KycCheckDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KycChecks to delete
     */
    where?: KycCheckWhereInput
  }

  /**
   * KycCheck without action
   */
  export type KycCheckDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KycCheck
     */
    select?: KycCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KycCheckInclude<ExtArgs> | null
  }


  /**
   * Model Request
   */

  export type AggregateRequest = {
    _count: RequestCountAggregateOutputType | null
    _avg: RequestAvgAggregateOutputType | null
    _sum: RequestSumAggregateOutputType | null
    _min: RequestMinAggregateOutputType | null
    _max: RequestMaxAggregateOutputType | null
  }

  export type RequestAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    performerId: number | null
    durationMin: number | null
  }

  export type RequestSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    performerId: number | null
    durationMin: number | null
  }

  export type RequestMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    performerId: number | null
    game: string | null
    durationMin: number | null
    preferredAt: Date | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    performerId: number | null
    game: string | null
    durationMin: number | null
    preferredAt: Date | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestCountAggregateOutputType = {
    id: number
    clientId: number
    performerId: number
    game: number
    durationMin: number
    preferredAt: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RequestAvgAggregateInputType = {
    id?: true
    clientId?: true
    performerId?: true
    durationMin?: true
  }

  export type RequestSumAggregateInputType = {
    id?: true
    clientId?: true
    performerId?: true
    durationMin?: true
  }

  export type RequestMinAggregateInputType = {
    id?: true
    clientId?: true
    performerId?: true
    game?: true
    durationMin?: true
    preferredAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestMaxAggregateInputType = {
    id?: true
    clientId?: true
    performerId?: true
    game?: true
    durationMin?: true
    preferredAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestCountAggregateInputType = {
    id?: true
    clientId?: true
    performerId?: true
    game?: true
    durationMin?: true
    preferredAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Request to aggregate.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Requests
    **/
    _count?: true | RequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestMaxAggregateInputType
  }

  export type GetRequestAggregateType<T extends RequestAggregateArgs> = {
        [P in keyof T & keyof AggregateRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequest[P]>
      : GetScalarType<T[P], AggregateRequest[P]>
  }




  export type RequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithAggregationInput | RequestOrderByWithAggregationInput[]
    by: RequestScalarFieldEnum[] | RequestScalarFieldEnum
    having?: RequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestCountAggregateInputType | true
    _avg?: RequestAvgAggregateInputType
    _sum?: RequestSumAggregateInputType
    _min?: RequestMinAggregateInputType
    _max?: RequestMaxAggregateInputType
  }

  export type RequestGroupByOutputType = {
    id: number
    clientId: number
    performerId: number
    game: string
    durationMin: number
    preferredAt: Date | null
    status: $Enums.RequestStatus
    createdAt: Date
    updatedAt: Date
    _count: RequestCountAggregateOutputType | null
    _avg: RequestAvgAggregateOutputType | null
    _sum: RequestSumAggregateOutputType | null
    _min: RequestMinAggregateOutputType | null
    _max: RequestMaxAggregateOutputType | null
  }

  type GetRequestGroupByPayload<T extends RequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestGroupByOutputType[P]>
            : GetScalarType<T[P], RequestGroupByOutputType[P]>
        }
      >
    >


  export type RequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    performerId?: boolean
    game?: boolean
    durationMin?: boolean
    preferredAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
    performer?: boolean | UserDefaultArgs<ExtArgs>
    paymentMeta?: boolean | Request$paymentMetaArgs<ExtArgs>
    reviews?: boolean | Request$reviewsArgs<ExtArgs>
    _count?: boolean | RequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["request"]>

  export type RequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    performerId?: boolean
    game?: boolean
    durationMin?: boolean
    preferredAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
    performer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["request"]>

  export type RequestSelectScalar = {
    id?: boolean
    clientId?: boolean
    performerId?: boolean
    game?: boolean
    durationMin?: boolean
    preferredAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
    performer?: boolean | UserDefaultArgs<ExtArgs>
    paymentMeta?: boolean | Request$paymentMetaArgs<ExtArgs>
    reviews?: boolean | Request$reviewsArgs<ExtArgs>
    _count?: boolean | RequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
    performer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Request"
    objects: {
      client: Prisma.$UserPayload<ExtArgs>
      performer: Prisma.$UserPayload<ExtArgs>
      paymentMeta: Prisma.$PaymentMetaPayload<ExtArgs> | null
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: number
      performerId: number
      game: string
      durationMin: number
      preferredAt: Date | null
      status: $Enums.RequestStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["request"]>
    composites: {}
  }

  type RequestGetPayload<S extends boolean | null | undefined | RequestDefaultArgs> = $Result.GetResult<Prisma.$RequestPayload, S>

  type RequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequestCountAggregateInputType | true
    }

  export interface RequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Request'], meta: { name: 'Request' } }
    /**
     * Find zero or one Request that matches the filter.
     * @param {RequestFindUniqueArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestFindUniqueArgs>(args: SelectSubset<T, RequestFindUniqueArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Request that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RequestFindUniqueOrThrowArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Request that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestFindFirstArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestFindFirstArgs>(args?: SelectSubset<T, RequestFindFirstArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Request that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestFindFirstOrThrowArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Requests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Requests
     * const requests = await prisma.request.findMany()
     * 
     * // Get first 10 Requests
     * const requests = await prisma.request.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestWithIdOnly = await prisma.request.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestFindManyArgs>(args?: SelectSubset<T, RequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Request.
     * @param {RequestCreateArgs} args - Arguments to create a Request.
     * @example
     * // Create one Request
     * const Request = await prisma.request.create({
     *   data: {
     *     // ... data to create a Request
     *   }
     * })
     * 
     */
    create<T extends RequestCreateArgs>(args: SelectSubset<T, RequestCreateArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Requests.
     * @param {RequestCreateManyArgs} args - Arguments to create many Requests.
     * @example
     * // Create many Requests
     * const request = await prisma.request.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestCreateManyArgs>(args?: SelectSubset<T, RequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Requests and returns the data saved in the database.
     * @param {RequestCreateManyAndReturnArgs} args - Arguments to create many Requests.
     * @example
     * // Create many Requests
     * const request = await prisma.request.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Requests and only return the `id`
     * const requestWithIdOnly = await prisma.request.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Request.
     * @param {RequestDeleteArgs} args - Arguments to delete one Request.
     * @example
     * // Delete one Request
     * const Request = await prisma.request.delete({
     *   where: {
     *     // ... filter to delete one Request
     *   }
     * })
     * 
     */
    delete<T extends RequestDeleteArgs>(args: SelectSubset<T, RequestDeleteArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Request.
     * @param {RequestUpdateArgs} args - Arguments to update one Request.
     * @example
     * // Update one Request
     * const request = await prisma.request.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestUpdateArgs>(args: SelectSubset<T, RequestUpdateArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Requests.
     * @param {RequestDeleteManyArgs} args - Arguments to filter Requests to delete.
     * @example
     * // Delete a few Requests
     * const { count } = await prisma.request.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestDeleteManyArgs>(args?: SelectSubset<T, RequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Requests
     * const request = await prisma.request.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestUpdateManyArgs>(args: SelectSubset<T, RequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Request.
     * @param {RequestUpsertArgs} args - Arguments to update or create a Request.
     * @example
     * // Update or create a Request
     * const request = await prisma.request.upsert({
     *   create: {
     *     // ... data to create a Request
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Request we want to update
     *   }
     * })
     */
    upsert<T extends RequestUpsertArgs>(args: SelectSubset<T, RequestUpsertArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestCountArgs} args - Arguments to filter Requests to count.
     * @example
     * // Count the number of Requests
     * const count = await prisma.request.count({
     *   where: {
     *     // ... the filter for the Requests we want to count
     *   }
     * })
    **/
    count<T extends RequestCountArgs>(
      args?: Subset<T, RequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestAggregateArgs>(args: Subset<T, RequestAggregateArgs>): Prisma.PrismaPromise<GetRequestAggregateType<T>>

    /**
     * Group by Request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestGroupByArgs['orderBy'] }
        : { orderBy?: RequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Request model
   */
  readonly fields: RequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Request.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    performer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    paymentMeta<T extends Request$paymentMetaArgs<ExtArgs> = {}>(args?: Subset<T, Request$paymentMetaArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    reviews<T extends Request$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Request$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Request model
   */ 
  interface RequestFieldRefs {
    readonly id: FieldRef<"Request", 'Int'>
    readonly clientId: FieldRef<"Request", 'Int'>
    readonly performerId: FieldRef<"Request", 'Int'>
    readonly game: FieldRef<"Request", 'String'>
    readonly durationMin: FieldRef<"Request", 'Int'>
    readonly preferredAt: FieldRef<"Request", 'DateTime'>
    readonly status: FieldRef<"Request", 'RequestStatus'>
    readonly createdAt: FieldRef<"Request", 'DateTime'>
    readonly updatedAt: FieldRef<"Request", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Request findUnique
   */
  export type RequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request findUniqueOrThrow
   */
  export type RequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request findFirst
   */
  export type RequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Requests.
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Requests.
     */
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * Request findFirstOrThrow
   */
  export type RequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Requests.
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Requests.
     */
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * Request findMany
   */
  export type RequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Requests to fetch.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Requests.
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * Request create
   */
  export type RequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * The data needed to create a Request.
     */
    data: XOR<RequestCreateInput, RequestUncheckedCreateInput>
  }

  /**
   * Request createMany
   */
  export type RequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Requests.
     */
    data: RequestCreateManyInput | RequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Request createManyAndReturn
   */
  export type RequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Requests.
     */
    data: RequestCreateManyInput | RequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Request update
   */
  export type RequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * The data needed to update a Request.
     */
    data: XOR<RequestUpdateInput, RequestUncheckedUpdateInput>
    /**
     * Choose, which Request to update.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request updateMany
   */
  export type RequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Requests.
     */
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyInput>
    /**
     * Filter which Requests to update
     */
    where?: RequestWhereInput
  }

  /**
   * Request upsert
   */
  export type RequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * The filter to search for the Request to update in case it exists.
     */
    where: RequestWhereUniqueInput
    /**
     * In case the Request found by the `where` argument doesn't exist, create a new Request with this data.
     */
    create: XOR<RequestCreateInput, RequestUncheckedCreateInput>
    /**
     * In case the Request was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestUpdateInput, RequestUncheckedUpdateInput>
  }

  /**
   * Request delete
   */
  export type RequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter which Request to delete.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request deleteMany
   */
  export type RequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Requests to delete
     */
    where?: RequestWhereInput
  }

  /**
   * Request.paymentMeta
   */
  export type Request$paymentMetaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    where?: PaymentMetaWhereInput
  }

  /**
   * Request.reviews
   */
  export type Request$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Request without action
   */
  export type RequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
  }


  /**
   * Model PaymentMeta
   */

  export type AggregatePaymentMeta = {
    _count: PaymentMetaCountAggregateOutputType | null
    _avg: PaymentMetaAvgAggregateOutputType | null
    _sum: PaymentMetaSumAggregateOutputType | null
    _min: PaymentMetaMinAggregateOutputType | null
    _max: PaymentMetaMaxAggregateOutputType | null
  }

  export type PaymentMetaAvgAggregateOutputType = {
    id: number | null
    requestId: number | null
  }

  export type PaymentMetaSumAggregateOutputType = {
    id: number | null
    requestId: number | null
  }

  export type PaymentMetaMinAggregateOutputType = {
    id: number | null
    requestId: number | null
    method: $Enums.PaymentMethod | null
    clientMarkPaid: boolean | null
    performerReceived: boolean | null
    instructions: string | null
  }

  export type PaymentMetaMaxAggregateOutputType = {
    id: number | null
    requestId: number | null
    method: $Enums.PaymentMethod | null
    clientMarkPaid: boolean | null
    performerReceived: boolean | null
    instructions: string | null
  }

  export type PaymentMetaCountAggregateOutputType = {
    id: number
    requestId: number
    method: number
    clientMarkPaid: number
    performerReceived: number
    proofUrls: number
    instructions: number
    _all: number
  }


  export type PaymentMetaAvgAggregateInputType = {
    id?: true
    requestId?: true
  }

  export type PaymentMetaSumAggregateInputType = {
    id?: true
    requestId?: true
  }

  export type PaymentMetaMinAggregateInputType = {
    id?: true
    requestId?: true
    method?: true
    clientMarkPaid?: true
    performerReceived?: true
    instructions?: true
  }

  export type PaymentMetaMaxAggregateInputType = {
    id?: true
    requestId?: true
    method?: true
    clientMarkPaid?: true
    performerReceived?: true
    instructions?: true
  }

  export type PaymentMetaCountAggregateInputType = {
    id?: true
    requestId?: true
    method?: true
    clientMarkPaid?: true
    performerReceived?: true
    proofUrls?: true
    instructions?: true
    _all?: true
  }

  export type PaymentMetaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMeta to aggregate.
     */
    where?: PaymentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMetas to fetch.
     */
    orderBy?: PaymentMetaOrderByWithRelationInput | PaymentMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentMetas
    **/
    _count?: true | PaymentMetaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentMetaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentMetaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMetaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMetaMaxAggregateInputType
  }

  export type GetPaymentMetaAggregateType<T extends PaymentMetaAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentMeta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentMeta[P]>
      : GetScalarType<T[P], AggregatePaymentMeta[P]>
  }




  export type PaymentMetaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMetaWhereInput
    orderBy?: PaymentMetaOrderByWithAggregationInput | PaymentMetaOrderByWithAggregationInput[]
    by: PaymentMetaScalarFieldEnum[] | PaymentMetaScalarFieldEnum
    having?: PaymentMetaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentMetaCountAggregateInputType | true
    _avg?: PaymentMetaAvgAggregateInputType
    _sum?: PaymentMetaSumAggregateInputType
    _min?: PaymentMetaMinAggregateInputType
    _max?: PaymentMetaMaxAggregateInputType
  }

  export type PaymentMetaGroupByOutputType = {
    id: number
    requestId: number
    method: $Enums.PaymentMethod
    clientMarkPaid: boolean
    performerReceived: boolean
    proofUrls: string[]
    instructions: string | null
    _count: PaymentMetaCountAggregateOutputType | null
    _avg: PaymentMetaAvgAggregateOutputType | null
    _sum: PaymentMetaSumAggregateOutputType | null
    _min: PaymentMetaMinAggregateOutputType | null
    _max: PaymentMetaMaxAggregateOutputType | null
  }

  type GetPaymentMetaGroupByPayload<T extends PaymentMetaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentMetaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentMetaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentMetaGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentMetaGroupByOutputType[P]>
        }
      >
    >


  export type PaymentMetaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    method?: boolean
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: boolean
    instructions?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMeta"]>

  export type PaymentMetaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    method?: boolean
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: boolean
    instructions?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMeta"]>

  export type PaymentMetaSelectScalar = {
    id?: boolean
    requestId?: boolean
    method?: boolean
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: boolean
    instructions?: boolean
  }

  export type PaymentMetaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
  }
  export type PaymentMetaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
  }

  export type $PaymentMetaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentMeta"
    objects: {
      request: Prisma.$RequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestId: number
      method: $Enums.PaymentMethod
      clientMarkPaid: boolean
      performerReceived: boolean
      proofUrls: string[]
      instructions: string | null
    }, ExtArgs["result"]["paymentMeta"]>
    composites: {}
  }

  type PaymentMetaGetPayload<S extends boolean | null | undefined | PaymentMetaDefaultArgs> = $Result.GetResult<Prisma.$PaymentMetaPayload, S>

  type PaymentMetaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentMetaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentMetaCountAggregateInputType | true
    }

  export interface PaymentMetaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMeta'], meta: { name: 'PaymentMeta' } }
    /**
     * Find zero or one PaymentMeta that matches the filter.
     * @param {PaymentMetaFindUniqueArgs} args - Arguments to find a PaymentMeta
     * @example
     * // Get one PaymentMeta
     * const paymentMeta = await prisma.paymentMeta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentMetaFindUniqueArgs>(args: SelectSubset<T, PaymentMetaFindUniqueArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentMeta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentMetaFindUniqueOrThrowArgs} args - Arguments to find a PaymentMeta
     * @example
     * // Get one PaymentMeta
     * const paymentMeta = await prisma.paymentMeta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentMetaFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentMetaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentMeta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMetaFindFirstArgs} args - Arguments to find a PaymentMeta
     * @example
     * // Get one PaymentMeta
     * const paymentMeta = await prisma.paymentMeta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentMetaFindFirstArgs>(args?: SelectSubset<T, PaymentMetaFindFirstArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentMeta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMetaFindFirstOrThrowArgs} args - Arguments to find a PaymentMeta
     * @example
     * // Get one PaymentMeta
     * const paymentMeta = await prisma.paymentMeta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentMetaFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentMetaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentMetas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMetaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentMetas
     * const paymentMetas = await prisma.paymentMeta.findMany()
     * 
     * // Get first 10 PaymentMetas
     * const paymentMetas = await prisma.paymentMeta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentMetaWithIdOnly = await prisma.paymentMeta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentMetaFindManyArgs>(args?: SelectSubset<T, PaymentMetaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentMeta.
     * @param {PaymentMetaCreateArgs} args - Arguments to create a PaymentMeta.
     * @example
     * // Create one PaymentMeta
     * const PaymentMeta = await prisma.paymentMeta.create({
     *   data: {
     *     // ... data to create a PaymentMeta
     *   }
     * })
     * 
     */
    create<T extends PaymentMetaCreateArgs>(args: SelectSubset<T, PaymentMetaCreateArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentMetas.
     * @param {PaymentMetaCreateManyArgs} args - Arguments to create many PaymentMetas.
     * @example
     * // Create many PaymentMetas
     * const paymentMeta = await prisma.paymentMeta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentMetaCreateManyArgs>(args?: SelectSubset<T, PaymentMetaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentMetas and returns the data saved in the database.
     * @param {PaymentMetaCreateManyAndReturnArgs} args - Arguments to create many PaymentMetas.
     * @example
     * // Create many PaymentMetas
     * const paymentMeta = await prisma.paymentMeta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentMetas and only return the `id`
     * const paymentMetaWithIdOnly = await prisma.paymentMeta.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentMetaCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentMetaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentMeta.
     * @param {PaymentMetaDeleteArgs} args - Arguments to delete one PaymentMeta.
     * @example
     * // Delete one PaymentMeta
     * const PaymentMeta = await prisma.paymentMeta.delete({
     *   where: {
     *     // ... filter to delete one PaymentMeta
     *   }
     * })
     * 
     */
    delete<T extends PaymentMetaDeleteArgs>(args: SelectSubset<T, PaymentMetaDeleteArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentMeta.
     * @param {PaymentMetaUpdateArgs} args - Arguments to update one PaymentMeta.
     * @example
     * // Update one PaymentMeta
     * const paymentMeta = await prisma.paymentMeta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentMetaUpdateArgs>(args: SelectSubset<T, PaymentMetaUpdateArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentMetas.
     * @param {PaymentMetaDeleteManyArgs} args - Arguments to filter PaymentMetas to delete.
     * @example
     * // Delete a few PaymentMetas
     * const { count } = await prisma.paymentMeta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentMetaDeleteManyArgs>(args?: SelectSubset<T, PaymentMetaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentMetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMetaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentMetas
     * const paymentMeta = await prisma.paymentMeta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentMetaUpdateManyArgs>(args: SelectSubset<T, PaymentMetaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentMeta.
     * @param {PaymentMetaUpsertArgs} args - Arguments to update or create a PaymentMeta.
     * @example
     * // Update or create a PaymentMeta
     * const paymentMeta = await prisma.paymentMeta.upsert({
     *   create: {
     *     // ... data to create a PaymentMeta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentMeta we want to update
     *   }
     * })
     */
    upsert<T extends PaymentMetaUpsertArgs>(args: SelectSubset<T, PaymentMetaUpsertArgs<ExtArgs>>): Prisma__PaymentMetaClient<$Result.GetResult<Prisma.$PaymentMetaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentMetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMetaCountArgs} args - Arguments to filter PaymentMetas to count.
     * @example
     * // Count the number of PaymentMetas
     * const count = await prisma.paymentMeta.count({
     *   where: {
     *     // ... the filter for the PaymentMetas we want to count
     *   }
     * })
    **/
    count<T extends PaymentMetaCountArgs>(
      args?: Subset<T, PaymentMetaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentMetaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentMeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentMetaAggregateArgs>(args: Subset<T, PaymentMetaAggregateArgs>): Prisma.PrismaPromise<GetPaymentMetaAggregateType<T>>

    /**
     * Group by PaymentMeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMetaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentMetaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentMetaGroupByArgs['orderBy'] }
        : { orderBy?: PaymentMetaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentMetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentMeta model
   */
  readonly fields: PaymentMetaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentMeta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentMetaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends RequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestDefaultArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentMeta model
   */ 
  interface PaymentMetaFieldRefs {
    readonly id: FieldRef<"PaymentMeta", 'Int'>
    readonly requestId: FieldRef<"PaymentMeta", 'Int'>
    readonly method: FieldRef<"PaymentMeta", 'PaymentMethod'>
    readonly clientMarkPaid: FieldRef<"PaymentMeta", 'Boolean'>
    readonly performerReceived: FieldRef<"PaymentMeta", 'Boolean'>
    readonly proofUrls: FieldRef<"PaymentMeta", 'String[]'>
    readonly instructions: FieldRef<"PaymentMeta", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PaymentMeta findUnique
   */
  export type PaymentMetaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMeta to fetch.
     */
    where: PaymentMetaWhereUniqueInput
  }

  /**
   * PaymentMeta findUniqueOrThrow
   */
  export type PaymentMetaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMeta to fetch.
     */
    where: PaymentMetaWhereUniqueInput
  }

  /**
   * PaymentMeta findFirst
   */
  export type PaymentMetaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMeta to fetch.
     */
    where?: PaymentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMetas to fetch.
     */
    orderBy?: PaymentMetaOrderByWithRelationInput | PaymentMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMetas.
     */
    cursor?: PaymentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMetas.
     */
    distinct?: PaymentMetaScalarFieldEnum | PaymentMetaScalarFieldEnum[]
  }

  /**
   * PaymentMeta findFirstOrThrow
   */
  export type PaymentMetaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMeta to fetch.
     */
    where?: PaymentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMetas to fetch.
     */
    orderBy?: PaymentMetaOrderByWithRelationInput | PaymentMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMetas.
     */
    cursor?: PaymentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMetas.
     */
    distinct?: PaymentMetaScalarFieldEnum | PaymentMetaScalarFieldEnum[]
  }

  /**
   * PaymentMeta findMany
   */
  export type PaymentMetaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMetas to fetch.
     */
    where?: PaymentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMetas to fetch.
     */
    orderBy?: PaymentMetaOrderByWithRelationInput | PaymentMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentMetas.
     */
    cursor?: PaymentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMetas.
     */
    skip?: number
    distinct?: PaymentMetaScalarFieldEnum | PaymentMetaScalarFieldEnum[]
  }

  /**
   * PaymentMeta create
   */
  export type PaymentMetaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentMeta.
     */
    data: XOR<PaymentMetaCreateInput, PaymentMetaUncheckedCreateInput>
  }

  /**
   * PaymentMeta createMany
   */
  export type PaymentMetaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentMetas.
     */
    data: PaymentMetaCreateManyInput | PaymentMetaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentMeta createManyAndReturn
   */
  export type PaymentMetaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentMetas.
     */
    data: PaymentMetaCreateManyInput | PaymentMetaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentMeta update
   */
  export type PaymentMetaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentMeta.
     */
    data: XOR<PaymentMetaUpdateInput, PaymentMetaUncheckedUpdateInput>
    /**
     * Choose, which PaymentMeta to update.
     */
    where: PaymentMetaWhereUniqueInput
  }

  /**
   * PaymentMeta updateMany
   */
  export type PaymentMetaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentMetas.
     */
    data: XOR<PaymentMetaUpdateManyMutationInput, PaymentMetaUncheckedUpdateManyInput>
    /**
     * Filter which PaymentMetas to update
     */
    where?: PaymentMetaWhereInput
  }

  /**
   * PaymentMeta upsert
   */
  export type PaymentMetaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentMeta to update in case it exists.
     */
    where: PaymentMetaWhereUniqueInput
    /**
     * In case the PaymentMeta found by the `where` argument doesn't exist, create a new PaymentMeta with this data.
     */
    create: XOR<PaymentMetaCreateInput, PaymentMetaUncheckedCreateInput>
    /**
     * In case the PaymentMeta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentMetaUpdateInput, PaymentMetaUncheckedUpdateInput>
  }

  /**
   * PaymentMeta delete
   */
  export type PaymentMetaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
    /**
     * Filter which PaymentMeta to delete.
     */
    where: PaymentMetaWhereUniqueInput
  }

  /**
   * PaymentMeta deleteMany
   */
  export type PaymentMetaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMetas to delete
     */
    where?: PaymentMetaWhereInput
  }

  /**
   * PaymentMeta without action
   */
  export type PaymentMetaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMeta
     */
    select?: PaymentMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMetaInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    requestId: number | null
    authorId: number | null
    targetId: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    requestId: number | null
    authorId: number | null
    targetId: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    requestId: number | null
    authorId: number | null
    targetId: number | null
    rating: number | null
    text: string | null
    createdAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    requestId: number | null
    authorId: number | null
    targetId: number | null
    rating: number | null
    text: string | null
    createdAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    requestId: number
    authorId: number
    targetId: number
    rating: number
    text: number
    createdAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    requestId?: true
    authorId?: true
    targetId?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    requestId?: true
    authorId?: true
    targetId?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    requestId?: true
    authorId?: true
    targetId?: true
    rating?: true
    text?: true
    createdAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    requestId?: true
    authorId?: true
    targetId?: true
    rating?: true
    text?: true
    createdAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    requestId?: true
    authorId?: true
    targetId?: true
    rating?: true
    text?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    requestId: number
    authorId: number
    targetId: number
    rating: number
    text: string | null
    createdAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    authorId?: boolean
    targetId?: boolean
    rating?: boolean
    text?: boolean
    createdAt?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    authorId?: boolean
    targetId?: boolean
    rating?: boolean
    text?: boolean
    createdAt?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    requestId?: boolean
    authorId?: boolean
    targetId?: boolean
    rating?: boolean
    text?: boolean
    createdAt?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      request: Prisma.$RequestPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
      target: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestId: number
      authorId: number
      targetId: number
      rating: number
      text: string | null
      createdAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends RequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestDefaultArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    target<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly requestId: FieldRef<"Review", 'Int'>
    readonly authorId: FieldRef<"Review", 'Int'>
    readonly targetId: FieldRef<"Review", 'Int'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly text: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    reporterId: number | null
    targetUserId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    reporterId: number | null
    targetUserId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    reporterId: number | null
    targetUserId: number | null
    category: string | null
    text: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    reporterId: number | null
    targetUserId: number | null
    category: string | null
    text: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    reporterId: number
    targetUserId: number
    category: number
    text: number
    attachments: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    reporterId?: true
    targetUserId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    reporterId?: true
    targetUserId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    reporterId?: true
    targetUserId?: true
    category?: true
    text?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    reporterId?: true
    targetUserId?: true
    category?: true
    text?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    reporterId?: true
    targetUserId?: true
    category?: true
    text?: true
    attachments?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: number
    reporterId: number
    targetUserId: number | null
    category: string
    text: string | null
    attachments: string[]
    status: string
    createdAt: Date
    updatedAt: Date
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reporterId?: boolean
    targetUserId?: boolean
    category?: boolean
    text?: boolean
    attachments?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | Report$targetUserArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reporterId?: boolean
    targetUserId?: boolean
    category?: boolean
    text?: boolean
    attachments?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | Report$targetUserArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    reporterId?: boolean
    targetUserId?: boolean
    category?: boolean
    text?: boolean
    attachments?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | Report$targetUserArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | Report$targetUserArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      reporter: Prisma.$UserPayload<ExtArgs>
      targetUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reporterId: number
      targetUserId: number | null
      category: string
      text: string | null
      attachments: string[]
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reporter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    targetUser<T extends Report$targetUserArgs<ExtArgs> = {}>(args?: Subset<T, Report$targetUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'Int'>
    readonly reporterId: FieldRef<"Report", 'Int'>
    readonly targetUserId: FieldRef<"Report", 'Int'>
    readonly category: FieldRef<"Report", 'String'>
    readonly text: FieldRef<"Report", 'String'>
    readonly attachments: FieldRef<"Report", 'String[]'>
    readonly status: FieldRef<"Report", 'String'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }

  /**
   * Report.targetUser
   */
  export type Report$targetUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model BillingOrder
   */

  export type AggregateBillingOrder = {
    _count: BillingOrderCountAggregateOutputType | null
    _avg: BillingOrderAvgAggregateOutputType | null
    _sum: BillingOrderSumAggregateOutputType | null
    _min: BillingOrderMinAggregateOutputType | null
    _max: BillingOrderMaxAggregateOutputType | null
  }

  export type BillingOrderAvgAggregateOutputType = {
    id: number | null
    performerId: number | null
    days: number | null
    amountRub: number | null
  }

  export type BillingOrderSumAggregateOutputType = {
    id: number | null
    performerId: number | null
    days: number | null
    amountRub: number | null
  }

  export type BillingOrderMinAggregateOutputType = {
    id: number | null
    performerId: number | null
    type: $Enums.BillingType | null
    plan: $Enums.Plan | null
    days: number | null
    amountRub: number | null
    status: $Enums.BillingStatus | null
    notes: string | null
    activatedUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingOrderMaxAggregateOutputType = {
    id: number | null
    performerId: number | null
    type: $Enums.BillingType | null
    plan: $Enums.Plan | null
    days: number | null
    amountRub: number | null
    status: $Enums.BillingStatus | null
    notes: string | null
    activatedUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingOrderCountAggregateOutputType = {
    id: number
    performerId: number
    type: number
    plan: number
    days: number
    amountRub: number
    proofUrls: number
    status: number
    notes: number
    activatedUntil: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BillingOrderAvgAggregateInputType = {
    id?: true
    performerId?: true
    days?: true
    amountRub?: true
  }

  export type BillingOrderSumAggregateInputType = {
    id?: true
    performerId?: true
    days?: true
    amountRub?: true
  }

  export type BillingOrderMinAggregateInputType = {
    id?: true
    performerId?: true
    type?: true
    plan?: true
    days?: true
    amountRub?: true
    status?: true
    notes?: true
    activatedUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingOrderMaxAggregateInputType = {
    id?: true
    performerId?: true
    type?: true
    plan?: true
    days?: true
    amountRub?: true
    status?: true
    notes?: true
    activatedUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingOrderCountAggregateInputType = {
    id?: true
    performerId?: true
    type?: true
    plan?: true
    days?: true
    amountRub?: true
    proofUrls?: true
    status?: true
    notes?: true
    activatedUntil?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BillingOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingOrder to aggregate.
     */
    where?: BillingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingOrders to fetch.
     */
    orderBy?: BillingOrderOrderByWithRelationInput | BillingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillingOrders
    **/
    _count?: true | BillingOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingOrderMaxAggregateInputType
  }

  export type GetBillingOrderAggregateType<T extends BillingOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateBillingOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillingOrder[P]>
      : GetScalarType<T[P], AggregateBillingOrder[P]>
  }




  export type BillingOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingOrderWhereInput
    orderBy?: BillingOrderOrderByWithAggregationInput | BillingOrderOrderByWithAggregationInput[]
    by: BillingOrderScalarFieldEnum[] | BillingOrderScalarFieldEnum
    having?: BillingOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingOrderCountAggregateInputType | true
    _avg?: BillingOrderAvgAggregateInputType
    _sum?: BillingOrderSumAggregateInputType
    _min?: BillingOrderMinAggregateInputType
    _max?: BillingOrderMaxAggregateInputType
  }

  export type BillingOrderGroupByOutputType = {
    id: number
    performerId: number
    type: $Enums.BillingType
    plan: $Enums.Plan | null
    days: number
    amountRub: number
    proofUrls: string[]
    status: $Enums.BillingStatus
    notes: string | null
    activatedUntil: Date | null
    createdAt: Date
    updatedAt: Date
    _count: BillingOrderCountAggregateOutputType | null
    _avg: BillingOrderAvgAggregateOutputType | null
    _sum: BillingOrderSumAggregateOutputType | null
    _min: BillingOrderMinAggregateOutputType | null
    _max: BillingOrderMaxAggregateOutputType | null
  }

  type GetBillingOrderGroupByPayload<T extends BillingOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingOrderGroupByOutputType[P]>
            : GetScalarType<T[P], BillingOrderGroupByOutputType[P]>
        }
      >
    >


  export type BillingOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performerId?: boolean
    type?: boolean
    plan?: boolean
    days?: boolean
    amountRub?: boolean
    proofUrls?: boolean
    status?: boolean
    notes?: boolean
    activatedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingOrder"]>

  export type BillingOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performerId?: boolean
    type?: boolean
    plan?: boolean
    days?: boolean
    amountRub?: boolean
    proofUrls?: boolean
    status?: boolean
    notes?: boolean
    activatedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingOrder"]>

  export type BillingOrderSelectScalar = {
    id?: boolean
    performerId?: boolean
    type?: boolean
    plan?: boolean
    days?: boolean
    amountRub?: boolean
    proofUrls?: boolean
    status?: boolean
    notes?: boolean
    activatedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BillingOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }
  export type BillingOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performer?: boolean | PerformerProfileDefaultArgs<ExtArgs>
  }

  export type $BillingOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillingOrder"
    objects: {
      performer: Prisma.$PerformerProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      performerId: number
      type: $Enums.BillingType
      plan: $Enums.Plan | null
      days: number
      amountRub: number
      proofUrls: string[]
      status: $Enums.BillingStatus
      notes: string | null
      activatedUntil: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["billingOrder"]>
    composites: {}
  }

  type BillingOrderGetPayload<S extends boolean | null | undefined | BillingOrderDefaultArgs> = $Result.GetResult<Prisma.$BillingOrderPayload, S>

  type BillingOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillingOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillingOrderCountAggregateInputType | true
    }

  export interface BillingOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillingOrder'], meta: { name: 'BillingOrder' } }
    /**
     * Find zero or one BillingOrder that matches the filter.
     * @param {BillingOrderFindUniqueArgs} args - Arguments to find a BillingOrder
     * @example
     * // Get one BillingOrder
     * const billingOrder = await prisma.billingOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingOrderFindUniqueArgs>(args: SelectSubset<T, BillingOrderFindUniqueArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BillingOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillingOrderFindUniqueOrThrowArgs} args - Arguments to find a BillingOrder
     * @example
     * // Get one BillingOrder
     * const billingOrder = await prisma.billingOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BillingOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingOrderFindFirstArgs} args - Arguments to find a BillingOrder
     * @example
     * // Get one BillingOrder
     * const billingOrder = await prisma.billingOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingOrderFindFirstArgs>(args?: SelectSubset<T, BillingOrderFindFirstArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BillingOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingOrderFindFirstOrThrowArgs} args - Arguments to find a BillingOrder
     * @example
     * // Get one BillingOrder
     * const billingOrder = await prisma.billingOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BillingOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillingOrders
     * const billingOrders = await prisma.billingOrder.findMany()
     * 
     * // Get first 10 BillingOrders
     * const billingOrders = await prisma.billingOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingOrderWithIdOnly = await prisma.billingOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingOrderFindManyArgs>(args?: SelectSubset<T, BillingOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BillingOrder.
     * @param {BillingOrderCreateArgs} args - Arguments to create a BillingOrder.
     * @example
     * // Create one BillingOrder
     * const BillingOrder = await prisma.billingOrder.create({
     *   data: {
     *     // ... data to create a BillingOrder
     *   }
     * })
     * 
     */
    create<T extends BillingOrderCreateArgs>(args: SelectSubset<T, BillingOrderCreateArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BillingOrders.
     * @param {BillingOrderCreateManyArgs} args - Arguments to create many BillingOrders.
     * @example
     * // Create many BillingOrders
     * const billingOrder = await prisma.billingOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingOrderCreateManyArgs>(args?: SelectSubset<T, BillingOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BillingOrders and returns the data saved in the database.
     * @param {BillingOrderCreateManyAndReturnArgs} args - Arguments to create many BillingOrders.
     * @example
     * // Create many BillingOrders
     * const billingOrder = await prisma.billingOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BillingOrders and only return the `id`
     * const billingOrderWithIdOnly = await prisma.billingOrder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BillingOrder.
     * @param {BillingOrderDeleteArgs} args - Arguments to delete one BillingOrder.
     * @example
     * // Delete one BillingOrder
     * const BillingOrder = await prisma.billingOrder.delete({
     *   where: {
     *     // ... filter to delete one BillingOrder
     *   }
     * })
     * 
     */
    delete<T extends BillingOrderDeleteArgs>(args: SelectSubset<T, BillingOrderDeleteArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BillingOrder.
     * @param {BillingOrderUpdateArgs} args - Arguments to update one BillingOrder.
     * @example
     * // Update one BillingOrder
     * const billingOrder = await prisma.billingOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingOrderUpdateArgs>(args: SelectSubset<T, BillingOrderUpdateArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BillingOrders.
     * @param {BillingOrderDeleteManyArgs} args - Arguments to filter BillingOrders to delete.
     * @example
     * // Delete a few BillingOrders
     * const { count } = await prisma.billingOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingOrderDeleteManyArgs>(args?: SelectSubset<T, BillingOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillingOrders
     * const billingOrder = await prisma.billingOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingOrderUpdateManyArgs>(args: SelectSubset<T, BillingOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BillingOrder.
     * @param {BillingOrderUpsertArgs} args - Arguments to update or create a BillingOrder.
     * @example
     * // Update or create a BillingOrder
     * const billingOrder = await prisma.billingOrder.upsert({
     *   create: {
     *     // ... data to create a BillingOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillingOrder we want to update
     *   }
     * })
     */
    upsert<T extends BillingOrderUpsertArgs>(args: SelectSubset<T, BillingOrderUpsertArgs<ExtArgs>>): Prisma__BillingOrderClient<$Result.GetResult<Prisma.$BillingOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BillingOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingOrderCountArgs} args - Arguments to filter BillingOrders to count.
     * @example
     * // Count the number of BillingOrders
     * const count = await prisma.billingOrder.count({
     *   where: {
     *     // ... the filter for the BillingOrders we want to count
     *   }
     * })
    **/
    count<T extends BillingOrderCountArgs>(
      args?: Subset<T, BillingOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillingOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingOrderAggregateArgs>(args: Subset<T, BillingOrderAggregateArgs>): Prisma.PrismaPromise<GetBillingOrderAggregateType<T>>

    /**
     * Group by BillingOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingOrderGroupByArgs['orderBy'] }
        : { orderBy?: BillingOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillingOrder model
   */
  readonly fields: BillingOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillingOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performer<T extends PerformerProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PerformerProfileDefaultArgs<ExtArgs>>): Prisma__PerformerProfileClient<$Result.GetResult<Prisma.$PerformerProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillingOrder model
   */ 
  interface BillingOrderFieldRefs {
    readonly id: FieldRef<"BillingOrder", 'Int'>
    readonly performerId: FieldRef<"BillingOrder", 'Int'>
    readonly type: FieldRef<"BillingOrder", 'BillingType'>
    readonly plan: FieldRef<"BillingOrder", 'Plan'>
    readonly days: FieldRef<"BillingOrder", 'Int'>
    readonly amountRub: FieldRef<"BillingOrder", 'Int'>
    readonly proofUrls: FieldRef<"BillingOrder", 'String[]'>
    readonly status: FieldRef<"BillingOrder", 'BillingStatus'>
    readonly notes: FieldRef<"BillingOrder", 'String'>
    readonly activatedUntil: FieldRef<"BillingOrder", 'DateTime'>
    readonly createdAt: FieldRef<"BillingOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"BillingOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillingOrder findUnique
   */
  export type BillingOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * Filter, which BillingOrder to fetch.
     */
    where: BillingOrderWhereUniqueInput
  }

  /**
   * BillingOrder findUniqueOrThrow
   */
  export type BillingOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * Filter, which BillingOrder to fetch.
     */
    where: BillingOrderWhereUniqueInput
  }

  /**
   * BillingOrder findFirst
   */
  export type BillingOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * Filter, which BillingOrder to fetch.
     */
    where?: BillingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingOrders to fetch.
     */
    orderBy?: BillingOrderOrderByWithRelationInput | BillingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingOrders.
     */
    cursor?: BillingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingOrders.
     */
    distinct?: BillingOrderScalarFieldEnum | BillingOrderScalarFieldEnum[]
  }

  /**
   * BillingOrder findFirstOrThrow
   */
  export type BillingOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * Filter, which BillingOrder to fetch.
     */
    where?: BillingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingOrders to fetch.
     */
    orderBy?: BillingOrderOrderByWithRelationInput | BillingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingOrders.
     */
    cursor?: BillingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingOrders.
     */
    distinct?: BillingOrderScalarFieldEnum | BillingOrderScalarFieldEnum[]
  }

  /**
   * BillingOrder findMany
   */
  export type BillingOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * Filter, which BillingOrders to fetch.
     */
    where?: BillingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingOrders to fetch.
     */
    orderBy?: BillingOrderOrderByWithRelationInput | BillingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillingOrders.
     */
    cursor?: BillingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingOrders.
     */
    skip?: number
    distinct?: BillingOrderScalarFieldEnum | BillingOrderScalarFieldEnum[]
  }

  /**
   * BillingOrder create
   */
  export type BillingOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a BillingOrder.
     */
    data: XOR<BillingOrderCreateInput, BillingOrderUncheckedCreateInput>
  }

  /**
   * BillingOrder createMany
   */
  export type BillingOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillingOrders.
     */
    data: BillingOrderCreateManyInput | BillingOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BillingOrder createManyAndReturn
   */
  export type BillingOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BillingOrders.
     */
    data: BillingOrderCreateManyInput | BillingOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BillingOrder update
   */
  export type BillingOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a BillingOrder.
     */
    data: XOR<BillingOrderUpdateInput, BillingOrderUncheckedUpdateInput>
    /**
     * Choose, which BillingOrder to update.
     */
    where: BillingOrderWhereUniqueInput
  }

  /**
   * BillingOrder updateMany
   */
  export type BillingOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillingOrders.
     */
    data: XOR<BillingOrderUpdateManyMutationInput, BillingOrderUncheckedUpdateManyInput>
    /**
     * Filter which BillingOrders to update
     */
    where?: BillingOrderWhereInput
  }

  /**
   * BillingOrder upsert
   */
  export type BillingOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the BillingOrder to update in case it exists.
     */
    where: BillingOrderWhereUniqueInput
    /**
     * In case the BillingOrder found by the `where` argument doesn't exist, create a new BillingOrder with this data.
     */
    create: XOR<BillingOrderCreateInput, BillingOrderUncheckedCreateInput>
    /**
     * In case the BillingOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingOrderUpdateInput, BillingOrderUncheckedUpdateInput>
  }

  /**
   * BillingOrder delete
   */
  export type BillingOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
    /**
     * Filter which BillingOrder to delete.
     */
    where: BillingOrderWhereUniqueInput
  }

  /**
   * BillingOrder deleteMany
   */
  export type BillingOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingOrders to delete
     */
    where?: BillingOrderWhereInput
  }

  /**
   * BillingOrder without action
   */
  export type BillingOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingOrder
     */
    select?: BillingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingOrderInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    tgId: 'tgId',
    username: 'username',
    role: 'role',
    ageConfirmed: 'ageConfirmed',
    searchPrefs: 'searchPrefs',
    lastSeenAt: 'lastSeenAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PerformerProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    games: 'games',
    ranks: 'ranks',
    pricePerHour: 'pricePerHour',
    about: 'about',
    voiceSampleUrl: 'voiceSampleUrl',
    photos: 'photos',
    availability: 'availability',
    status: 'status',
    rating: 'rating',
    isBoosted: 'isBoosted',
    boostUntil: 'boostUntil',
    plan: 'plan',
    planUntil: 'planUntil',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PerformerProfileScalarFieldEnum = (typeof PerformerProfileScalarFieldEnum)[keyof typeof PerformerProfileScalarFieldEnum]


  export const KycCheckScalarFieldEnum: {
    id: 'id',
    performerId: 'performerId',
    docType: 'docType',
    docImages: 'docImages',
    selfieUrl: 'selfieUrl',
    status: 'status',
    reason: 'reason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KycCheckScalarFieldEnum = (typeof KycCheckScalarFieldEnum)[keyof typeof KycCheckScalarFieldEnum]


  export const RequestScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    performerId: 'performerId',
    game: 'game',
    durationMin: 'durationMin',
    preferredAt: 'preferredAt',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RequestScalarFieldEnum = (typeof RequestScalarFieldEnum)[keyof typeof RequestScalarFieldEnum]


  export const PaymentMetaScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    method: 'method',
    clientMarkPaid: 'clientMarkPaid',
    performerReceived: 'performerReceived',
    proofUrls: 'proofUrls',
    instructions: 'instructions'
  };

  export type PaymentMetaScalarFieldEnum = (typeof PaymentMetaScalarFieldEnum)[keyof typeof PaymentMetaScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    authorId: 'authorId',
    targetId: 'targetId',
    rating: 'rating',
    text: 'text',
    createdAt: 'createdAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    reporterId: 'reporterId',
    targetUserId: 'targetUserId',
    category: 'category',
    text: 'text',
    attachments: 'attachments',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const BillingOrderScalarFieldEnum: {
    id: 'id',
    performerId: 'performerId',
    type: 'type',
    plan: 'plan',
    days: 'days',
    amountRub: 'amountRub',
    proofUrls: 'proofUrls',
    status: 'status',
    notes: 'notes',
    activatedUntil: 'activatedUntil',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BillingOrderScalarFieldEnum = (typeof BillingOrderScalarFieldEnum)[keyof typeof BillingOrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ListingStatus'
   */
  export type EnumListingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ListingStatus'>
    


  /**
   * Reference to a field of type 'ListingStatus[]'
   */
  export type ListEnumListingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ListingStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Plan'
   */
  export type EnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan'>
    


  /**
   * Reference to a field of type 'Plan[]'
   */
  export type ListEnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan[]'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    


  /**
   * Reference to a field of type 'RequestStatus[]'
   */
  export type ListEnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'BillingType'
   */
  export type EnumBillingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingType'>
    


  /**
   * Reference to a field of type 'BillingType[]'
   */
  export type ListEnumBillingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingType[]'>
    


  /**
   * Reference to a field of type 'BillingStatus'
   */
  export type EnumBillingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingStatus'>
    


  /**
   * Reference to a field of type 'BillingStatus[]'
   */
  export type ListEnumBillingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    tgId?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    ageConfirmed?: BoolFilter<"User"> | boolean
    searchPrefs?: JsonNullableFilter<"User">
    lastSeenAt?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    performerProfile?: XOR<PerformerProfileNullableRelationFilter, PerformerProfileWhereInput> | null
    clientRequests?: RequestListRelationFilter
    performerRequests?: RequestListRelationFilter
    reviewsAuthored?: ReviewListRelationFilter
    reviewsReceived?: ReviewListRelationFilter
    reportsAuthored?: ReportListRelationFilter
    reportsReceived?: ReportListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    tgId?: SortOrder
    username?: SortOrderInput | SortOrder
    role?: SortOrder
    ageConfirmed?: SortOrder
    searchPrefs?: SortOrderInput | SortOrder
    lastSeenAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    performerProfile?: PerformerProfileOrderByWithRelationInput
    clientRequests?: RequestOrderByRelationAggregateInput
    performerRequests?: RequestOrderByRelationAggregateInput
    reviewsAuthored?: ReviewOrderByRelationAggregateInput
    reviewsReceived?: ReviewOrderByRelationAggregateInput
    reportsAuthored?: ReportOrderByRelationAggregateInput
    reportsReceived?: ReportOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tgId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    ageConfirmed?: BoolFilter<"User"> | boolean
    searchPrefs?: JsonNullableFilter<"User">
    lastSeenAt?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    performerProfile?: XOR<PerformerProfileNullableRelationFilter, PerformerProfileWhereInput> | null
    clientRequests?: RequestListRelationFilter
    performerRequests?: RequestListRelationFilter
    reviewsAuthored?: ReviewListRelationFilter
    reviewsReceived?: ReviewListRelationFilter
    reportsAuthored?: ReportListRelationFilter
    reportsReceived?: ReportListRelationFilter
  }, "id" | "tgId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    tgId?: SortOrder
    username?: SortOrderInput | SortOrder
    role?: SortOrder
    ageConfirmed?: SortOrder
    searchPrefs?: SortOrderInput | SortOrder
    lastSeenAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    tgId?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    ageConfirmed?: BoolWithAggregatesFilter<"User"> | boolean
    searchPrefs?: JsonNullableWithAggregatesFilter<"User">
    lastSeenAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PerformerProfileWhereInput = {
    AND?: PerformerProfileWhereInput | PerformerProfileWhereInput[]
    OR?: PerformerProfileWhereInput[]
    NOT?: PerformerProfileWhereInput | PerformerProfileWhereInput[]
    id?: IntFilter<"PerformerProfile"> | number
    userId?: IntFilter<"PerformerProfile"> | number
    games?: StringNullableListFilter<"PerformerProfile">
    ranks?: JsonNullableFilter<"PerformerProfile">
    pricePerHour?: IntFilter<"PerformerProfile"> | number
    about?: StringNullableFilter<"PerformerProfile"> | string | null
    voiceSampleUrl?: StringNullableFilter<"PerformerProfile"> | string | null
    photos?: StringNullableListFilter<"PerformerProfile">
    availability?: JsonNullableFilter<"PerformerProfile">
    status?: EnumListingStatusFilter<"PerformerProfile"> | $Enums.ListingStatus
    rating?: FloatFilter<"PerformerProfile"> | number
    isBoosted?: BoolFilter<"PerformerProfile"> | boolean
    boostUntil?: DateTimeNullableFilter<"PerformerProfile"> | Date | string | null
    plan?: EnumPlanFilter<"PerformerProfile"> | $Enums.Plan
    planUntil?: DateTimeNullableFilter<"PerformerProfile"> | Date | string | null
    createdAt?: DateTimeFilter<"PerformerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PerformerProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    kycChecks?: KycCheckListRelationFilter
    BillingOrder?: BillingOrderListRelationFilter
  }

  export type PerformerProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    games?: SortOrder
    ranks?: SortOrderInput | SortOrder
    pricePerHour?: SortOrder
    about?: SortOrderInput | SortOrder
    voiceSampleUrl?: SortOrderInput | SortOrder
    photos?: SortOrder
    availability?: SortOrderInput | SortOrder
    status?: SortOrder
    rating?: SortOrder
    isBoosted?: SortOrder
    boostUntil?: SortOrderInput | SortOrder
    plan?: SortOrder
    planUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    kycChecks?: KycCheckOrderByRelationAggregateInput
    BillingOrder?: BillingOrderOrderByRelationAggregateInput
  }

  export type PerformerProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: PerformerProfileWhereInput | PerformerProfileWhereInput[]
    OR?: PerformerProfileWhereInput[]
    NOT?: PerformerProfileWhereInput | PerformerProfileWhereInput[]
    games?: StringNullableListFilter<"PerformerProfile">
    ranks?: JsonNullableFilter<"PerformerProfile">
    pricePerHour?: IntFilter<"PerformerProfile"> | number
    about?: StringNullableFilter<"PerformerProfile"> | string | null
    voiceSampleUrl?: StringNullableFilter<"PerformerProfile"> | string | null
    photos?: StringNullableListFilter<"PerformerProfile">
    availability?: JsonNullableFilter<"PerformerProfile">
    status?: EnumListingStatusFilter<"PerformerProfile"> | $Enums.ListingStatus
    rating?: FloatFilter<"PerformerProfile"> | number
    isBoosted?: BoolFilter<"PerformerProfile"> | boolean
    boostUntil?: DateTimeNullableFilter<"PerformerProfile"> | Date | string | null
    plan?: EnumPlanFilter<"PerformerProfile"> | $Enums.Plan
    planUntil?: DateTimeNullableFilter<"PerformerProfile"> | Date | string | null
    createdAt?: DateTimeFilter<"PerformerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PerformerProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    kycChecks?: KycCheckListRelationFilter
    BillingOrder?: BillingOrderListRelationFilter
  }, "id" | "userId">

  export type PerformerProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    games?: SortOrder
    ranks?: SortOrderInput | SortOrder
    pricePerHour?: SortOrder
    about?: SortOrderInput | SortOrder
    voiceSampleUrl?: SortOrderInput | SortOrder
    photos?: SortOrder
    availability?: SortOrderInput | SortOrder
    status?: SortOrder
    rating?: SortOrder
    isBoosted?: SortOrder
    boostUntil?: SortOrderInput | SortOrder
    plan?: SortOrder
    planUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PerformerProfileCountOrderByAggregateInput
    _avg?: PerformerProfileAvgOrderByAggregateInput
    _max?: PerformerProfileMaxOrderByAggregateInput
    _min?: PerformerProfileMinOrderByAggregateInput
    _sum?: PerformerProfileSumOrderByAggregateInput
  }

  export type PerformerProfileScalarWhereWithAggregatesInput = {
    AND?: PerformerProfileScalarWhereWithAggregatesInput | PerformerProfileScalarWhereWithAggregatesInput[]
    OR?: PerformerProfileScalarWhereWithAggregatesInput[]
    NOT?: PerformerProfileScalarWhereWithAggregatesInput | PerformerProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PerformerProfile"> | number
    userId?: IntWithAggregatesFilter<"PerformerProfile"> | number
    games?: StringNullableListFilter<"PerformerProfile">
    ranks?: JsonNullableWithAggregatesFilter<"PerformerProfile">
    pricePerHour?: IntWithAggregatesFilter<"PerformerProfile"> | number
    about?: StringNullableWithAggregatesFilter<"PerformerProfile"> | string | null
    voiceSampleUrl?: StringNullableWithAggregatesFilter<"PerformerProfile"> | string | null
    photos?: StringNullableListFilter<"PerformerProfile">
    availability?: JsonNullableWithAggregatesFilter<"PerformerProfile">
    status?: EnumListingStatusWithAggregatesFilter<"PerformerProfile"> | $Enums.ListingStatus
    rating?: FloatWithAggregatesFilter<"PerformerProfile"> | number
    isBoosted?: BoolWithAggregatesFilter<"PerformerProfile"> | boolean
    boostUntil?: DateTimeNullableWithAggregatesFilter<"PerformerProfile"> | Date | string | null
    plan?: EnumPlanWithAggregatesFilter<"PerformerProfile"> | $Enums.Plan
    planUntil?: DateTimeNullableWithAggregatesFilter<"PerformerProfile"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PerformerProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerformerProfile"> | Date | string
  }

  export type KycCheckWhereInput = {
    AND?: KycCheckWhereInput | KycCheckWhereInput[]
    OR?: KycCheckWhereInput[]
    NOT?: KycCheckWhereInput | KycCheckWhereInput[]
    id?: IntFilter<"KycCheck"> | number
    performerId?: IntFilter<"KycCheck"> | number
    docType?: StringFilter<"KycCheck"> | string
    docImages?: StringNullableListFilter<"KycCheck">
    selfieUrl?: StringNullableFilter<"KycCheck"> | string | null
    status?: StringFilter<"KycCheck"> | string
    reason?: StringNullableFilter<"KycCheck"> | string | null
    createdAt?: DateTimeFilter<"KycCheck"> | Date | string
    updatedAt?: DateTimeFilter<"KycCheck"> | Date | string
    performer?: XOR<PerformerProfileRelationFilter, PerformerProfileWhereInput>
  }

  export type KycCheckOrderByWithRelationInput = {
    id?: SortOrder
    performerId?: SortOrder
    docType?: SortOrder
    docImages?: SortOrder
    selfieUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    performer?: PerformerProfileOrderByWithRelationInput
  }

  export type KycCheckWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KycCheckWhereInput | KycCheckWhereInput[]
    OR?: KycCheckWhereInput[]
    NOT?: KycCheckWhereInput | KycCheckWhereInput[]
    performerId?: IntFilter<"KycCheck"> | number
    docType?: StringFilter<"KycCheck"> | string
    docImages?: StringNullableListFilter<"KycCheck">
    selfieUrl?: StringNullableFilter<"KycCheck"> | string | null
    status?: StringFilter<"KycCheck"> | string
    reason?: StringNullableFilter<"KycCheck"> | string | null
    createdAt?: DateTimeFilter<"KycCheck"> | Date | string
    updatedAt?: DateTimeFilter<"KycCheck"> | Date | string
    performer?: XOR<PerformerProfileRelationFilter, PerformerProfileWhereInput>
  }, "id">

  export type KycCheckOrderByWithAggregationInput = {
    id?: SortOrder
    performerId?: SortOrder
    docType?: SortOrder
    docImages?: SortOrder
    selfieUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KycCheckCountOrderByAggregateInput
    _avg?: KycCheckAvgOrderByAggregateInput
    _max?: KycCheckMaxOrderByAggregateInput
    _min?: KycCheckMinOrderByAggregateInput
    _sum?: KycCheckSumOrderByAggregateInput
  }

  export type KycCheckScalarWhereWithAggregatesInput = {
    AND?: KycCheckScalarWhereWithAggregatesInput | KycCheckScalarWhereWithAggregatesInput[]
    OR?: KycCheckScalarWhereWithAggregatesInput[]
    NOT?: KycCheckScalarWhereWithAggregatesInput | KycCheckScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KycCheck"> | number
    performerId?: IntWithAggregatesFilter<"KycCheck"> | number
    docType?: StringWithAggregatesFilter<"KycCheck"> | string
    docImages?: StringNullableListFilter<"KycCheck">
    selfieUrl?: StringNullableWithAggregatesFilter<"KycCheck"> | string | null
    status?: StringWithAggregatesFilter<"KycCheck"> | string
    reason?: StringNullableWithAggregatesFilter<"KycCheck"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"KycCheck"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KycCheck"> | Date | string
  }

  export type RequestWhereInput = {
    AND?: RequestWhereInput | RequestWhereInput[]
    OR?: RequestWhereInput[]
    NOT?: RequestWhereInput | RequestWhereInput[]
    id?: IntFilter<"Request"> | number
    clientId?: IntFilter<"Request"> | number
    performerId?: IntFilter<"Request"> | number
    game?: StringFilter<"Request"> | string
    durationMin?: IntFilter<"Request"> | number
    preferredAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    status?: EnumRequestStatusFilter<"Request"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"Request"> | Date | string
    updatedAt?: DateTimeFilter<"Request"> | Date | string
    client?: XOR<UserRelationFilter, UserWhereInput>
    performer?: XOR<UserRelationFilter, UserWhereInput>
    paymentMeta?: XOR<PaymentMetaNullableRelationFilter, PaymentMetaWhereInput> | null
    reviews?: ReviewListRelationFilter
  }

  export type RequestOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    performerId?: SortOrder
    game?: SortOrder
    durationMin?: SortOrder
    preferredAt?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: UserOrderByWithRelationInput
    performer?: UserOrderByWithRelationInput
    paymentMeta?: PaymentMetaOrderByWithRelationInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type RequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RequestWhereInput | RequestWhereInput[]
    OR?: RequestWhereInput[]
    NOT?: RequestWhereInput | RequestWhereInput[]
    clientId?: IntFilter<"Request"> | number
    performerId?: IntFilter<"Request"> | number
    game?: StringFilter<"Request"> | string
    durationMin?: IntFilter<"Request"> | number
    preferredAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    status?: EnumRequestStatusFilter<"Request"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"Request"> | Date | string
    updatedAt?: DateTimeFilter<"Request"> | Date | string
    client?: XOR<UserRelationFilter, UserWhereInput>
    performer?: XOR<UserRelationFilter, UserWhereInput>
    paymentMeta?: XOR<PaymentMetaNullableRelationFilter, PaymentMetaWhereInput> | null
    reviews?: ReviewListRelationFilter
  }, "id">

  export type RequestOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    performerId?: SortOrder
    game?: SortOrder
    durationMin?: SortOrder
    preferredAt?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RequestCountOrderByAggregateInput
    _avg?: RequestAvgOrderByAggregateInput
    _max?: RequestMaxOrderByAggregateInput
    _min?: RequestMinOrderByAggregateInput
    _sum?: RequestSumOrderByAggregateInput
  }

  export type RequestScalarWhereWithAggregatesInput = {
    AND?: RequestScalarWhereWithAggregatesInput | RequestScalarWhereWithAggregatesInput[]
    OR?: RequestScalarWhereWithAggregatesInput[]
    NOT?: RequestScalarWhereWithAggregatesInput | RequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Request"> | number
    clientId?: IntWithAggregatesFilter<"Request"> | number
    performerId?: IntWithAggregatesFilter<"Request"> | number
    game?: StringWithAggregatesFilter<"Request"> | string
    durationMin?: IntWithAggregatesFilter<"Request"> | number
    preferredAt?: DateTimeNullableWithAggregatesFilter<"Request"> | Date | string | null
    status?: EnumRequestStatusWithAggregatesFilter<"Request"> | $Enums.RequestStatus
    createdAt?: DateTimeWithAggregatesFilter<"Request"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Request"> | Date | string
  }

  export type PaymentMetaWhereInput = {
    AND?: PaymentMetaWhereInput | PaymentMetaWhereInput[]
    OR?: PaymentMetaWhereInput[]
    NOT?: PaymentMetaWhereInput | PaymentMetaWhereInput[]
    id?: IntFilter<"PaymentMeta"> | number
    requestId?: IntFilter<"PaymentMeta"> | number
    method?: EnumPaymentMethodFilter<"PaymentMeta"> | $Enums.PaymentMethod
    clientMarkPaid?: BoolFilter<"PaymentMeta"> | boolean
    performerReceived?: BoolFilter<"PaymentMeta"> | boolean
    proofUrls?: StringNullableListFilter<"PaymentMeta">
    instructions?: StringNullableFilter<"PaymentMeta"> | string | null
    request?: XOR<RequestRelationFilter, RequestWhereInput>
  }

  export type PaymentMetaOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    method?: SortOrder
    clientMarkPaid?: SortOrder
    performerReceived?: SortOrder
    proofUrls?: SortOrder
    instructions?: SortOrderInput | SortOrder
    request?: RequestOrderByWithRelationInput
  }

  export type PaymentMetaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    requestId?: number
    AND?: PaymentMetaWhereInput | PaymentMetaWhereInput[]
    OR?: PaymentMetaWhereInput[]
    NOT?: PaymentMetaWhereInput | PaymentMetaWhereInput[]
    method?: EnumPaymentMethodFilter<"PaymentMeta"> | $Enums.PaymentMethod
    clientMarkPaid?: BoolFilter<"PaymentMeta"> | boolean
    performerReceived?: BoolFilter<"PaymentMeta"> | boolean
    proofUrls?: StringNullableListFilter<"PaymentMeta">
    instructions?: StringNullableFilter<"PaymentMeta"> | string | null
    request?: XOR<RequestRelationFilter, RequestWhereInput>
  }, "id" | "requestId">

  export type PaymentMetaOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    method?: SortOrder
    clientMarkPaid?: SortOrder
    performerReceived?: SortOrder
    proofUrls?: SortOrder
    instructions?: SortOrderInput | SortOrder
    _count?: PaymentMetaCountOrderByAggregateInput
    _avg?: PaymentMetaAvgOrderByAggregateInput
    _max?: PaymentMetaMaxOrderByAggregateInput
    _min?: PaymentMetaMinOrderByAggregateInput
    _sum?: PaymentMetaSumOrderByAggregateInput
  }

  export type PaymentMetaScalarWhereWithAggregatesInput = {
    AND?: PaymentMetaScalarWhereWithAggregatesInput | PaymentMetaScalarWhereWithAggregatesInput[]
    OR?: PaymentMetaScalarWhereWithAggregatesInput[]
    NOT?: PaymentMetaScalarWhereWithAggregatesInput | PaymentMetaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaymentMeta"> | number
    requestId?: IntWithAggregatesFilter<"PaymentMeta"> | number
    method?: EnumPaymentMethodWithAggregatesFilter<"PaymentMeta"> | $Enums.PaymentMethod
    clientMarkPaid?: BoolWithAggregatesFilter<"PaymentMeta"> | boolean
    performerReceived?: BoolWithAggregatesFilter<"PaymentMeta"> | boolean
    proofUrls?: StringNullableListFilter<"PaymentMeta">
    instructions?: StringNullableWithAggregatesFilter<"PaymentMeta"> | string | null
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    requestId?: IntFilter<"Review"> | number
    authorId?: IntFilter<"Review"> | number
    targetId?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    text?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
    target?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    authorId?: SortOrder
    targetId?: SortOrder
    rating?: SortOrder
    text?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    request?: RequestOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    target?: UserOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    requestId?: IntFilter<"Review"> | number
    authorId?: IntFilter<"Review"> | number
    targetId?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    text?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
    target?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    authorId?: SortOrder
    targetId?: SortOrder
    rating?: SortOrder
    text?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    requestId?: IntWithAggregatesFilter<"Review"> | number
    authorId?: IntWithAggregatesFilter<"Review"> | number
    targetId?: IntWithAggregatesFilter<"Review"> | number
    rating?: IntWithAggregatesFilter<"Review"> | number
    text?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: IntFilter<"Report"> | number
    reporterId?: IntFilter<"Report"> | number
    targetUserId?: IntNullableFilter<"Report"> | number | null
    category?: StringFilter<"Report"> | string
    text?: StringNullableFilter<"Report"> | string | null
    attachments?: StringNullableListFilter<"Report">
    status?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    reporter?: XOR<UserRelationFilter, UserWhereInput>
    targetUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    reporterId?: SortOrder
    targetUserId?: SortOrderInput | SortOrder
    category?: SortOrder
    text?: SortOrderInput | SortOrder
    attachments?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reporter?: UserOrderByWithRelationInput
    targetUser?: UserOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    reporterId?: IntFilter<"Report"> | number
    targetUserId?: IntNullableFilter<"Report"> | number | null
    category?: StringFilter<"Report"> | string
    text?: StringNullableFilter<"Report"> | string | null
    attachments?: StringNullableListFilter<"Report">
    status?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    reporter?: XOR<UserRelationFilter, UserWhereInput>
    targetUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    reporterId?: SortOrder
    targetUserId?: SortOrderInput | SortOrder
    category?: SortOrder
    text?: SortOrderInput | SortOrder
    attachments?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Report"> | number
    reporterId?: IntWithAggregatesFilter<"Report"> | number
    targetUserId?: IntNullableWithAggregatesFilter<"Report"> | number | null
    category?: StringWithAggregatesFilter<"Report"> | string
    text?: StringNullableWithAggregatesFilter<"Report"> | string | null
    attachments?: StringNullableListFilter<"Report">
    status?: StringWithAggregatesFilter<"Report"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
  }

  export type BillingOrderWhereInput = {
    AND?: BillingOrderWhereInput | BillingOrderWhereInput[]
    OR?: BillingOrderWhereInput[]
    NOT?: BillingOrderWhereInput | BillingOrderWhereInput[]
    id?: IntFilter<"BillingOrder"> | number
    performerId?: IntFilter<"BillingOrder"> | number
    type?: EnumBillingTypeFilter<"BillingOrder"> | $Enums.BillingType
    plan?: EnumPlanNullableFilter<"BillingOrder"> | $Enums.Plan | null
    days?: IntFilter<"BillingOrder"> | number
    amountRub?: IntFilter<"BillingOrder"> | number
    proofUrls?: StringNullableListFilter<"BillingOrder">
    status?: EnumBillingStatusFilter<"BillingOrder"> | $Enums.BillingStatus
    notes?: StringNullableFilter<"BillingOrder"> | string | null
    activatedUntil?: DateTimeNullableFilter<"BillingOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"BillingOrder"> | Date | string
    updatedAt?: DateTimeFilter<"BillingOrder"> | Date | string
    performer?: XOR<PerformerProfileRelationFilter, PerformerProfileWhereInput>
  }

  export type BillingOrderOrderByWithRelationInput = {
    id?: SortOrder
    performerId?: SortOrder
    type?: SortOrder
    plan?: SortOrderInput | SortOrder
    days?: SortOrder
    amountRub?: SortOrder
    proofUrls?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    activatedUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    performer?: PerformerProfileOrderByWithRelationInput
  }

  export type BillingOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BillingOrderWhereInput | BillingOrderWhereInput[]
    OR?: BillingOrderWhereInput[]
    NOT?: BillingOrderWhereInput | BillingOrderWhereInput[]
    performerId?: IntFilter<"BillingOrder"> | number
    type?: EnumBillingTypeFilter<"BillingOrder"> | $Enums.BillingType
    plan?: EnumPlanNullableFilter<"BillingOrder"> | $Enums.Plan | null
    days?: IntFilter<"BillingOrder"> | number
    amountRub?: IntFilter<"BillingOrder"> | number
    proofUrls?: StringNullableListFilter<"BillingOrder">
    status?: EnumBillingStatusFilter<"BillingOrder"> | $Enums.BillingStatus
    notes?: StringNullableFilter<"BillingOrder"> | string | null
    activatedUntil?: DateTimeNullableFilter<"BillingOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"BillingOrder"> | Date | string
    updatedAt?: DateTimeFilter<"BillingOrder"> | Date | string
    performer?: XOR<PerformerProfileRelationFilter, PerformerProfileWhereInput>
  }, "id">

  export type BillingOrderOrderByWithAggregationInput = {
    id?: SortOrder
    performerId?: SortOrder
    type?: SortOrder
    plan?: SortOrderInput | SortOrder
    days?: SortOrder
    amountRub?: SortOrder
    proofUrls?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    activatedUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BillingOrderCountOrderByAggregateInput
    _avg?: BillingOrderAvgOrderByAggregateInput
    _max?: BillingOrderMaxOrderByAggregateInput
    _min?: BillingOrderMinOrderByAggregateInput
    _sum?: BillingOrderSumOrderByAggregateInput
  }

  export type BillingOrderScalarWhereWithAggregatesInput = {
    AND?: BillingOrderScalarWhereWithAggregatesInput | BillingOrderScalarWhereWithAggregatesInput[]
    OR?: BillingOrderScalarWhereWithAggregatesInput[]
    NOT?: BillingOrderScalarWhereWithAggregatesInput | BillingOrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BillingOrder"> | number
    performerId?: IntWithAggregatesFilter<"BillingOrder"> | number
    type?: EnumBillingTypeWithAggregatesFilter<"BillingOrder"> | $Enums.BillingType
    plan?: EnumPlanNullableWithAggregatesFilter<"BillingOrder"> | $Enums.Plan | null
    days?: IntWithAggregatesFilter<"BillingOrder"> | number
    amountRub?: IntWithAggregatesFilter<"BillingOrder"> | number
    proofUrls?: StringNullableListFilter<"BillingOrder">
    status?: EnumBillingStatusWithAggregatesFilter<"BillingOrder"> | $Enums.BillingStatus
    notes?: StringNullableWithAggregatesFilter<"BillingOrder"> | string | null
    activatedUntil?: DateTimeNullableWithAggregatesFilter<"BillingOrder"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BillingOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BillingOrder"> | Date | string
  }

  export type UserCreateInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileCreateNestedOneWithoutUserInput
    clientRequests?: RequestCreateNestedManyWithoutClientInput
    performerRequests?: RequestCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileUncheckedCreateNestedOneWithoutUserInput
    clientRequests?: RequestUncheckedCreateNestedManyWithoutClientInput
    performerRequests?: RequestUncheckedCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewUncheckedCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewUncheckedCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportUncheckedCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserUpdateInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUncheckedUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUncheckedUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUncheckedUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUncheckedUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformerProfileCreateInput = {
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPerformerProfileInput
    kycChecks?: KycCheckCreateNestedManyWithoutPerformerInput
    BillingOrder?: BillingOrderCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileUncheckedCreateInput = {
    id?: number
    userId: number
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kycChecks?: KycCheckUncheckedCreateNestedManyWithoutPerformerInput
    BillingOrder?: BillingOrderUncheckedCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileUpdateInput = {
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPerformerProfileNestedInput
    kycChecks?: KycCheckUpdateManyWithoutPerformerNestedInput
    BillingOrder?: BillingOrderUpdateManyWithoutPerformerNestedInput
  }

  export type PerformerProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kycChecks?: KycCheckUncheckedUpdateManyWithoutPerformerNestedInput
    BillingOrder?: BillingOrderUncheckedUpdateManyWithoutPerformerNestedInput
  }

  export type PerformerProfileCreateManyInput = {
    id?: number
    userId: number
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformerProfileUpdateManyMutationInput = {
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformerProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KycCheckCreateInput = {
    docType: string
    docImages?: KycCheckCreatedocImagesInput | string[]
    selfieUrl?: string | null
    status: string
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performer: PerformerProfileCreateNestedOneWithoutKycChecksInput
  }

  export type KycCheckUncheckedCreateInput = {
    id?: number
    performerId: number
    docType: string
    docImages?: KycCheckCreatedocImagesInput | string[]
    selfieUrl?: string | null
    status: string
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KycCheckUpdateInput = {
    docType?: StringFieldUpdateOperationsInput | string
    docImages?: KycCheckUpdatedocImagesInput | string[]
    selfieUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performer?: PerformerProfileUpdateOneRequiredWithoutKycChecksNestedInput
  }

  export type KycCheckUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    docType?: StringFieldUpdateOperationsInput | string
    docImages?: KycCheckUpdatedocImagesInput | string[]
    selfieUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KycCheckCreateManyInput = {
    id?: number
    performerId: number
    docType: string
    docImages?: KycCheckCreatedocImagesInput | string[]
    selfieUrl?: string | null
    status: string
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KycCheckUpdateManyMutationInput = {
    docType?: StringFieldUpdateOperationsInput | string
    docImages?: KycCheckUpdatedocImagesInput | string[]
    selfieUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KycCheckUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    docType?: StringFieldUpdateOperationsInput | string
    docImages?: KycCheckUpdatedocImagesInput | string[]
    selfieUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestCreateInput = {
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: UserCreateNestedOneWithoutClientRequestsInput
    performer: UserCreateNestedOneWithoutPerformerRequestsInput
    paymentMeta?: PaymentMetaCreateNestedOneWithoutRequestInput
    reviews?: ReviewCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateInput = {
    id?: number
    clientId: number
    performerId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMeta?: PaymentMetaUncheckedCreateNestedOneWithoutRequestInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestUpdateInput = {
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutClientRequestsNestedInput
    performer?: UserUpdateOneRequiredWithoutPerformerRequestsNestedInput
    paymentMeta?: PaymentMetaUpdateOneWithoutRequestNestedInput
    reviews?: ReviewUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMeta?: PaymentMetaUncheckedUpdateOneWithoutRequestNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestCreateManyInput = {
    id?: number
    clientId: number
    performerId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestUpdateManyMutationInput = {
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentMetaCreateInput = {
    method?: $Enums.PaymentMethod
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: PaymentMetaCreateproofUrlsInput | string[]
    instructions?: string | null
    request: RequestCreateNestedOneWithoutPaymentMetaInput
  }

  export type PaymentMetaUncheckedCreateInput = {
    id?: number
    requestId: number
    method?: $Enums.PaymentMethod
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: PaymentMetaCreateproofUrlsInput | string[]
    instructions?: string | null
  }

  export type PaymentMetaUpdateInput = {
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    clientMarkPaid?: BoolFieldUpdateOperationsInput | boolean
    performerReceived?: BoolFieldUpdateOperationsInput | boolean
    proofUrls?: PaymentMetaUpdateproofUrlsInput | string[]
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    request?: RequestUpdateOneRequiredWithoutPaymentMetaNestedInput
  }

  export type PaymentMetaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    clientMarkPaid?: BoolFieldUpdateOperationsInput | boolean
    performerReceived?: BoolFieldUpdateOperationsInput | boolean
    proofUrls?: PaymentMetaUpdateproofUrlsInput | string[]
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentMetaCreateManyInput = {
    id?: number
    requestId: number
    method?: $Enums.PaymentMethod
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: PaymentMetaCreateproofUrlsInput | string[]
    instructions?: string | null
  }

  export type PaymentMetaUpdateManyMutationInput = {
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    clientMarkPaid?: BoolFieldUpdateOperationsInput | boolean
    performerReceived?: BoolFieldUpdateOperationsInput | boolean
    proofUrls?: PaymentMetaUpdateproofUrlsInput | string[]
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentMetaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    clientMarkPaid?: BoolFieldUpdateOperationsInput | boolean
    performerReceived?: BoolFieldUpdateOperationsInput | boolean
    proofUrls?: PaymentMetaUpdateproofUrlsInput | string[]
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateInput = {
    rating: number
    text?: string | null
    createdAt?: Date | string
    request: RequestCreateNestedOneWithoutReviewsInput
    author: UserCreateNestedOneWithoutReviewsAuthoredInput
    target: UserCreateNestedOneWithoutReviewsReceivedInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    requestId: number
    authorId: number
    targetId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: RequestUpdateOneRequiredWithoutReviewsNestedInput
    author?: UserUpdateOneRequiredWithoutReviewsAuthoredNestedInput
    target?: UserUpdateOneRequiredWithoutReviewsReceivedNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: number
    requestId: number
    authorId: number
    targetId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportsAuthoredInput
    targetUser?: UserCreateNestedOneWithoutReportsReceivedInput
  }

  export type ReportUncheckedCreateInput = {
    id?: number
    reporterId: number
    targetUserId?: number | null
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportsAuthoredNestedInput
    targetUser?: UserUpdateOneWithoutReportsReceivedNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    targetUserId?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateManyInput = {
    id?: number
    reporterId: number
    targetUserId?: number | null
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    targetUserId?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingOrderCreateInput = {
    type: $Enums.BillingType
    plan?: $Enums.Plan | null
    days: number
    amountRub: number
    proofUrls?: BillingOrderCreateproofUrlsInput | string[]
    status?: $Enums.BillingStatus
    notes?: string | null
    activatedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performer: PerformerProfileCreateNestedOneWithoutBillingOrderInput
  }

  export type BillingOrderUncheckedCreateInput = {
    id?: number
    performerId: number
    type: $Enums.BillingType
    plan?: $Enums.Plan | null
    days: number
    amountRub: number
    proofUrls?: BillingOrderCreateproofUrlsInput | string[]
    status?: $Enums.BillingStatus
    notes?: string | null
    activatedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingOrderUpdateInput = {
    type?: EnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType
    plan?: NullableEnumPlanFieldUpdateOperationsInput | $Enums.Plan | null
    days?: IntFieldUpdateOperationsInput | number
    amountRub?: IntFieldUpdateOperationsInput | number
    proofUrls?: BillingOrderUpdateproofUrlsInput | string[]
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    activatedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performer?: PerformerProfileUpdateOneRequiredWithoutBillingOrderNestedInput
  }

  export type BillingOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    type?: EnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType
    plan?: NullableEnumPlanFieldUpdateOperationsInput | $Enums.Plan | null
    days?: IntFieldUpdateOperationsInput | number
    amountRub?: IntFieldUpdateOperationsInput | number
    proofUrls?: BillingOrderUpdateproofUrlsInput | string[]
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    activatedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingOrderCreateManyInput = {
    id?: number
    performerId: number
    type: $Enums.BillingType
    plan?: $Enums.Plan | null
    days: number
    amountRub: number
    proofUrls?: BillingOrderCreateproofUrlsInput | string[]
    status?: $Enums.BillingStatus
    notes?: string | null
    activatedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingOrderUpdateManyMutationInput = {
    type?: EnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType
    plan?: NullableEnumPlanFieldUpdateOperationsInput | $Enums.Plan | null
    days?: IntFieldUpdateOperationsInput | number
    amountRub?: IntFieldUpdateOperationsInput | number
    proofUrls?: BillingOrderUpdateproofUrlsInput | string[]
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    activatedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    type?: EnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType
    plan?: NullableEnumPlanFieldUpdateOperationsInput | $Enums.Plan | null
    days?: IntFieldUpdateOperationsInput | number
    amountRub?: IntFieldUpdateOperationsInput | number
    proofUrls?: BillingOrderUpdateproofUrlsInput | string[]
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    activatedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PerformerProfileNullableRelationFilter = {
    is?: PerformerProfileWhereInput | null
    isNot?: PerformerProfileWhereInput | null
  }

  export type RequestListRelationFilter = {
    every?: RequestWhereInput
    some?: RequestWhereInput
    none?: RequestWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    tgId?: SortOrder
    username?: SortOrder
    role?: SortOrder
    ageConfirmed?: SortOrder
    searchPrefs?: SortOrder
    lastSeenAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    tgId?: SortOrder
    username?: SortOrder
    role?: SortOrder
    ageConfirmed?: SortOrder
    lastSeenAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    tgId?: SortOrder
    username?: SortOrder
    role?: SortOrder
    ageConfirmed?: SortOrder
    lastSeenAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumListingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListingStatusFilter<$PrismaModel> | $Enums.ListingStatus
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type KycCheckListRelationFilter = {
    every?: KycCheckWhereInput
    some?: KycCheckWhereInput
    none?: KycCheckWhereInput
  }

  export type BillingOrderListRelationFilter = {
    every?: BillingOrderWhereInput
    some?: BillingOrderWhereInput
    none?: BillingOrderWhereInput
  }

  export type KycCheckOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformerProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    games?: SortOrder
    ranks?: SortOrder
    pricePerHour?: SortOrder
    about?: SortOrder
    voiceSampleUrl?: SortOrder
    photos?: SortOrder
    availability?: SortOrder
    status?: SortOrder
    rating?: SortOrder
    isBoosted?: SortOrder
    boostUntil?: SortOrder
    plan?: SortOrder
    planUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PerformerProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pricePerHour?: SortOrder
    rating?: SortOrder
  }

  export type PerformerProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pricePerHour?: SortOrder
    about?: SortOrder
    voiceSampleUrl?: SortOrder
    status?: SortOrder
    rating?: SortOrder
    isBoosted?: SortOrder
    boostUntil?: SortOrder
    plan?: SortOrder
    planUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PerformerProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pricePerHour?: SortOrder
    about?: SortOrder
    voiceSampleUrl?: SortOrder
    status?: SortOrder
    rating?: SortOrder
    isBoosted?: SortOrder
    boostUntil?: SortOrder
    plan?: SortOrder
    planUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PerformerProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pricePerHour?: SortOrder
    rating?: SortOrder
  }

  export type EnumListingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListingStatusWithAggregatesFilter<$PrismaModel> | $Enums.ListingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumListingStatusFilter<$PrismaModel>
    _max?: NestedEnumListingStatusFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type PerformerProfileRelationFilter = {
    is?: PerformerProfileWhereInput
    isNot?: PerformerProfileWhereInput
  }

  export type KycCheckCountOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    docType?: SortOrder
    docImages?: SortOrder
    selfieUrl?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KycCheckAvgOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
  }

  export type KycCheckMaxOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    docType?: SortOrder
    selfieUrl?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KycCheckMinOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    docType?: SortOrder
    selfieUrl?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KycCheckSumOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type PaymentMetaNullableRelationFilter = {
    is?: PaymentMetaWhereInput | null
    isNot?: PaymentMetaWhereInput | null
  }

  export type RequestCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    performerId?: SortOrder
    game?: SortOrder
    durationMin?: SortOrder
    preferredAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    performerId?: SortOrder
    durationMin?: SortOrder
  }

  export type RequestMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    performerId?: SortOrder
    game?: SortOrder
    durationMin?: SortOrder
    preferredAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    performerId?: SortOrder
    game?: SortOrder
    durationMin?: SortOrder
    preferredAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    performerId?: SortOrder
    durationMin?: SortOrder
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type RequestRelationFilter = {
    is?: RequestWhereInput
    isNot?: RequestWhereInput
  }

  export type PaymentMetaCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    method?: SortOrder
    clientMarkPaid?: SortOrder
    performerReceived?: SortOrder
    proofUrls?: SortOrder
    instructions?: SortOrder
  }

  export type PaymentMetaAvgOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
  }

  export type PaymentMetaMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    method?: SortOrder
    clientMarkPaid?: SortOrder
    performerReceived?: SortOrder
    instructions?: SortOrder
  }

  export type PaymentMetaMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    method?: SortOrder
    clientMarkPaid?: SortOrder
    performerReceived?: SortOrder
    instructions?: SortOrder
  }

  export type PaymentMetaSumOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    authorId?: SortOrder
    targetId?: SortOrder
    rating?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    authorId?: SortOrder
    targetId?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    authorId?: SortOrder
    targetId?: SortOrder
    rating?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    authorId?: SortOrder
    targetId?: SortOrder
    rating?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    authorId?: SortOrder
    targetId?: SortOrder
    rating?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    targetUserId?: SortOrder
    category?: SortOrder
    text?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    targetUserId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    targetUserId?: SortOrder
    category?: SortOrder
    text?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    targetUserId?: SortOrder
    category?: SortOrder
    text?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    targetUserId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumBillingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingTypeFilter<$PrismaModel> | $Enums.BillingType
  }

  export type EnumPlanNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel> | null
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanNullableFilter<$PrismaModel> | $Enums.Plan | null
  }

  export type EnumBillingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusFilter<$PrismaModel> | $Enums.BillingStatus
  }

  export type BillingOrderCountOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    type?: SortOrder
    plan?: SortOrder
    days?: SortOrder
    amountRub?: SortOrder
    proofUrls?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    activatedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    days?: SortOrder
    amountRub?: SortOrder
  }

  export type BillingOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    type?: SortOrder
    plan?: SortOrder
    days?: SortOrder
    amountRub?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    activatedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingOrderMinOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    type?: SortOrder
    plan?: SortOrder
    days?: SortOrder
    amountRub?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    activatedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingOrderSumOrderByAggregateInput = {
    id?: SortOrder
    performerId?: SortOrder
    days?: SortOrder
    amountRub?: SortOrder
  }

  export type EnumBillingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingTypeWithAggregatesFilter<$PrismaModel> | $Enums.BillingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingTypeFilter<$PrismaModel>
    _max?: NestedEnumBillingTypeFilter<$PrismaModel>
  }

  export type EnumPlanNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel> | null
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanNullableWithAggregatesFilter<$PrismaModel> | $Enums.Plan | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPlanNullableFilter<$PrismaModel>
    _max?: NestedEnumPlanNullableFilter<$PrismaModel>
  }

  export type EnumBillingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BillingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingStatusFilter<$PrismaModel>
    _max?: NestedEnumBillingStatusFilter<$PrismaModel>
  }

  export type PerformerProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<PerformerProfileCreateWithoutUserInput, PerformerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutUserInput
    connect?: PerformerProfileWhereUniqueInput
  }

  export type RequestCreateNestedManyWithoutClientInput = {
    create?: XOR<RequestCreateWithoutClientInput, RequestUncheckedCreateWithoutClientInput> | RequestCreateWithoutClientInput[] | RequestUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutClientInput | RequestCreateOrConnectWithoutClientInput[]
    createMany?: RequestCreateManyClientInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type RequestCreateNestedManyWithoutPerformerInput = {
    create?: XOR<RequestCreateWithoutPerformerInput, RequestUncheckedCreateWithoutPerformerInput> | RequestCreateWithoutPerformerInput[] | RequestUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutPerformerInput | RequestCreateOrConnectWithoutPerformerInput[]
    createMany?: RequestCreateManyPerformerInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ReviewCreateWithoutAuthorInput, ReviewUncheckedCreateWithoutAuthorInput> | ReviewCreateWithoutAuthorInput[] | ReviewUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuthorInput | ReviewCreateOrConnectWithoutAuthorInput[]
    createMany?: ReviewCreateManyAuthorInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutTargetInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutReporterInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<ReportCreateWithoutTargetUserInput, ReportUncheckedCreateWithoutTargetUserInput> | ReportCreateWithoutTargetUserInput[] | ReportUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTargetUserInput | ReportCreateOrConnectWithoutTargetUserInput[]
    createMany?: ReportCreateManyTargetUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type PerformerProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PerformerProfileCreateWithoutUserInput, PerformerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutUserInput
    connect?: PerformerProfileWhereUniqueInput
  }

  export type RequestUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<RequestCreateWithoutClientInput, RequestUncheckedCreateWithoutClientInput> | RequestCreateWithoutClientInput[] | RequestUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutClientInput | RequestCreateOrConnectWithoutClientInput[]
    createMany?: RequestCreateManyClientInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type RequestUncheckedCreateNestedManyWithoutPerformerInput = {
    create?: XOR<RequestCreateWithoutPerformerInput, RequestUncheckedCreateWithoutPerformerInput> | RequestCreateWithoutPerformerInput[] | RequestUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutPerformerInput | RequestCreateOrConnectWithoutPerformerInput[]
    createMany?: RequestCreateManyPerformerInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ReviewCreateWithoutAuthorInput, ReviewUncheckedCreateWithoutAuthorInput> | ReviewCreateWithoutAuthorInput[] | ReviewUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuthorInput | ReviewCreateOrConnectWithoutAuthorInput[]
    createMany?: ReviewCreateManyAuthorInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutTargetInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutReporterInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<ReportCreateWithoutTargetUserInput, ReportUncheckedCreateWithoutTargetUserInput> | ReportCreateWithoutTargetUserInput[] | ReportUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTargetUserInput | ReportCreateOrConnectWithoutTargetUserInput[]
    createMany?: ReportCreateManyTargetUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PerformerProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<PerformerProfileCreateWithoutUserInput, PerformerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutUserInput
    upsert?: PerformerProfileUpsertWithoutUserInput
    disconnect?: PerformerProfileWhereInput | boolean
    delete?: PerformerProfileWhereInput | boolean
    connect?: PerformerProfileWhereUniqueInput
    update?: XOR<XOR<PerformerProfileUpdateToOneWithWhereWithoutUserInput, PerformerProfileUpdateWithoutUserInput>, PerformerProfileUncheckedUpdateWithoutUserInput>
  }

  export type RequestUpdateManyWithoutClientNestedInput = {
    create?: XOR<RequestCreateWithoutClientInput, RequestUncheckedCreateWithoutClientInput> | RequestCreateWithoutClientInput[] | RequestUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutClientInput | RequestCreateOrConnectWithoutClientInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutClientInput | RequestUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: RequestCreateManyClientInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutClientInput | RequestUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutClientInput | RequestUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type RequestUpdateManyWithoutPerformerNestedInput = {
    create?: XOR<RequestCreateWithoutPerformerInput, RequestUncheckedCreateWithoutPerformerInput> | RequestCreateWithoutPerformerInput[] | RequestUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutPerformerInput | RequestCreateOrConnectWithoutPerformerInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutPerformerInput | RequestUpsertWithWhereUniqueWithoutPerformerInput[]
    createMany?: RequestCreateManyPerformerInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutPerformerInput | RequestUpdateWithWhereUniqueWithoutPerformerInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutPerformerInput | RequestUpdateManyWithWhereWithoutPerformerInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ReviewCreateWithoutAuthorInput, ReviewUncheckedCreateWithoutAuthorInput> | ReviewCreateWithoutAuthorInput[] | ReviewUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuthorInput | ReviewCreateOrConnectWithoutAuthorInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAuthorInput | ReviewUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ReviewCreateManyAuthorInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAuthorInput | ReviewUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAuthorInput | ReviewUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutTargetNestedInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutTargetInput | ReviewUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutTargetInput | ReviewUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutTargetInput | ReviewUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutReporterNestedInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutReporterInput | ReportUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutReporterInput | ReportUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutReporterInput | ReportUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<ReportCreateWithoutTargetUserInput, ReportUncheckedCreateWithoutTargetUserInput> | ReportCreateWithoutTargetUserInput[] | ReportUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTargetUserInput | ReportCreateOrConnectWithoutTargetUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutTargetUserInput | ReportUpsertWithWhereUniqueWithoutTargetUserInput[]
    createMany?: ReportCreateManyTargetUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutTargetUserInput | ReportUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutTargetUserInput | ReportUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PerformerProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PerformerProfileCreateWithoutUserInput, PerformerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutUserInput
    upsert?: PerformerProfileUpsertWithoutUserInput
    disconnect?: PerformerProfileWhereInput | boolean
    delete?: PerformerProfileWhereInput | boolean
    connect?: PerformerProfileWhereUniqueInput
    update?: XOR<XOR<PerformerProfileUpdateToOneWithWhereWithoutUserInput, PerformerProfileUpdateWithoutUserInput>, PerformerProfileUncheckedUpdateWithoutUserInput>
  }

  export type RequestUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<RequestCreateWithoutClientInput, RequestUncheckedCreateWithoutClientInput> | RequestCreateWithoutClientInput[] | RequestUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutClientInput | RequestCreateOrConnectWithoutClientInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutClientInput | RequestUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: RequestCreateManyClientInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutClientInput | RequestUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutClientInput | RequestUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type RequestUncheckedUpdateManyWithoutPerformerNestedInput = {
    create?: XOR<RequestCreateWithoutPerformerInput, RequestUncheckedCreateWithoutPerformerInput> | RequestCreateWithoutPerformerInput[] | RequestUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutPerformerInput | RequestCreateOrConnectWithoutPerformerInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutPerformerInput | RequestUpsertWithWhereUniqueWithoutPerformerInput[]
    createMany?: RequestCreateManyPerformerInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutPerformerInput | RequestUpdateWithWhereUniqueWithoutPerformerInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutPerformerInput | RequestUpdateManyWithWhereWithoutPerformerInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ReviewCreateWithoutAuthorInput, ReviewUncheckedCreateWithoutAuthorInput> | ReviewCreateWithoutAuthorInput[] | ReviewUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuthorInput | ReviewCreateOrConnectWithoutAuthorInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAuthorInput | ReviewUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ReviewCreateManyAuthorInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAuthorInput | ReviewUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAuthorInput | ReviewUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutTargetNestedInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutTargetInput | ReviewUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutTargetInput | ReviewUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutTargetInput | ReviewUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutReporterNestedInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutReporterInput | ReportUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutReporterInput | ReportUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutReporterInput | ReportUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<ReportCreateWithoutTargetUserInput, ReportUncheckedCreateWithoutTargetUserInput> | ReportCreateWithoutTargetUserInput[] | ReportUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTargetUserInput | ReportCreateOrConnectWithoutTargetUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutTargetUserInput | ReportUpsertWithWhereUniqueWithoutTargetUserInput[]
    createMany?: ReportCreateManyTargetUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutTargetUserInput | ReportUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutTargetUserInput | ReportUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type PerformerProfileCreategamesInput = {
    set: string[]
  }

  export type PerformerProfileCreatephotosInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutPerformerProfileInput = {
    create?: XOR<UserCreateWithoutPerformerProfileInput, UserUncheckedCreateWithoutPerformerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformerProfileInput
    connect?: UserWhereUniqueInput
  }

  export type KycCheckCreateNestedManyWithoutPerformerInput = {
    create?: XOR<KycCheckCreateWithoutPerformerInput, KycCheckUncheckedCreateWithoutPerformerInput> | KycCheckCreateWithoutPerformerInput[] | KycCheckUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: KycCheckCreateOrConnectWithoutPerformerInput | KycCheckCreateOrConnectWithoutPerformerInput[]
    createMany?: KycCheckCreateManyPerformerInputEnvelope
    connect?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
  }

  export type BillingOrderCreateNestedManyWithoutPerformerInput = {
    create?: XOR<BillingOrderCreateWithoutPerformerInput, BillingOrderUncheckedCreateWithoutPerformerInput> | BillingOrderCreateWithoutPerformerInput[] | BillingOrderUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: BillingOrderCreateOrConnectWithoutPerformerInput | BillingOrderCreateOrConnectWithoutPerformerInput[]
    createMany?: BillingOrderCreateManyPerformerInputEnvelope
    connect?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
  }

  export type KycCheckUncheckedCreateNestedManyWithoutPerformerInput = {
    create?: XOR<KycCheckCreateWithoutPerformerInput, KycCheckUncheckedCreateWithoutPerformerInput> | KycCheckCreateWithoutPerformerInput[] | KycCheckUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: KycCheckCreateOrConnectWithoutPerformerInput | KycCheckCreateOrConnectWithoutPerformerInput[]
    createMany?: KycCheckCreateManyPerformerInputEnvelope
    connect?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
  }

  export type BillingOrderUncheckedCreateNestedManyWithoutPerformerInput = {
    create?: XOR<BillingOrderCreateWithoutPerformerInput, BillingOrderUncheckedCreateWithoutPerformerInput> | BillingOrderCreateWithoutPerformerInput[] | BillingOrderUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: BillingOrderCreateOrConnectWithoutPerformerInput | BillingOrderCreateOrConnectWithoutPerformerInput[]
    createMany?: BillingOrderCreateManyPerformerInputEnvelope
    connect?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
  }

  export type PerformerProfileUpdategamesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PerformerProfileUpdatephotosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumListingStatusFieldUpdateOperationsInput = {
    set?: $Enums.ListingStatus
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumPlanFieldUpdateOperationsInput = {
    set?: $Enums.Plan
  }

  export type UserUpdateOneRequiredWithoutPerformerProfileNestedInput = {
    create?: XOR<UserCreateWithoutPerformerProfileInput, UserUncheckedCreateWithoutPerformerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformerProfileInput
    upsert?: UserUpsertWithoutPerformerProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPerformerProfileInput, UserUpdateWithoutPerformerProfileInput>, UserUncheckedUpdateWithoutPerformerProfileInput>
  }

  export type KycCheckUpdateManyWithoutPerformerNestedInput = {
    create?: XOR<KycCheckCreateWithoutPerformerInput, KycCheckUncheckedCreateWithoutPerformerInput> | KycCheckCreateWithoutPerformerInput[] | KycCheckUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: KycCheckCreateOrConnectWithoutPerformerInput | KycCheckCreateOrConnectWithoutPerformerInput[]
    upsert?: KycCheckUpsertWithWhereUniqueWithoutPerformerInput | KycCheckUpsertWithWhereUniqueWithoutPerformerInput[]
    createMany?: KycCheckCreateManyPerformerInputEnvelope
    set?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    disconnect?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    delete?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    connect?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    update?: KycCheckUpdateWithWhereUniqueWithoutPerformerInput | KycCheckUpdateWithWhereUniqueWithoutPerformerInput[]
    updateMany?: KycCheckUpdateManyWithWhereWithoutPerformerInput | KycCheckUpdateManyWithWhereWithoutPerformerInput[]
    deleteMany?: KycCheckScalarWhereInput | KycCheckScalarWhereInput[]
  }

  export type BillingOrderUpdateManyWithoutPerformerNestedInput = {
    create?: XOR<BillingOrderCreateWithoutPerformerInput, BillingOrderUncheckedCreateWithoutPerformerInput> | BillingOrderCreateWithoutPerformerInput[] | BillingOrderUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: BillingOrderCreateOrConnectWithoutPerformerInput | BillingOrderCreateOrConnectWithoutPerformerInput[]
    upsert?: BillingOrderUpsertWithWhereUniqueWithoutPerformerInput | BillingOrderUpsertWithWhereUniqueWithoutPerformerInput[]
    createMany?: BillingOrderCreateManyPerformerInputEnvelope
    set?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    disconnect?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    delete?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    connect?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    update?: BillingOrderUpdateWithWhereUniqueWithoutPerformerInput | BillingOrderUpdateWithWhereUniqueWithoutPerformerInput[]
    updateMany?: BillingOrderUpdateManyWithWhereWithoutPerformerInput | BillingOrderUpdateManyWithWhereWithoutPerformerInput[]
    deleteMany?: BillingOrderScalarWhereInput | BillingOrderScalarWhereInput[]
  }

  export type KycCheckUncheckedUpdateManyWithoutPerformerNestedInput = {
    create?: XOR<KycCheckCreateWithoutPerformerInput, KycCheckUncheckedCreateWithoutPerformerInput> | KycCheckCreateWithoutPerformerInput[] | KycCheckUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: KycCheckCreateOrConnectWithoutPerformerInput | KycCheckCreateOrConnectWithoutPerformerInput[]
    upsert?: KycCheckUpsertWithWhereUniqueWithoutPerformerInput | KycCheckUpsertWithWhereUniqueWithoutPerformerInput[]
    createMany?: KycCheckCreateManyPerformerInputEnvelope
    set?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    disconnect?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    delete?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    connect?: KycCheckWhereUniqueInput | KycCheckWhereUniqueInput[]
    update?: KycCheckUpdateWithWhereUniqueWithoutPerformerInput | KycCheckUpdateWithWhereUniqueWithoutPerformerInput[]
    updateMany?: KycCheckUpdateManyWithWhereWithoutPerformerInput | KycCheckUpdateManyWithWhereWithoutPerformerInput[]
    deleteMany?: KycCheckScalarWhereInput | KycCheckScalarWhereInput[]
  }

  export type BillingOrderUncheckedUpdateManyWithoutPerformerNestedInput = {
    create?: XOR<BillingOrderCreateWithoutPerformerInput, BillingOrderUncheckedCreateWithoutPerformerInput> | BillingOrderCreateWithoutPerformerInput[] | BillingOrderUncheckedCreateWithoutPerformerInput[]
    connectOrCreate?: BillingOrderCreateOrConnectWithoutPerformerInput | BillingOrderCreateOrConnectWithoutPerformerInput[]
    upsert?: BillingOrderUpsertWithWhereUniqueWithoutPerformerInput | BillingOrderUpsertWithWhereUniqueWithoutPerformerInput[]
    createMany?: BillingOrderCreateManyPerformerInputEnvelope
    set?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    disconnect?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    delete?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    connect?: BillingOrderWhereUniqueInput | BillingOrderWhereUniqueInput[]
    update?: BillingOrderUpdateWithWhereUniqueWithoutPerformerInput | BillingOrderUpdateWithWhereUniqueWithoutPerformerInput[]
    updateMany?: BillingOrderUpdateManyWithWhereWithoutPerformerInput | BillingOrderUpdateManyWithWhereWithoutPerformerInput[]
    deleteMany?: BillingOrderScalarWhereInput | BillingOrderScalarWhereInput[]
  }

  export type KycCheckCreatedocImagesInput = {
    set: string[]
  }

  export type PerformerProfileCreateNestedOneWithoutKycChecksInput = {
    create?: XOR<PerformerProfileCreateWithoutKycChecksInput, PerformerProfileUncheckedCreateWithoutKycChecksInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutKycChecksInput
    connect?: PerformerProfileWhereUniqueInput
  }

  export type KycCheckUpdatedocImagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PerformerProfileUpdateOneRequiredWithoutKycChecksNestedInput = {
    create?: XOR<PerformerProfileCreateWithoutKycChecksInput, PerformerProfileUncheckedCreateWithoutKycChecksInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutKycChecksInput
    upsert?: PerformerProfileUpsertWithoutKycChecksInput
    connect?: PerformerProfileWhereUniqueInput
    update?: XOR<XOR<PerformerProfileUpdateToOneWithWhereWithoutKycChecksInput, PerformerProfileUpdateWithoutKycChecksInput>, PerformerProfileUncheckedUpdateWithoutKycChecksInput>
  }

  export type UserCreateNestedOneWithoutClientRequestsInput = {
    create?: XOR<UserCreateWithoutClientRequestsInput, UserUncheckedCreateWithoutClientRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPerformerRequestsInput = {
    create?: XOR<UserCreateWithoutPerformerRequestsInput, UserUncheckedCreateWithoutPerformerRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformerRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type PaymentMetaCreateNestedOneWithoutRequestInput = {
    create?: XOR<PaymentMetaCreateWithoutRequestInput, PaymentMetaUncheckedCreateWithoutRequestInput>
    connectOrCreate?: PaymentMetaCreateOrConnectWithoutRequestInput
    connect?: PaymentMetaWhereUniqueInput
  }

  export type ReviewCreateNestedManyWithoutRequestInput = {
    create?: XOR<ReviewCreateWithoutRequestInput, ReviewUncheckedCreateWithoutRequestInput> | ReviewCreateWithoutRequestInput[] | ReviewUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRequestInput | ReviewCreateOrConnectWithoutRequestInput[]
    createMany?: ReviewCreateManyRequestInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type PaymentMetaUncheckedCreateNestedOneWithoutRequestInput = {
    create?: XOR<PaymentMetaCreateWithoutRequestInput, PaymentMetaUncheckedCreateWithoutRequestInput>
    connectOrCreate?: PaymentMetaCreateOrConnectWithoutRequestInput
    connect?: PaymentMetaWhereUniqueInput
  }

  export type ReviewUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<ReviewCreateWithoutRequestInput, ReviewUncheckedCreateWithoutRequestInput> | ReviewCreateWithoutRequestInput[] | ReviewUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRequestInput | ReviewCreateOrConnectWithoutRequestInput[]
    createMany?: ReviewCreateManyRequestInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type UserUpdateOneRequiredWithoutClientRequestsNestedInput = {
    create?: XOR<UserCreateWithoutClientRequestsInput, UserUncheckedCreateWithoutClientRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientRequestsInput
    upsert?: UserUpsertWithoutClientRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClientRequestsInput, UserUpdateWithoutClientRequestsInput>, UserUncheckedUpdateWithoutClientRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutPerformerRequestsNestedInput = {
    create?: XOR<UserCreateWithoutPerformerRequestsInput, UserUncheckedCreateWithoutPerformerRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformerRequestsInput
    upsert?: UserUpsertWithoutPerformerRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPerformerRequestsInput, UserUpdateWithoutPerformerRequestsInput>, UserUncheckedUpdateWithoutPerformerRequestsInput>
  }

  export type PaymentMetaUpdateOneWithoutRequestNestedInput = {
    create?: XOR<PaymentMetaCreateWithoutRequestInput, PaymentMetaUncheckedCreateWithoutRequestInput>
    connectOrCreate?: PaymentMetaCreateOrConnectWithoutRequestInput
    upsert?: PaymentMetaUpsertWithoutRequestInput
    disconnect?: PaymentMetaWhereInput | boolean
    delete?: PaymentMetaWhereInput | boolean
    connect?: PaymentMetaWhereUniqueInput
    update?: XOR<XOR<PaymentMetaUpdateToOneWithWhereWithoutRequestInput, PaymentMetaUpdateWithoutRequestInput>, PaymentMetaUncheckedUpdateWithoutRequestInput>
  }

  export type ReviewUpdateManyWithoutRequestNestedInput = {
    create?: XOR<ReviewCreateWithoutRequestInput, ReviewUncheckedCreateWithoutRequestInput> | ReviewCreateWithoutRequestInput[] | ReviewUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRequestInput | ReviewCreateOrConnectWithoutRequestInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutRequestInput | ReviewUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: ReviewCreateManyRequestInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutRequestInput | ReviewUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutRequestInput | ReviewUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type PaymentMetaUncheckedUpdateOneWithoutRequestNestedInput = {
    create?: XOR<PaymentMetaCreateWithoutRequestInput, PaymentMetaUncheckedCreateWithoutRequestInput>
    connectOrCreate?: PaymentMetaCreateOrConnectWithoutRequestInput
    upsert?: PaymentMetaUpsertWithoutRequestInput
    disconnect?: PaymentMetaWhereInput | boolean
    delete?: PaymentMetaWhereInput | boolean
    connect?: PaymentMetaWhereUniqueInput
    update?: XOR<XOR<PaymentMetaUpdateToOneWithWhereWithoutRequestInput, PaymentMetaUpdateWithoutRequestInput>, PaymentMetaUncheckedUpdateWithoutRequestInput>
  }

  export type ReviewUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<ReviewCreateWithoutRequestInput, ReviewUncheckedCreateWithoutRequestInput> | ReviewCreateWithoutRequestInput[] | ReviewUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRequestInput | ReviewCreateOrConnectWithoutRequestInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutRequestInput | ReviewUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: ReviewCreateManyRequestInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutRequestInput | ReviewUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutRequestInput | ReviewUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type PaymentMetaCreateproofUrlsInput = {
    set: string[]
  }

  export type RequestCreateNestedOneWithoutPaymentMetaInput = {
    create?: XOR<RequestCreateWithoutPaymentMetaInput, RequestUncheckedCreateWithoutPaymentMetaInput>
    connectOrCreate?: RequestCreateOrConnectWithoutPaymentMetaInput
    connect?: RequestWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type PaymentMetaUpdateproofUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RequestUpdateOneRequiredWithoutPaymentMetaNestedInput = {
    create?: XOR<RequestCreateWithoutPaymentMetaInput, RequestUncheckedCreateWithoutPaymentMetaInput>
    connectOrCreate?: RequestCreateOrConnectWithoutPaymentMetaInput
    upsert?: RequestUpsertWithoutPaymentMetaInput
    connect?: RequestWhereUniqueInput
    update?: XOR<XOR<RequestUpdateToOneWithWhereWithoutPaymentMetaInput, RequestUpdateWithoutPaymentMetaInput>, RequestUncheckedUpdateWithoutPaymentMetaInput>
  }

  export type RequestCreateNestedOneWithoutReviewsInput = {
    create?: XOR<RequestCreateWithoutReviewsInput, RequestUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutReviewsInput
    connect?: RequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsAuthoredInput = {
    create?: XOR<UserCreateWithoutReviewsAuthoredInput, UserUncheckedCreateWithoutReviewsAuthoredInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsAuthoredInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsReceivedInput = {
    create?: XOR<UserCreateWithoutReviewsReceivedInput, UserUncheckedCreateWithoutReviewsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type RequestUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<RequestCreateWithoutReviewsInput, RequestUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutReviewsInput
    upsert?: RequestUpsertWithoutReviewsInput
    connect?: RequestWhereUniqueInput
    update?: XOR<XOR<RequestUpdateToOneWithWhereWithoutReviewsInput, RequestUpdateWithoutReviewsInput>, RequestUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsAuthoredNestedInput = {
    create?: XOR<UserCreateWithoutReviewsAuthoredInput, UserUncheckedCreateWithoutReviewsAuthoredInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsAuthoredInput
    upsert?: UserUpsertWithoutReviewsAuthoredInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsAuthoredInput, UserUpdateWithoutReviewsAuthoredInput>, UserUncheckedUpdateWithoutReviewsAuthoredInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutReviewsReceivedInput, UserUncheckedCreateWithoutReviewsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsReceivedInput
    upsert?: UserUpsertWithoutReviewsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsReceivedInput, UserUpdateWithoutReviewsReceivedInput>, UserUncheckedUpdateWithoutReviewsReceivedInput>
  }

  export type ReportCreateattachmentsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutReportsAuthoredInput = {
    create?: XOR<UserCreateWithoutReportsAuthoredInput, UserUncheckedCreateWithoutReportsAuthoredInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsAuthoredInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReportsReceivedInput = {
    create?: XOR<UserCreateWithoutReportsReceivedInput, UserUncheckedCreateWithoutReportsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type ReportUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutReportsAuthoredNestedInput = {
    create?: XOR<UserCreateWithoutReportsAuthoredInput, UserUncheckedCreateWithoutReportsAuthoredInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsAuthoredInput
    upsert?: UserUpsertWithoutReportsAuthoredInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsAuthoredInput, UserUpdateWithoutReportsAuthoredInput>, UserUncheckedUpdateWithoutReportsAuthoredInput>
  }

  export type UserUpdateOneWithoutReportsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutReportsReceivedInput, UserUncheckedCreateWithoutReportsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsReceivedInput
    upsert?: UserUpsertWithoutReportsReceivedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsReceivedInput, UserUpdateWithoutReportsReceivedInput>, UserUncheckedUpdateWithoutReportsReceivedInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BillingOrderCreateproofUrlsInput = {
    set: string[]
  }

  export type PerformerProfileCreateNestedOneWithoutBillingOrderInput = {
    create?: XOR<PerformerProfileCreateWithoutBillingOrderInput, PerformerProfileUncheckedCreateWithoutBillingOrderInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutBillingOrderInput
    connect?: PerformerProfileWhereUniqueInput
  }

  export type EnumBillingTypeFieldUpdateOperationsInput = {
    set?: $Enums.BillingType
  }

  export type NullableEnumPlanFieldUpdateOperationsInput = {
    set?: $Enums.Plan | null
  }

  export type BillingOrderUpdateproofUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumBillingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BillingStatus
  }

  export type PerformerProfileUpdateOneRequiredWithoutBillingOrderNestedInput = {
    create?: XOR<PerformerProfileCreateWithoutBillingOrderInput, PerformerProfileUncheckedCreateWithoutBillingOrderInput>
    connectOrCreate?: PerformerProfileCreateOrConnectWithoutBillingOrderInput
    upsert?: PerformerProfileUpsertWithoutBillingOrderInput
    connect?: PerformerProfileWhereUniqueInput
    update?: XOR<XOR<PerformerProfileUpdateToOneWithWhereWithoutBillingOrderInput, PerformerProfileUpdateWithoutBillingOrderInput>, PerformerProfileUncheckedUpdateWithoutBillingOrderInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumListingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListingStatusFilter<$PrismaModel> | $Enums.ListingStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type NestedEnumListingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumListingStatusWithAggregatesFilter<$PrismaModel> | $Enums.ListingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumListingStatusFilter<$PrismaModel>
    _max?: NestedEnumListingStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumBillingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingTypeFilter<$PrismaModel> | $Enums.BillingType
  }

  export type NestedEnumPlanNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel> | null
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanNullableFilter<$PrismaModel> | $Enums.Plan | null
  }

  export type NestedEnumBillingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusFilter<$PrismaModel> | $Enums.BillingStatus
  }

  export type NestedEnumBillingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingTypeWithAggregatesFilter<$PrismaModel> | $Enums.BillingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingTypeFilter<$PrismaModel>
    _max?: NestedEnumBillingTypeFilter<$PrismaModel>
  }

  export type NestedEnumPlanNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel> | null
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanNullableWithAggregatesFilter<$PrismaModel> | $Enums.Plan | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPlanNullableFilter<$PrismaModel>
    _max?: NestedEnumPlanNullableFilter<$PrismaModel>
  }

  export type NestedEnumBillingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BillingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingStatusFilter<$PrismaModel>
    _max?: NestedEnumBillingStatusFilter<$PrismaModel>
  }

  export type PerformerProfileCreateWithoutUserInput = {
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kycChecks?: KycCheckCreateNestedManyWithoutPerformerInput
    BillingOrder?: BillingOrderCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileUncheckedCreateWithoutUserInput = {
    id?: number
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kycChecks?: KycCheckUncheckedCreateNestedManyWithoutPerformerInput
    BillingOrder?: BillingOrderUncheckedCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileCreateOrConnectWithoutUserInput = {
    where: PerformerProfileWhereUniqueInput
    create: XOR<PerformerProfileCreateWithoutUserInput, PerformerProfileUncheckedCreateWithoutUserInput>
  }

  export type RequestCreateWithoutClientInput = {
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    performer: UserCreateNestedOneWithoutPerformerRequestsInput
    paymentMeta?: PaymentMetaCreateNestedOneWithoutRequestInput
    reviews?: ReviewCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutClientInput = {
    id?: number
    performerId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMeta?: PaymentMetaUncheckedCreateNestedOneWithoutRequestInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutClientInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutClientInput, RequestUncheckedCreateWithoutClientInput>
  }

  export type RequestCreateManyClientInputEnvelope = {
    data: RequestCreateManyClientInput | RequestCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type RequestCreateWithoutPerformerInput = {
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: UserCreateNestedOneWithoutClientRequestsInput
    paymentMeta?: PaymentMetaCreateNestedOneWithoutRequestInput
    reviews?: ReviewCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutPerformerInput = {
    id?: number
    clientId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMeta?: PaymentMetaUncheckedCreateNestedOneWithoutRequestInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutPerformerInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutPerformerInput, RequestUncheckedCreateWithoutPerformerInput>
  }

  export type RequestCreateManyPerformerInputEnvelope = {
    data: RequestCreateManyPerformerInput | RequestCreateManyPerformerInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutAuthorInput = {
    rating: number
    text?: string | null
    createdAt?: Date | string
    request: RequestCreateNestedOneWithoutReviewsInput
    target: UserCreateNestedOneWithoutReviewsReceivedInput
  }

  export type ReviewUncheckedCreateWithoutAuthorInput = {
    id?: number
    requestId: number
    targetId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutAuthorInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutAuthorInput, ReviewUncheckedCreateWithoutAuthorInput>
  }

  export type ReviewCreateManyAuthorInputEnvelope = {
    data: ReviewCreateManyAuthorInput | ReviewCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutTargetInput = {
    rating: number
    text?: string | null
    createdAt?: Date | string
    request: RequestCreateNestedOneWithoutReviewsInput
    author: UserCreateNestedOneWithoutReviewsAuthoredInput
  }

  export type ReviewUncheckedCreateWithoutTargetInput = {
    id?: number
    requestId: number
    authorId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutTargetInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput>
  }

  export type ReviewCreateManyTargetInputEnvelope = {
    data: ReviewCreateManyTargetInput | ReviewCreateManyTargetInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutReporterInput = {
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    targetUser?: UserCreateNestedOneWithoutReportsReceivedInput
  }

  export type ReportUncheckedCreateWithoutReporterInput = {
    id?: number
    targetUserId?: number | null
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutReporterInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput>
  }

  export type ReportCreateManyReporterInputEnvelope = {
    data: ReportCreateManyReporterInput | ReportCreateManyReporterInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutTargetUserInput = {
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportsAuthoredInput
  }

  export type ReportUncheckedCreateWithoutTargetUserInput = {
    id?: number
    reporterId: number
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutTargetUserInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutTargetUserInput, ReportUncheckedCreateWithoutTargetUserInput>
  }

  export type ReportCreateManyTargetUserInputEnvelope = {
    data: ReportCreateManyTargetUserInput | ReportCreateManyTargetUserInput[]
    skipDuplicates?: boolean
  }

  export type PerformerProfileUpsertWithoutUserInput = {
    update: XOR<PerformerProfileUpdateWithoutUserInput, PerformerProfileUncheckedUpdateWithoutUserInput>
    create: XOR<PerformerProfileCreateWithoutUserInput, PerformerProfileUncheckedCreateWithoutUserInput>
    where?: PerformerProfileWhereInput
  }

  export type PerformerProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: PerformerProfileWhereInput
    data: XOR<PerformerProfileUpdateWithoutUserInput, PerformerProfileUncheckedUpdateWithoutUserInput>
  }

  export type PerformerProfileUpdateWithoutUserInput = {
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kycChecks?: KycCheckUpdateManyWithoutPerformerNestedInput
    BillingOrder?: BillingOrderUpdateManyWithoutPerformerNestedInput
  }

  export type PerformerProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kycChecks?: KycCheckUncheckedUpdateManyWithoutPerformerNestedInput
    BillingOrder?: BillingOrderUncheckedUpdateManyWithoutPerformerNestedInput
  }

  export type RequestUpsertWithWhereUniqueWithoutClientInput = {
    where: RequestWhereUniqueInput
    update: XOR<RequestUpdateWithoutClientInput, RequestUncheckedUpdateWithoutClientInput>
    create: XOR<RequestCreateWithoutClientInput, RequestUncheckedCreateWithoutClientInput>
  }

  export type RequestUpdateWithWhereUniqueWithoutClientInput = {
    where: RequestWhereUniqueInput
    data: XOR<RequestUpdateWithoutClientInput, RequestUncheckedUpdateWithoutClientInput>
  }

  export type RequestUpdateManyWithWhereWithoutClientInput = {
    where: RequestScalarWhereInput
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyWithoutClientInput>
  }

  export type RequestScalarWhereInput = {
    AND?: RequestScalarWhereInput | RequestScalarWhereInput[]
    OR?: RequestScalarWhereInput[]
    NOT?: RequestScalarWhereInput | RequestScalarWhereInput[]
    id?: IntFilter<"Request"> | number
    clientId?: IntFilter<"Request"> | number
    performerId?: IntFilter<"Request"> | number
    game?: StringFilter<"Request"> | string
    durationMin?: IntFilter<"Request"> | number
    preferredAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    status?: EnumRequestStatusFilter<"Request"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"Request"> | Date | string
    updatedAt?: DateTimeFilter<"Request"> | Date | string
  }

  export type RequestUpsertWithWhereUniqueWithoutPerformerInput = {
    where: RequestWhereUniqueInput
    update: XOR<RequestUpdateWithoutPerformerInput, RequestUncheckedUpdateWithoutPerformerInput>
    create: XOR<RequestCreateWithoutPerformerInput, RequestUncheckedCreateWithoutPerformerInput>
  }

  export type RequestUpdateWithWhereUniqueWithoutPerformerInput = {
    where: RequestWhereUniqueInput
    data: XOR<RequestUpdateWithoutPerformerInput, RequestUncheckedUpdateWithoutPerformerInput>
  }

  export type RequestUpdateManyWithWhereWithoutPerformerInput = {
    where: RequestScalarWhereInput
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyWithoutPerformerInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutAuthorInput, ReviewUncheckedUpdateWithoutAuthorInput>
    create: XOR<ReviewCreateWithoutAuthorInput, ReviewUncheckedCreateWithoutAuthorInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutAuthorInput, ReviewUncheckedUpdateWithoutAuthorInput>
  }

  export type ReviewUpdateManyWithWhereWithoutAuthorInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    requestId?: IntFilter<"Review"> | number
    authorId?: IntFilter<"Review"> | number
    targetId?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    text?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutTargetInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutTargetInput, ReviewUncheckedUpdateWithoutTargetInput>
    create: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutTargetInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutTargetInput, ReviewUncheckedUpdateWithoutTargetInput>
  }

  export type ReviewUpdateManyWithWhereWithoutTargetInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutTargetInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutReporterInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutReporterInput, ReportUncheckedUpdateWithoutReporterInput>
    create: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutReporterInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutReporterInput, ReportUncheckedUpdateWithoutReporterInput>
  }

  export type ReportUpdateManyWithWhereWithoutReporterInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutReporterInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: IntFilter<"Report"> | number
    reporterId?: IntFilter<"Report"> | number
    targetUserId?: IntNullableFilter<"Report"> | number | null
    category?: StringFilter<"Report"> | string
    text?: StringNullableFilter<"Report"> | string | null
    attachments?: StringNullableListFilter<"Report">
    status?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutTargetUserInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutTargetUserInput, ReportUncheckedUpdateWithoutTargetUserInput>
    create: XOR<ReportCreateWithoutTargetUserInput, ReportUncheckedCreateWithoutTargetUserInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutTargetUserInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutTargetUserInput, ReportUncheckedUpdateWithoutTargetUserInput>
  }

  export type ReportUpdateManyWithWhereWithoutTargetUserInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutTargetUserInput>
  }

  export type UserCreateWithoutPerformerProfileInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    clientRequests?: RequestCreateNestedManyWithoutClientInput
    performerRequests?: RequestCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutPerformerProfileInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    clientRequests?: RequestUncheckedCreateNestedManyWithoutClientInput
    performerRequests?: RequestUncheckedCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewUncheckedCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewUncheckedCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportUncheckedCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutPerformerProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPerformerProfileInput, UserUncheckedCreateWithoutPerformerProfileInput>
  }

  export type KycCheckCreateWithoutPerformerInput = {
    docType: string
    docImages?: KycCheckCreatedocImagesInput | string[]
    selfieUrl?: string | null
    status: string
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KycCheckUncheckedCreateWithoutPerformerInput = {
    id?: number
    docType: string
    docImages?: KycCheckCreatedocImagesInput | string[]
    selfieUrl?: string | null
    status: string
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KycCheckCreateOrConnectWithoutPerformerInput = {
    where: KycCheckWhereUniqueInput
    create: XOR<KycCheckCreateWithoutPerformerInput, KycCheckUncheckedCreateWithoutPerformerInput>
  }

  export type KycCheckCreateManyPerformerInputEnvelope = {
    data: KycCheckCreateManyPerformerInput | KycCheckCreateManyPerformerInput[]
    skipDuplicates?: boolean
  }

  export type BillingOrderCreateWithoutPerformerInput = {
    type: $Enums.BillingType
    plan?: $Enums.Plan | null
    days: number
    amountRub: number
    proofUrls?: BillingOrderCreateproofUrlsInput | string[]
    status?: $Enums.BillingStatus
    notes?: string | null
    activatedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingOrderUncheckedCreateWithoutPerformerInput = {
    id?: number
    type: $Enums.BillingType
    plan?: $Enums.Plan | null
    days: number
    amountRub: number
    proofUrls?: BillingOrderCreateproofUrlsInput | string[]
    status?: $Enums.BillingStatus
    notes?: string | null
    activatedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingOrderCreateOrConnectWithoutPerformerInput = {
    where: BillingOrderWhereUniqueInput
    create: XOR<BillingOrderCreateWithoutPerformerInput, BillingOrderUncheckedCreateWithoutPerformerInput>
  }

  export type BillingOrderCreateManyPerformerInputEnvelope = {
    data: BillingOrderCreateManyPerformerInput | BillingOrderCreateManyPerformerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPerformerProfileInput = {
    update: XOR<UserUpdateWithoutPerformerProfileInput, UserUncheckedUpdateWithoutPerformerProfileInput>
    create: XOR<UserCreateWithoutPerformerProfileInput, UserUncheckedCreateWithoutPerformerProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPerformerProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPerformerProfileInput, UserUncheckedUpdateWithoutPerformerProfileInput>
  }

  export type UserUpdateWithoutPerformerProfileInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientRequests?: RequestUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPerformerProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientRequests?: RequestUncheckedUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUncheckedUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUncheckedUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type KycCheckUpsertWithWhereUniqueWithoutPerformerInput = {
    where: KycCheckWhereUniqueInput
    update: XOR<KycCheckUpdateWithoutPerformerInput, KycCheckUncheckedUpdateWithoutPerformerInput>
    create: XOR<KycCheckCreateWithoutPerformerInput, KycCheckUncheckedCreateWithoutPerformerInput>
  }

  export type KycCheckUpdateWithWhereUniqueWithoutPerformerInput = {
    where: KycCheckWhereUniqueInput
    data: XOR<KycCheckUpdateWithoutPerformerInput, KycCheckUncheckedUpdateWithoutPerformerInput>
  }

  export type KycCheckUpdateManyWithWhereWithoutPerformerInput = {
    where: KycCheckScalarWhereInput
    data: XOR<KycCheckUpdateManyMutationInput, KycCheckUncheckedUpdateManyWithoutPerformerInput>
  }

  export type KycCheckScalarWhereInput = {
    AND?: KycCheckScalarWhereInput | KycCheckScalarWhereInput[]
    OR?: KycCheckScalarWhereInput[]
    NOT?: KycCheckScalarWhereInput | KycCheckScalarWhereInput[]
    id?: IntFilter<"KycCheck"> | number
    performerId?: IntFilter<"KycCheck"> | number
    docType?: StringFilter<"KycCheck"> | string
    docImages?: StringNullableListFilter<"KycCheck">
    selfieUrl?: StringNullableFilter<"KycCheck"> | string | null
    status?: StringFilter<"KycCheck"> | string
    reason?: StringNullableFilter<"KycCheck"> | string | null
    createdAt?: DateTimeFilter<"KycCheck"> | Date | string
    updatedAt?: DateTimeFilter<"KycCheck"> | Date | string
  }

  export type BillingOrderUpsertWithWhereUniqueWithoutPerformerInput = {
    where: BillingOrderWhereUniqueInput
    update: XOR<BillingOrderUpdateWithoutPerformerInput, BillingOrderUncheckedUpdateWithoutPerformerInput>
    create: XOR<BillingOrderCreateWithoutPerformerInput, BillingOrderUncheckedCreateWithoutPerformerInput>
  }

  export type BillingOrderUpdateWithWhereUniqueWithoutPerformerInput = {
    where: BillingOrderWhereUniqueInput
    data: XOR<BillingOrderUpdateWithoutPerformerInput, BillingOrderUncheckedUpdateWithoutPerformerInput>
  }

  export type BillingOrderUpdateManyWithWhereWithoutPerformerInput = {
    where: BillingOrderScalarWhereInput
    data: XOR<BillingOrderUpdateManyMutationInput, BillingOrderUncheckedUpdateManyWithoutPerformerInput>
  }

  export type BillingOrderScalarWhereInput = {
    AND?: BillingOrderScalarWhereInput | BillingOrderScalarWhereInput[]
    OR?: BillingOrderScalarWhereInput[]
    NOT?: BillingOrderScalarWhereInput | BillingOrderScalarWhereInput[]
    id?: IntFilter<"BillingOrder"> | number
    performerId?: IntFilter<"BillingOrder"> | number
    type?: EnumBillingTypeFilter<"BillingOrder"> | $Enums.BillingType
    plan?: EnumPlanNullableFilter<"BillingOrder"> | $Enums.Plan | null
    days?: IntFilter<"BillingOrder"> | number
    amountRub?: IntFilter<"BillingOrder"> | number
    proofUrls?: StringNullableListFilter<"BillingOrder">
    status?: EnumBillingStatusFilter<"BillingOrder"> | $Enums.BillingStatus
    notes?: StringNullableFilter<"BillingOrder"> | string | null
    activatedUntil?: DateTimeNullableFilter<"BillingOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"BillingOrder"> | Date | string
    updatedAt?: DateTimeFilter<"BillingOrder"> | Date | string
  }

  export type PerformerProfileCreateWithoutKycChecksInput = {
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPerformerProfileInput
    BillingOrder?: BillingOrderCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileUncheckedCreateWithoutKycChecksInput = {
    id?: number
    userId: number
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    BillingOrder?: BillingOrderUncheckedCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileCreateOrConnectWithoutKycChecksInput = {
    where: PerformerProfileWhereUniqueInput
    create: XOR<PerformerProfileCreateWithoutKycChecksInput, PerformerProfileUncheckedCreateWithoutKycChecksInput>
  }

  export type PerformerProfileUpsertWithoutKycChecksInput = {
    update: XOR<PerformerProfileUpdateWithoutKycChecksInput, PerformerProfileUncheckedUpdateWithoutKycChecksInput>
    create: XOR<PerformerProfileCreateWithoutKycChecksInput, PerformerProfileUncheckedCreateWithoutKycChecksInput>
    where?: PerformerProfileWhereInput
  }

  export type PerformerProfileUpdateToOneWithWhereWithoutKycChecksInput = {
    where?: PerformerProfileWhereInput
    data: XOR<PerformerProfileUpdateWithoutKycChecksInput, PerformerProfileUncheckedUpdateWithoutKycChecksInput>
  }

  export type PerformerProfileUpdateWithoutKycChecksInput = {
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPerformerProfileNestedInput
    BillingOrder?: BillingOrderUpdateManyWithoutPerformerNestedInput
  }

  export type PerformerProfileUncheckedUpdateWithoutKycChecksInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BillingOrder?: BillingOrderUncheckedUpdateManyWithoutPerformerNestedInput
  }

  export type UserCreateWithoutClientRequestsInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileCreateNestedOneWithoutUserInput
    performerRequests?: RequestCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutClientRequestsInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileUncheckedCreateNestedOneWithoutUserInput
    performerRequests?: RequestUncheckedCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewUncheckedCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewUncheckedCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportUncheckedCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutClientRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClientRequestsInput, UserUncheckedCreateWithoutClientRequestsInput>
  }

  export type UserCreateWithoutPerformerRequestsInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileCreateNestedOneWithoutUserInput
    clientRequests?: RequestCreateNestedManyWithoutClientInput
    reviewsAuthored?: ReviewCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutPerformerRequestsInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileUncheckedCreateNestedOneWithoutUserInput
    clientRequests?: RequestUncheckedCreateNestedManyWithoutClientInput
    reviewsAuthored?: ReviewUncheckedCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewUncheckedCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportUncheckedCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutPerformerRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPerformerRequestsInput, UserUncheckedCreateWithoutPerformerRequestsInput>
  }

  export type PaymentMetaCreateWithoutRequestInput = {
    method?: $Enums.PaymentMethod
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: PaymentMetaCreateproofUrlsInput | string[]
    instructions?: string | null
  }

  export type PaymentMetaUncheckedCreateWithoutRequestInput = {
    id?: number
    method?: $Enums.PaymentMethod
    clientMarkPaid?: boolean
    performerReceived?: boolean
    proofUrls?: PaymentMetaCreateproofUrlsInput | string[]
    instructions?: string | null
  }

  export type PaymentMetaCreateOrConnectWithoutRequestInput = {
    where: PaymentMetaWhereUniqueInput
    create: XOR<PaymentMetaCreateWithoutRequestInput, PaymentMetaUncheckedCreateWithoutRequestInput>
  }

  export type ReviewCreateWithoutRequestInput = {
    rating: number
    text?: string | null
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutReviewsAuthoredInput
    target: UserCreateNestedOneWithoutReviewsReceivedInput
  }

  export type ReviewUncheckedCreateWithoutRequestInput = {
    id?: number
    authorId: number
    targetId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutRequestInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutRequestInput, ReviewUncheckedCreateWithoutRequestInput>
  }

  export type ReviewCreateManyRequestInputEnvelope = {
    data: ReviewCreateManyRequestInput | ReviewCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutClientRequestsInput = {
    update: XOR<UserUpdateWithoutClientRequestsInput, UserUncheckedUpdateWithoutClientRequestsInput>
    create: XOR<UserCreateWithoutClientRequestsInput, UserUncheckedCreateWithoutClientRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClientRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClientRequestsInput, UserUncheckedUpdateWithoutClientRequestsInput>
  }

  export type UserUpdateWithoutClientRequestsInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUpdateOneWithoutUserNestedInput
    performerRequests?: RequestUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClientRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUncheckedUpdateOneWithoutUserNestedInput
    performerRequests?: RequestUncheckedUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUncheckedUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUpsertWithoutPerformerRequestsInput = {
    update: XOR<UserUpdateWithoutPerformerRequestsInput, UserUncheckedUpdateWithoutPerformerRequestsInput>
    create: XOR<UserCreateWithoutPerformerRequestsInput, UserUncheckedCreateWithoutPerformerRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPerformerRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPerformerRequestsInput, UserUncheckedUpdateWithoutPerformerRequestsInput>
  }

  export type UserUpdateWithoutPerformerRequestsInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUpdateManyWithoutClientNestedInput
    reviewsAuthored?: ReviewUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPerformerRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUncheckedUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUncheckedUpdateManyWithoutClientNestedInput
    reviewsAuthored?: ReviewUncheckedUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type PaymentMetaUpsertWithoutRequestInput = {
    update: XOR<PaymentMetaUpdateWithoutRequestInput, PaymentMetaUncheckedUpdateWithoutRequestInput>
    create: XOR<PaymentMetaCreateWithoutRequestInput, PaymentMetaUncheckedCreateWithoutRequestInput>
    where?: PaymentMetaWhereInput
  }

  export type PaymentMetaUpdateToOneWithWhereWithoutRequestInput = {
    where?: PaymentMetaWhereInput
    data: XOR<PaymentMetaUpdateWithoutRequestInput, PaymentMetaUncheckedUpdateWithoutRequestInput>
  }

  export type PaymentMetaUpdateWithoutRequestInput = {
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    clientMarkPaid?: BoolFieldUpdateOperationsInput | boolean
    performerReceived?: BoolFieldUpdateOperationsInput | boolean
    proofUrls?: PaymentMetaUpdateproofUrlsInput | string[]
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentMetaUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    clientMarkPaid?: BoolFieldUpdateOperationsInput | boolean
    performerReceived?: BoolFieldUpdateOperationsInput | boolean
    proofUrls?: PaymentMetaUpdateproofUrlsInput | string[]
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpsertWithWhereUniqueWithoutRequestInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutRequestInput, ReviewUncheckedUpdateWithoutRequestInput>
    create: XOR<ReviewCreateWithoutRequestInput, ReviewUncheckedCreateWithoutRequestInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutRequestInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutRequestInput, ReviewUncheckedUpdateWithoutRequestInput>
  }

  export type ReviewUpdateManyWithWhereWithoutRequestInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutRequestInput>
  }

  export type RequestCreateWithoutPaymentMetaInput = {
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: UserCreateNestedOneWithoutClientRequestsInput
    performer: UserCreateNestedOneWithoutPerformerRequestsInput
    reviews?: ReviewCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutPaymentMetaInput = {
    id?: number
    clientId: number
    performerId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ReviewUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutPaymentMetaInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutPaymentMetaInput, RequestUncheckedCreateWithoutPaymentMetaInput>
  }

  export type RequestUpsertWithoutPaymentMetaInput = {
    update: XOR<RequestUpdateWithoutPaymentMetaInput, RequestUncheckedUpdateWithoutPaymentMetaInput>
    create: XOR<RequestCreateWithoutPaymentMetaInput, RequestUncheckedCreateWithoutPaymentMetaInput>
    where?: RequestWhereInput
  }

  export type RequestUpdateToOneWithWhereWithoutPaymentMetaInput = {
    where?: RequestWhereInput
    data: XOR<RequestUpdateWithoutPaymentMetaInput, RequestUncheckedUpdateWithoutPaymentMetaInput>
  }

  export type RequestUpdateWithoutPaymentMetaInput = {
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutClientRequestsNestedInput
    performer?: UserUpdateOneRequiredWithoutPerformerRequestsNestedInput
    reviews?: ReviewUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutPaymentMetaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestCreateWithoutReviewsInput = {
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: UserCreateNestedOneWithoutClientRequestsInput
    performer: UserCreateNestedOneWithoutPerformerRequestsInput
    paymentMeta?: PaymentMetaCreateNestedOneWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutReviewsInput = {
    id?: number
    clientId: number
    performerId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMeta?: PaymentMetaUncheckedCreateNestedOneWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutReviewsInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutReviewsInput, RequestUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutReviewsAuthoredInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileCreateNestedOneWithoutUserInput
    clientRequests?: RequestCreateNestedManyWithoutClientInput
    performerRequests?: RequestCreateNestedManyWithoutPerformerInput
    reviewsReceived?: ReviewCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutReviewsAuthoredInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileUncheckedCreateNestedOneWithoutUserInput
    clientRequests?: RequestUncheckedCreateNestedManyWithoutClientInput
    performerRequests?: RequestUncheckedCreateNestedManyWithoutPerformerInput
    reviewsReceived?: ReviewUncheckedCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportUncheckedCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutReviewsAuthoredInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsAuthoredInput, UserUncheckedCreateWithoutReviewsAuthoredInput>
  }

  export type UserCreateWithoutReviewsReceivedInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileCreateNestedOneWithoutUserInput
    clientRequests?: RequestCreateNestedManyWithoutClientInput
    performerRequests?: RequestCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewCreateNestedManyWithoutAuthorInput
    reportsAuthored?: ReportCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutReviewsReceivedInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileUncheckedCreateNestedOneWithoutUserInput
    clientRequests?: RequestUncheckedCreateNestedManyWithoutClientInput
    performerRequests?: RequestUncheckedCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewUncheckedCreateNestedManyWithoutAuthorInput
    reportsAuthored?: ReportUncheckedCreateNestedManyWithoutReporterInput
    reportsReceived?: ReportUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutReviewsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsReceivedInput, UserUncheckedCreateWithoutReviewsReceivedInput>
  }

  export type RequestUpsertWithoutReviewsInput = {
    update: XOR<RequestUpdateWithoutReviewsInput, RequestUncheckedUpdateWithoutReviewsInput>
    create: XOR<RequestCreateWithoutReviewsInput, RequestUncheckedCreateWithoutReviewsInput>
    where?: RequestWhereInput
  }

  export type RequestUpdateToOneWithWhereWithoutReviewsInput = {
    where?: RequestWhereInput
    data: XOR<RequestUpdateWithoutReviewsInput, RequestUncheckedUpdateWithoutReviewsInput>
  }

  export type RequestUpdateWithoutReviewsInput = {
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutClientRequestsNestedInput
    performer?: UserUpdateOneRequiredWithoutPerformerRequestsNestedInput
    paymentMeta?: PaymentMetaUpdateOneWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMeta?: PaymentMetaUncheckedUpdateOneWithoutRequestNestedInput
  }

  export type UserUpsertWithoutReviewsAuthoredInput = {
    update: XOR<UserUpdateWithoutReviewsAuthoredInput, UserUncheckedUpdateWithoutReviewsAuthoredInput>
    create: XOR<UserCreateWithoutReviewsAuthoredInput, UserUncheckedCreateWithoutReviewsAuthoredInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsAuthoredInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsAuthoredInput, UserUncheckedUpdateWithoutReviewsAuthoredInput>
  }

  export type UserUpdateWithoutReviewsAuthoredInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUpdateManyWithoutPerformerNestedInput
    reviewsReceived?: ReviewUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsAuthoredInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUncheckedUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUncheckedUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUncheckedUpdateManyWithoutPerformerNestedInput
    reviewsReceived?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUpsertWithoutReviewsReceivedInput = {
    update: XOR<UserUpdateWithoutReviewsReceivedInput, UserUncheckedUpdateWithoutReviewsReceivedInput>
    create: XOR<UserCreateWithoutReviewsReceivedInput, UserUncheckedCreateWithoutReviewsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsReceivedInput, UserUncheckedUpdateWithoutReviewsReceivedInput>
  }

  export type UserUpdateWithoutReviewsReceivedInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUpdateManyWithoutAuthorNestedInput
    reportsAuthored?: ReportUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUncheckedUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUncheckedUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUncheckedUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUncheckedUpdateManyWithoutAuthorNestedInput
    reportsAuthored?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    reportsReceived?: ReportUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserCreateWithoutReportsAuthoredInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileCreateNestedOneWithoutUserInput
    clientRequests?: RequestCreateNestedManyWithoutClientInput
    performerRequests?: RequestCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewCreateNestedManyWithoutTargetInput
    reportsReceived?: ReportCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutReportsAuthoredInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileUncheckedCreateNestedOneWithoutUserInput
    clientRequests?: RequestUncheckedCreateNestedManyWithoutClientInput
    performerRequests?: RequestUncheckedCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewUncheckedCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewUncheckedCreateNestedManyWithoutTargetInput
    reportsReceived?: ReportUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutReportsAuthoredInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsAuthoredInput, UserUncheckedCreateWithoutReportsAuthoredInput>
  }

  export type UserCreateWithoutReportsReceivedInput = {
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileCreateNestedOneWithoutUserInput
    clientRequests?: RequestCreateNestedManyWithoutClientInput
    performerRequests?: RequestCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportCreateNestedManyWithoutReporterInput
  }

  export type UserUncheckedCreateWithoutReportsReceivedInput = {
    id?: number
    tgId: string
    username?: string | null
    role: $Enums.Role
    ageConfirmed?: boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performerProfile?: PerformerProfileUncheckedCreateNestedOneWithoutUserInput
    clientRequests?: RequestUncheckedCreateNestedManyWithoutClientInput
    performerRequests?: RequestUncheckedCreateNestedManyWithoutPerformerInput
    reviewsAuthored?: ReviewUncheckedCreateNestedManyWithoutAuthorInput
    reviewsReceived?: ReviewUncheckedCreateNestedManyWithoutTargetInput
    reportsAuthored?: ReportUncheckedCreateNestedManyWithoutReporterInput
  }

  export type UserCreateOrConnectWithoutReportsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsReceivedInput, UserUncheckedCreateWithoutReportsReceivedInput>
  }

  export type UserUpsertWithoutReportsAuthoredInput = {
    update: XOR<UserUpdateWithoutReportsAuthoredInput, UserUncheckedUpdateWithoutReportsAuthoredInput>
    create: XOR<UserCreateWithoutReportsAuthoredInput, UserUncheckedCreateWithoutReportsAuthoredInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsAuthoredInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsAuthoredInput, UserUncheckedUpdateWithoutReportsAuthoredInput>
  }

  export type UserUpdateWithoutReportsAuthoredInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUpdateManyWithoutTargetNestedInput
    reportsReceived?: ReportUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsAuthoredInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUncheckedUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUncheckedUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUncheckedUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUncheckedUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
    reportsReceived?: ReportUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUpsertWithoutReportsReceivedInput = {
    update: XOR<UserUpdateWithoutReportsReceivedInput, UserUncheckedUpdateWithoutReportsReceivedInput>
    create: XOR<UserCreateWithoutReportsReceivedInput, UserUncheckedCreateWithoutReportsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsReceivedInput, UserUncheckedUpdateWithoutReportsReceivedInput>
  }

  export type UserUpdateWithoutReportsReceivedInput = {
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUpdateManyWithoutReporterNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    tgId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    ageConfirmed?: BoolFieldUpdateOperationsInput | boolean
    searchPrefs?: NullableJsonNullValueInput | InputJsonValue
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerProfile?: PerformerProfileUncheckedUpdateOneWithoutUserNestedInput
    clientRequests?: RequestUncheckedUpdateManyWithoutClientNestedInput
    performerRequests?: RequestUncheckedUpdateManyWithoutPerformerNestedInput
    reviewsAuthored?: ReviewUncheckedUpdateManyWithoutAuthorNestedInput
    reviewsReceived?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
    reportsAuthored?: ReportUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type PerformerProfileCreateWithoutBillingOrderInput = {
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPerformerProfileInput
    kycChecks?: KycCheckCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileUncheckedCreateWithoutBillingOrderInput = {
    id?: number
    userId: number
    games?: PerformerProfileCreategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour: number
    about?: string | null
    voiceSampleUrl?: string | null
    photos?: PerformerProfileCreatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ListingStatus
    rating?: number
    isBoosted?: boolean
    boostUntil?: Date | string | null
    plan?: $Enums.Plan
    planUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kycChecks?: KycCheckUncheckedCreateNestedManyWithoutPerformerInput
  }

  export type PerformerProfileCreateOrConnectWithoutBillingOrderInput = {
    where: PerformerProfileWhereUniqueInput
    create: XOR<PerformerProfileCreateWithoutBillingOrderInput, PerformerProfileUncheckedCreateWithoutBillingOrderInput>
  }

  export type PerformerProfileUpsertWithoutBillingOrderInput = {
    update: XOR<PerformerProfileUpdateWithoutBillingOrderInput, PerformerProfileUncheckedUpdateWithoutBillingOrderInput>
    create: XOR<PerformerProfileCreateWithoutBillingOrderInput, PerformerProfileUncheckedCreateWithoutBillingOrderInput>
    where?: PerformerProfileWhereInput
  }

  export type PerformerProfileUpdateToOneWithWhereWithoutBillingOrderInput = {
    where?: PerformerProfileWhereInput
    data: XOR<PerformerProfileUpdateWithoutBillingOrderInput, PerformerProfileUncheckedUpdateWithoutBillingOrderInput>
  }

  export type PerformerProfileUpdateWithoutBillingOrderInput = {
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPerformerProfileNestedInput
    kycChecks?: KycCheckUpdateManyWithoutPerformerNestedInput
  }

  export type PerformerProfileUncheckedUpdateWithoutBillingOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    games?: PerformerProfileUpdategamesInput | string[]
    ranks?: NullableJsonNullValueInput | InputJsonValue
    pricePerHour?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    voiceSampleUrl?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: PerformerProfileUpdatephotosInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus
    rating?: FloatFieldUpdateOperationsInput | number
    isBoosted?: BoolFieldUpdateOperationsInput | boolean
    boostUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    planUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kycChecks?: KycCheckUncheckedUpdateManyWithoutPerformerNestedInput
  }

  export type RequestCreateManyClientInput = {
    id?: number
    performerId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestCreateManyPerformerInput = {
    id?: number
    clientId: number
    game: string
    durationMin: number
    preferredAt?: Date | string | null
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyAuthorInput = {
    id?: number
    requestId: number
    targetId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateManyTargetInput = {
    id?: number
    requestId: number
    authorId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReportCreateManyReporterInput = {
    id?: number
    targetUserId?: number | null
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyTargetUserInput = {
    id?: number
    reporterId: number
    category: string
    text?: string | null
    attachments?: ReportCreateattachmentsInput | string[]
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestUpdateWithoutClientInput = {
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performer?: UserUpdateOneRequiredWithoutPerformerRequestsNestedInput
    paymentMeta?: PaymentMetaUpdateOneWithoutRequestNestedInput
    reviews?: ReviewUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMeta?: PaymentMetaUncheckedUpdateOneWithoutRequestNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    performerId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestUpdateWithoutPerformerInput = {
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutClientRequestsNestedInput
    paymentMeta?: PaymentMetaUpdateOneWithoutRequestNestedInput
    reviews?: ReviewUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutPerformerInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMeta?: PaymentMetaUncheckedUpdateOneWithoutRequestNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateManyWithoutPerformerInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    game?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    preferredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutAuthorInput = {
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: RequestUpdateOneRequiredWithoutReviewsNestedInput
    target?: UserUpdateOneRequiredWithoutReviewsReceivedNestedInput
  }

  export type ReviewUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutTargetInput = {
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: RequestUpdateOneRequiredWithoutReviewsNestedInput
    author?: UserUpdateOneRequiredWithoutReviewsAuthoredNestedInput
  }

  export type ReviewUncheckedUpdateWithoutTargetInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutTargetInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutReporterInput = {
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetUser?: UserUpdateOneWithoutReportsReceivedNestedInput
  }

  export type ReportUncheckedUpdateWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserId?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserId?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutTargetUserInput = {
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportsAuthoredNestedInput
  }

  export type ReportUncheckedUpdateWithoutTargetUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyWithoutTargetUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ReportUpdateattachmentsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KycCheckCreateManyPerformerInput = {
    id?: number
    docType: string
    docImages?: KycCheckCreatedocImagesInput | string[]
    selfieUrl?: string | null
    status: string
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingOrderCreateManyPerformerInput = {
    id?: number
    type: $Enums.BillingType
    plan?: $Enums.Plan | null
    days: number
    amountRub: number
    proofUrls?: BillingOrderCreateproofUrlsInput | string[]
    status?: $Enums.BillingStatus
    notes?: string | null
    activatedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KycCheckUpdateWithoutPerformerInput = {
    docType?: StringFieldUpdateOperationsInput | string
    docImages?: KycCheckUpdatedocImagesInput | string[]
    selfieUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KycCheckUncheckedUpdateWithoutPerformerInput = {
    id?: IntFieldUpdateOperationsInput | number
    docType?: StringFieldUpdateOperationsInput | string
    docImages?: KycCheckUpdatedocImagesInput | string[]
    selfieUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KycCheckUncheckedUpdateManyWithoutPerformerInput = {
    id?: IntFieldUpdateOperationsInput | number
    docType?: StringFieldUpdateOperationsInput | string
    docImages?: KycCheckUpdatedocImagesInput | string[]
    selfieUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingOrderUpdateWithoutPerformerInput = {
    type?: EnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType
    plan?: NullableEnumPlanFieldUpdateOperationsInput | $Enums.Plan | null
    days?: IntFieldUpdateOperationsInput | number
    amountRub?: IntFieldUpdateOperationsInput | number
    proofUrls?: BillingOrderUpdateproofUrlsInput | string[]
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    activatedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingOrderUncheckedUpdateWithoutPerformerInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType
    plan?: NullableEnumPlanFieldUpdateOperationsInput | $Enums.Plan | null
    days?: IntFieldUpdateOperationsInput | number
    amountRub?: IntFieldUpdateOperationsInput | number
    proofUrls?: BillingOrderUpdateproofUrlsInput | string[]
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    activatedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingOrderUncheckedUpdateManyWithoutPerformerInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType
    plan?: NullableEnumPlanFieldUpdateOperationsInput | $Enums.Plan | null
    days?: IntFieldUpdateOperationsInput | number
    amountRub?: IntFieldUpdateOperationsInput | number
    proofUrls?: BillingOrderUpdateproofUrlsInput | string[]
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    activatedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyRequestInput = {
    id?: number
    authorId: number
    targetId: number
    rating: number
    text?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateWithoutRequestInput = {
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutReviewsAuthoredNestedInput
    target?: UserUpdateOneRequiredWithoutReviewsReceivedNestedInput
  }

  export type ReviewUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PerformerProfileCountOutputTypeDefaultArgs instead
     */
    export type PerformerProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PerformerProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestCountOutputTypeDefaultArgs instead
     */
    export type RequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PerformerProfileDefaultArgs instead
     */
    export type PerformerProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PerformerProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KycCheckDefaultArgs instead
     */
    export type KycCheckArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KycCheckDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestDefaultArgs instead
     */
    export type RequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentMetaDefaultArgs instead
     */
    export type PaymentMetaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentMetaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingOrderDefaultArgs instead
     */
    export type BillingOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingOrderDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}